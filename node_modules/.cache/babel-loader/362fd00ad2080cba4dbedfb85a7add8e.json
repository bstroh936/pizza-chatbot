{"ast":null,"code":"import{stringify,parse}from'flatted/cjs';/* istanbul ignore next */var getData=function getData(params,callback){var cacheName=params.cacheName,cache=params.cache,firstStep=params.firstStep,steps=params.steps;var currentStep=firstStep;var renderedSteps=[steps[currentStep.id]];var previousSteps=[steps[currentStep.id]];var previousStep={};var unParsedCache=localStorage.getItem(cacheName);if(cache&&unParsedCache){try{var data=parse(unParsedCache);var lastStep=data.renderedSteps[data.renderedSteps.length-1];if(lastStep&&lastStep.end){localStorage.removeItem(cacheName);}else{for(var i=0,len=data.renderedSteps.length;i<len;i+=1){var renderedStep=data.renderedSteps[i];// remove delay of cached rendered steps\ndata.renderedSteps[i].delay=0;// flag used to avoid call triggerNextStep in cached rendered steps\ndata.renderedSteps[i].rendered=true;// an error is thrown when render a component from localStorage.\n// So it's necessary reassing the component\nif(renderedStep.component){var _id=renderedStep.id;data.renderedSteps[i].component=steps[_id].component;}}var _data$currentStep=data.currentStep,trigger=_data$currentStep.trigger,end=_data$currentStep.end,options=_data$currentStep.options;var id=data.currentStep.id;if(options){delete data.currentStep.rendered;}// add trigger function to current step\nif(!trigger&&!end){if(options){for(var _i=0;_i<options.length;_i+=1){data.currentStep.options[_i].trigger=steps[id].options[_i].trigger;}}else{data.currentStep.trigger=steps[id].trigger;}}// execute callback function to enable input if last step is\n// waiting user type\nif(data.currentStep.user){callback();}return data;}}catch(error){console.info(\"Unable to parse cache named:\".concat(cacheName,\". \\nThe cache where probably created with an older version of react-simple-chatbot.\\n\"),error);}}return{currentStep:currentStep,previousStep:previousStep,previousSteps:previousSteps,renderedSteps:renderedSteps};};/* istanbul ignore next */var setData=function setData(cacheName,cachedData){var data=parse(stringify(cachedData));// clean components\nfor(var key in data){for(var i=0,len=data[key].length;i<len;i+=1){if(data[key][i].component){data[key][i].component=data[key][i].id;}}}localStorage.setItem(cacheName,stringify(data));};export{getData,setData};","map":{"version":3,"sources":["C:/Users/TheTOP/Documents/GitHub/pizza-chatbot-chk4/src/components/chatbot/storage.js"],"names":["stringify","parse","getData","params","callback","cacheName","cache","firstStep","steps","currentStep","renderedSteps","id","previousSteps","previousStep","unParsedCache","localStorage","getItem","data","lastStep","length","end","removeItem","i","len","renderedStep","delay","rendered","component","trigger","options","user","error","console","info","setData","cachedData","key","setItem"],"mappings":"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","sourcesContent":["import { stringify, parse } from 'flatted/cjs'\n\n/* istanbul ignore next */\nconst getData = (params, callback) => {\n  const { cacheName, cache, firstStep, steps } = params;\n  const currentStep = firstStep;\n  const renderedSteps = [steps[currentStep.id]];\n  const previousSteps = [steps[currentStep.id]];\n  const previousStep = {};\n  const unParsedCache = localStorage.getItem(cacheName);\n\n  if (cache && unParsedCache) {\n    try {\n      const data = parse(unParsedCache);\n      const lastStep = data.renderedSteps[data.renderedSteps.length - 1];\n\n      if (lastStep && lastStep.end) {\n        localStorage.removeItem(cacheName);\n      } else {\n        for (let i = 0, len = data.renderedSteps.length; i < len; i += 1) {\n          const renderedStep = data.renderedSteps[i];\n          // remove delay of cached rendered steps\n          data.renderedSteps[i].delay = 0;\n          // flag used to avoid call triggerNextStep in cached rendered steps\n          data.renderedSteps[i].rendered = true;\n\n          // an error is thrown when render a component from localStorage.\n          // So it's necessary reassing the component\n          if (renderedStep.component) {\n            const { id } = renderedStep;\n            data.renderedSteps[i].component = steps[id].component;\n          }\n        }\n\n        const { trigger, end, options } = data.currentStep;\n        const { id } = data.currentStep;\n\n        if (options) {\n          delete data.currentStep.rendered;\n        }\n\n        // add trigger function to current step\n        if (!trigger && !end) {\n          if (options) {\n            for (let i = 0; i < options.length; i += 1) {\n              data.currentStep.options[i].trigger = steps[id].options[i].trigger;\n            }\n          } else {\n            data.currentStep.trigger = steps[id].trigger;\n          }\n        }\n\n        // execute callback function to enable input if last step is\n        // waiting user type\n        if (data.currentStep.user) {\n          callback();\n        }\n\n        return data;\n      }\n    } catch (error) {\n      console.info(`Unable to parse cache named:${cacheName}. \\nThe cache where probably created with an older version of react-simple-chatbot.\\n`, error);\n    }\n  }\n\n  return {\n    currentStep,\n    previousStep,\n    previousSteps,\n    renderedSteps\n  };\n};\n\n/* istanbul ignore next */\nconst setData = (cacheName, cachedData) => {\n  const data = parse(stringify(cachedData));\n  // clean components\n  for (const key in data) {\n    for (let i = 0, len = data[key].length; i < len; i += 1) {\n      if (data[key][i].component) {\n        data[key][i].component = data[key][i].id;\n      }\n    }\n  }\n\n  localStorage.setItem(cacheName, stringify(data));\n};\n\nexport { getData, setData };\n"]},"metadata":{},"sourceType":"module"}