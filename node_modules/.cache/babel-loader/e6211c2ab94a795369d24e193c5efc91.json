{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\TheTOP\\\\Documents\\\\GitHub\\\\pizza-chatbot-chk4\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\TheTOP\\\\Documents\\\\GitHub\\\\pizza-chatbot-chk4\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";var instance=null;var noop=function noop(){};var Recognition=/*#__PURE__*/function(){_createClass(Recognition,null,[{key:\"isSupported\",value:function isSupported(){return'webkitSpeechRecognition'in window;}/**\n   * Creates an instance of Recognition.\n   * @param {function} [onChange] callback on change\n   * @param {function} [onEnd]  callback on and\n   * @param {function} [onStop]  callback on stop\n   * @param {string} [lang='en'] recognition lang\n   * @memberof Recognition\n   * @constructor\n   */}]);function Recognition(){var onChange=arguments.length>0&&arguments[0]!==undefined?arguments[0]:noop;var onEnd=arguments.length>1&&arguments[1]!==undefined?arguments[1]:noop;var onStop=arguments.length>2&&arguments[2]!==undefined?arguments[2]:noop;var lang=arguments.length>3&&arguments[3]!==undefined?arguments[3]:'en';_classCallCheck(this,Recognition);if(!instance){instance=this;}this.state={inputValue:'',lang:lang,onChange:onChange,onEnd:onEnd,onStop:onStop};this.onResult=this.onResult.bind(this);this.onEnd=this.onEnd.bind(this);this.setup();return instance;}/**\n   * Handler for recognition change event\n   * @param {string} interimTranscript\n   * @memberof Recognition\n   * @private\n   */_createClass(Recognition,[{key:\"onChange\",value:function onChange(interimTranscript){var onChange=this.state.onChange;this.setState({inputValue:interimTranscript});onChange(interimTranscript);}/**\n   * Handler for recognition change event when its final\n   * @param {string} finalTranscript\n   * @memberof Recognition\n   * @private\n   */},{key:\"onFinal\",value:function onFinal(finalTranscript){this.setState({inputValue:finalTranscript});this.recognition.stop();}/**\n   * Handler for recognition end event\n   * @memberof Recognition\n   * @private\n   */},{key:\"onEnd\",value:function onEnd(){var _this$state=this.state,onStop=_this$state.onStop,onEnd=_this$state.onEnd,force=_this$state.force;this.setState({speaking:false});if(force){onStop();}else{onEnd();}}/**\n   * Handler for recognition result event\n   * @memberof Recognition\n   * @private\n   */},{key:\"onResult\",value:function onResult(event){var interimTranscript='';var finalTranscript='';for(var i=event.resultIndex;i<event.results.length;i+=1){if(event.results[i].isFinal){finalTranscript+=event.results[i][0].transcript;this.onFinal(finalTranscript);}else{interimTranscript+=event.results[i][0].transcript;this.onChange(interimTranscript);}}}/**\n   * method for updating the instance state\n   * @param {object} nextState\n   * @memberof Recognition\n   * @private\n   */},{key:\"setState\",value:function setState(nextState){this.state=Object.assign({},this.state,nextState);}/**\n   * setup the browser recognition\n   * @returns {Recognition}\n   * @memberof Recognition\n   * @public\n   */},{key:\"setup\",value:function setup(){if(!Recognition.isSupported()){return this;}var _window=window,webkitSpeechRecognition=_window.webkitSpeechRecognition;this.recognition=new webkitSpeechRecognition();this.recognition.continuous=true;this.recognition.interimResults=true;this.recognition.lang=this.state.lang;this.recognition.onresult=this.onResult;this.recognition.onend=this.onEnd;return this;}/**\n   * change the recognition lang and resetup\n   * @param {string} lang the new lang\n   * @returns {Recognition}\n   * @memberof Recognition\n   * @public\n   */},{key:\"setLang\",value:function setLang(lang){this.setState({lang:lang});this.setup();return this;}/**\n   * toggle the recognition\n   * @returns {Recognition}\n   * @memberof Recognition\n   * @public\n   */},{key:\"speak\",value:function speak(){if(!Recognition.isSupported()){return this;}var speaking=this.state.speaking;if(!speaking){this.recognition.start();this.setState({speaking:true,inputValue:''});}else{this.setState({force:true});this.recognition.stop();}return this;}}]);return Recognition;}();export{Recognition as default};","map":{"version":3,"sources":["C:/Users/TheTOP/Documents/GitHub/pizza-chatbot-chk4/src/components/chatbot/recognition.js"],"names":["instance","noop","Recognition","window","onChange","onEnd","onStop","lang","state","inputValue","onResult","bind","setup","interimTranscript","setState","finalTranscript","recognition","stop","force","speaking","event","i","resultIndex","results","length","isFinal","transcript","onFinal","nextState","Object","assign","isSupported","webkitSpeechRecognition","continuous","interimResults","onresult","onend","start"],"mappings":"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","sourcesContent":["let instance = null;\n\nconst noop = () => {};\n\nexport default class Recognition {\n  static isSupported() {\n    return 'webkitSpeechRecognition' in window;\n  }\n\n  /**\n   * Creates an instance of Recognition.\n   * @param {function} [onChange] callback on change\n   * @param {function} [onEnd]  callback on and\n   * @param {function} [onStop]  callback on stop\n   * @param {string} [lang='en'] recognition lang\n   * @memberof Recognition\n   * @constructor\n   */\n  constructor(onChange = noop, onEnd = noop, onStop = noop, lang = 'en') {\n    if (!instance) {\n      instance = this;\n    }\n    this.state = {\n      inputValue: '',\n      lang,\n      onChange,\n      onEnd,\n      onStop\n    };\n\n    this.onResult = this.onResult.bind(this);\n    this.onEnd = this.onEnd.bind(this);\n\n    this.setup();\n\n    return instance;\n  }\n\n  /**\n   * Handler for recognition change event\n   * @param {string} interimTranscript\n   * @memberof Recognition\n   * @private\n   */\n  onChange(interimTranscript) {\n    const { onChange } = this.state;\n    this.setState({\n      inputValue: interimTranscript\n    });\n    onChange(interimTranscript);\n  }\n\n  /**\n   * Handler for recognition change event when its final\n   * @param {string} finalTranscript\n   * @memberof Recognition\n   * @private\n   */\n  onFinal(finalTranscript) {\n    this.setState({\n      inputValue: finalTranscript\n    });\n    this.recognition.stop();\n  }\n\n  /**\n   * Handler for recognition end event\n   * @memberof Recognition\n   * @private\n   */\n  onEnd() {\n    const { onStop, onEnd, force } = this.state;\n    this.setState({ speaking: false });\n    if (force) {\n      onStop();\n    } else {\n      onEnd();\n    }\n  }\n\n  /**\n   * Handler for recognition result event\n   * @memberof Recognition\n   * @private\n   */\n  onResult(event) {\n    let interimTranscript = '';\n    let finalTranscript = '';\n\n    for (let i = event.resultIndex; i < event.results.length; i += 1) {\n      if (event.results[i].isFinal) {\n        finalTranscript += event.results[i][0].transcript;\n        this.onFinal(finalTranscript);\n      } else {\n        interimTranscript += event.results[i][0].transcript;\n        this.onChange(interimTranscript);\n      }\n    }\n  }\n\n  /**\n   * method for updating the instance state\n   * @param {object} nextState\n   * @memberof Recognition\n   * @private\n   */\n  setState(nextState) {\n    this.state = Object.assign({}, this.state, nextState);\n  }\n\n  /**\n   * setup the browser recognition\n   * @returns {Recognition}\n   * @memberof Recognition\n   * @public\n   */\n  setup() {\n    if (!Recognition.isSupported()) {\n      return this;\n    }\n\n    const { webkitSpeechRecognition } = window;\n\n    this.recognition = new webkitSpeechRecognition();\n    this.recognition.continuous = true;\n    this.recognition.interimResults = true;\n    this.recognition.lang = this.state.lang;\n    this.recognition.onresult = this.onResult;\n    this.recognition.onend = this.onEnd;\n    return this;\n  }\n\n  /**\n   * change the recognition lang and resetup\n   * @param {string} lang the new lang\n   * @returns {Recognition}\n   * @memberof Recognition\n   * @public\n   */\n  setLang(lang) {\n    this.setState({ lang });\n    this.setup();\n    return this;\n  }\n\n  /**\n   * toggle the recognition\n   * @returns {Recognition}\n   * @memberof Recognition\n   * @public\n   */\n  speak() {\n    if (!Recognition.isSupported()) {\n      return this;\n    }\n    const { speaking } = this.state;\n    if (!speaking) {\n      this.recognition.start();\n      this.setState({\n        speaking: true,\n        inputValue: ''\n      });\n    } else {\n      this.setState({\n        force: true\n      });\n      this.recognition.stop();\n    }\n    return this;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}