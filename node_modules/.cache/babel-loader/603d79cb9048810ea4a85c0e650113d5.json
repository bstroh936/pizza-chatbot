{"ast":null,"code":"import{isString}from'./utils';export var getSpeakText=function getSpeakText(step){var message=step.message,_step$metadata=step.metadata,metadata=_step$metadata===void 0?{}:_step$metadata;if(isString(metadata.speak)){return metadata.speak;}if(isString(message)){return message;}return'';};export var speakFn=function speakFn(speechSynthesisOptions){return function(step,previousValue){var lang=speechSynthesisOptions.lang,voice=speechSynthesisOptions.voice,enable=speechSynthesisOptions.enable;var user=step.user;if(!window.SpeechSynthesisUtterance||!window.speechSynthesis){return;}if(user){return;}if(!enable){return;}var text=getSpeakText(step);var msg=new window.SpeechSynthesisUtterance();msg.text=text.replace(/{previousValue}/g,previousValue);msg.lang=lang;msg.voice=voice;window.speechSynthesis.speak(msg);};};","map":{"version":3,"sources":["C:/Users/TheTOP/Documents/GitHub/pizza-chatbot-chk4/src/components/chatbot/speechSynthesis.js"],"names":["isString","getSpeakText","step","message","metadata","speak","speakFn","speechSynthesisOptions","previousValue","lang","voice","enable","user","window","SpeechSynthesisUtterance","speechSynthesis","text","msg","replace"],"mappings":"AAAA,OAASA,QAAT,KAAyB,SAAzB,CAEA,MAAO,IAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAC,IAAI,CAAI,IAC1BC,CAAAA,OAD0B,CACCD,IADD,CAC1BC,OAD0B,gBACCD,IADD,CACjBE,QADiB,CACjBA,QADiB,yBACN,EADM,gBAElC,GAAIJ,QAAQ,CAACI,QAAQ,CAACC,KAAV,CAAZ,CAA8B,CAC5B,MAAOD,CAAAA,QAAQ,CAACC,KAAhB,CACD,CACD,GAAIL,QAAQ,CAACG,OAAD,CAAZ,CAAuB,CACrB,MAAOA,CAAAA,OAAP,CACD,CACD,MAAO,EAAP,CACD,CATM,CAWP,MAAO,IAAMG,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAAAC,sBAAsB,QAAI,UAACL,IAAD,CAAOM,aAAP,CAAyB,IAChEC,CAAAA,IADgE,CACxCF,sBADwC,CAChEE,IADgE,CAC1DC,KAD0D,CACxCH,sBADwC,CAC1DG,KAD0D,CACnDC,MADmD,CACxCJ,sBADwC,CACnDI,MADmD,IAEhEC,CAAAA,IAFgE,CAEvDV,IAFuD,CAEhEU,IAFgE,CAIxE,GAAI,CAACC,MAAM,CAACC,wBAAR,EAAoC,CAACD,MAAM,CAACE,eAAhD,CAAiE,CAC/D,OACD,CACD,GAAIH,IAAJ,CAAU,CACR,OACD,CACD,GAAI,CAACD,MAAL,CAAa,CACX,OACD,CACD,GAAMK,CAAAA,IAAI,CAAGf,YAAY,CAACC,IAAD,CAAzB,CACA,GAAMe,CAAAA,GAAG,CAAG,GAAIJ,CAAAA,MAAM,CAACC,wBAAX,EAAZ,CACAG,GAAG,CAACD,IAAJ,CAAWA,IAAI,CAACE,OAAL,CAAa,kBAAb,CAAiCV,aAAjC,CAAX,CACAS,GAAG,CAACR,IAAJ,CAAWA,IAAX,CACAQ,GAAG,CAACP,KAAJ,CAAYA,KAAZ,CACAG,MAAM,CAACE,eAAP,CAAuBV,KAAvB,CAA6BY,GAA7B,EACD,CAnB4C,EAAtC","sourcesContent":["import { isString } from './utils';\r\n\r\nexport const getSpeakText = step => {\r\n  const { message, metadata = {} } = step;\r\n  if (isString(metadata.speak)) {\r\n    return metadata.speak;\r\n  }\r\n  if (isString(message)) {\r\n    return message;\r\n  }\r\n  return '';\r\n};\r\n\r\nexport const speakFn = speechSynthesisOptions => (step, previousValue) => {\r\n  const { lang, voice, enable } = speechSynthesisOptions;\r\n  const { user } = step;\r\n\r\n  if (!window.SpeechSynthesisUtterance || !window.speechSynthesis) {\r\n    return;\r\n  }\r\n  if (user) {\r\n    return;\r\n  }\r\n  if (!enable) {\r\n    return;\r\n  }\r\n  const text = getSpeakText(step);\r\n  const msg = new window.SpeechSynthesisUtterance();\r\n  msg.text = text.replace(/{previousValue}/g, previousValue);\r\n  msg.lang = lang;\r\n  msg.voice = voice;\r\n  window.speechSynthesis.speak(msg);\r\n};\r\n"]},"metadata":{},"sourceType":"module"}