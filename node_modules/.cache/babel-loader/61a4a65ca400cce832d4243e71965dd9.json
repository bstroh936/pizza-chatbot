{"ast":null,"code":"var hexToRgb=function hexToRgb(hex){// http://stackoverflow.com/a/5624139\nvar shorthandRegex=/^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;hex=hex.replace(shorthandRegex,function(m,r,g,b){return r+r+g+g+b+b;});var result=/^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);return result?{r:parseInt(result[1],16),g:parseInt(result[2],16),b:parseInt(result[3],16)}:null;};/**\r\n * Transform hex+alpha to rgba\r\n * @param {string} hex hex color code\r\n * @param {number} [alpha=1]\r\n * @returns {string} the rgba as string\r\n */var rgba=function rgba(hex){var alpha=arguments.length>1&&arguments[1]!==undefined?arguments[1]:1;var color=hexToRgb(hex);return\"rgba(\".concat(color.r,\", \").concat(color.g,\", \").concat(color.b,\", \").concat(alpha,\")\");};export default rgba;","map":{"version":3,"sources":["C:/Users/TheTOP/Documents/GitHub/pizza-chatbot-chk4/src/components/chatbot/common/rgba.js"],"names":["hexToRgb","hex","shorthandRegex","replace","m","r","g","b","result","exec","parseInt","rgba","alpha","color"],"mappings":"AAAA,GAAMA,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,GAAG,CAAI,CACtB;AACA,GAAMC,CAAAA,cAAc,CAAG,kCAAvB,CACAD,GAAG,CAAGA,GAAG,CAACE,OAAJ,CAAYD,cAAZ,CAA4B,SAACE,CAAD,CAAIC,CAAJ,CAAOC,CAAP,CAAUC,CAAV,QAAgBF,CAAAA,CAAC,CAAGA,CAAJ,CAAQC,CAAR,CAAYA,CAAZ,CAAgBC,CAAhB,CAAoBA,CAApC,EAA5B,CAAN,CAEA,GAAMC,CAAAA,MAAM,CAAG,4CAA4CC,IAA5C,CAAiDR,GAAjD,CAAf,CACA,MAAOO,CAAAA,MAAM,CACT,CACEH,CAAC,CAAEK,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,CAAY,EAAZ,CADb,CAEEF,CAAC,CAAEI,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,CAAY,EAAZ,CAFb,CAGED,CAAC,CAAEG,QAAQ,CAACF,MAAM,CAAC,CAAD,CAAP,CAAY,EAAZ,CAHb,CADS,CAMT,IANJ,CAOD,CAbD,CAeA;AACA;AACA;AACA;AACA;AACA,GACA,GAAMG,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,CAACV,GAAD,CAAoB,IAAdW,CAAAA,KAAc,2DAAN,CAAM,CAC/B,GAAMC,CAAAA,KAAK,CAAGb,QAAQ,CAACC,GAAD,CAAtB,CACA,qBAAeY,KAAK,CAACR,CAArB,cAA2BQ,KAAK,CAACP,CAAjC,cAAuCO,KAAK,CAACN,CAA7C,cAAmDK,KAAnD,MACD,CAHD,CAKA,cAAeD,CAAAA,IAAf","sourcesContent":["const hexToRgb = hex => {\r\n  // http://stackoverflow.com/a/5624139\r\n  const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\r\n  hex = hex.replace(shorthandRegex, (m, r, g, b) => r + r + g + g + b + b);\r\n\r\n  const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n  return result\r\n    ? {\r\n        r: parseInt(result[1], 16),\r\n        g: parseInt(result[2], 16),\r\n        b: parseInt(result[3], 16)\r\n      }\r\n    : null;\r\n};\r\n\r\n/**\r\n * Transform hex+alpha to rgba\r\n * @param {string} hex hex color code\r\n * @param {number} [alpha=1]\r\n * @returns {string} the rgba as string\r\n */\r\nconst rgba = (hex, alpha = 1) => {\r\n  const color = hexToRgb(hex);\r\n  return `rgba(${color.r}, ${color.g}, ${color.b}, ${alpha})`;\r\n};\r\n\r\nexport default rgba;\r\n"]},"metadata":{},"sourceType":"module"}