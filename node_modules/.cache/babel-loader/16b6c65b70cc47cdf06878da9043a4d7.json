{"ast":null,"code":"import _classCallCheck from\"C:\\\\Users\\\\TheTOP\\\\Documents\\\\GitHub\\\\pizza-chatbot-chk4\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";import _createClass from\"C:\\\\Users\\\\TheTOP\\\\Documents\\\\GitHub\\\\pizza-chatbot-chk4\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";import _classPrivateFieldLooseBase from\"C:\\\\Users\\\\TheTOP\\\\Documents\\\\GitHub\\\\pizza-chatbot-chk4\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classPrivateFieldLooseBase\";import _classPrivateFieldLooseKey from\"C:\\\\Users\\\\TheTOP\\\\Documents\\\\GitHub\\\\pizza-chatbot-chk4\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classPrivateFieldLooseKey\";import*as opencage from'opencage-api-client';import{lookup}from'zipcodes';var _geoIsResolved=_classPrivateFieldLooseKey(\"geoIsResolved\");var _userEntLocation=_classPrivateFieldLooseKey(\"userEntLocation\");var _geoZip=_classPrivateFieldLooseKey(\"geoZip\");var _geoLocString=_classPrivateFieldLooseKey(\"geoLocString\");var _userZip=_classPrivateFieldLooseKey(\"userZip\");var _userLocString=_classPrivateFieldLooseKey(\"userLocString\");var _userLocSet=_classPrivateFieldLooseKey(\"userLocSet\");var UserLocation=/*#__PURE__*/function(){function UserLocation(){_classCallCheck(this,UserLocation);Object.defineProperty(this,_geoIsResolved,{writable:true,value:false});Object.defineProperty(this,_userEntLocation,{writable:true,value:''});Object.defineProperty(this,_geoZip,{writable:true,value:''});Object.defineProperty(this,_geoLocString,{writable:true,value:''});Object.defineProperty(this,_userZip,{writable:true,value:''});Object.defineProperty(this,_userLocString,{writable:true,value:''});Object.defineProperty(this,_userLocSet,{writable:true,value:false});}_createClass(UserLocation,[{key:\"zipLookUp\",value:function zipLookUp(value){var l=lookup(value);if(typeof l!==\"undefined\"){var c=l.city;var s=l.state;return c+', '+s;}return'Invalid ZipCode';}},{key:\"initLoc\",value:function initLoc(){var _this=this;/*Factory method commented out for testing*/return this.handleGeoLocation().then(function(data){console.log('Setting geo zip property: '+data);_classPrivateFieldLooseBase(_this,_geoZip)[_geoZip]=data;if(data!==null||data!==''){_classPrivateFieldLooseBase(_this,_geoIsResolved)[_geoIsResolved]=true;var l=lookup(data);var c=l.city;var s=l.state;_classPrivateFieldLooseBase(_this,_geoLocString)[_geoLocString]=c+', '+s;}return _this;});/*geo location hard coded for testing\r\n      const data = '22060';    \r\n      const l = lookup(data);\r\n      const c = l.city;\r\n      const s = l.state;\r\n      this.#geoLocString = c + ', ' + s;\r\n      this.#geoZip = data;\r\n      this.#geoIsResolved = true;\r\n    \r\n    return this;*/}},{key:\"resolveGeoLoc\",value:function resolveGeoLoc(){var _this2=this;var response='';var locOpt={timeout:5000,maximumAge:0};var query='';console.log('Resolving Location...');return new Promise(function(resolve,reject){if(\"geolocation\"in navigator){navigator.geolocation.getCurrentPosition(function(position){console.log('Browser location resolved');var lat=position.coords.latitude;var long=position.coords.longitude;query=lat+', '+long;resolve(query);},function(error){console.log('Error getting location');console.error(\"Error Code = \"+error.code+\" - \"+error.message);response='GeoFail';resolve(response);},locOpt);}},function(){console.log(\"Promise reject\");response='NoGeo';}).then(function(query){var newQ=query+'';console.log('Passing location to API: '+newQ);if(newQ!==''){return _this2.resolveOpenCage(newQ);}else{console.log('Query is empty');response='NoGeo';return response;}});}},{key:\"handleGeoLocation\",value:function handleGeoLocation(){var results='';console.log('Entering location handler');var newGeoLoc=this.resolveGeoLoc();var r=newGeoLoc.then(function(data){if(data==='NoGeo'){results='NoGeo';}else if(data==='GeoFail'){results='';}else{var x2=data.lastIndexOf(\" \");var newRes=data.substring(x2+1);results=newRes;}return results;}).catch(function(err){console.error(err);});return r;}},{key:\"resolveOpenCage\",value:function resolveOpenCage(query){var apiKey='af85575e9f8d4e71a402d1962a1361d1';var addressFormatter=require('@fragaria/address-formatter');var response='';console.log('Querying API');var p=opencage.geocode({q:query,key:apiKey,pretty:'1',no_annotations:'1'}).then(function(geoData){var data=geoData.results;var formatted=addressFormatter.format(data[0].components,{output:'array'});response=formatted[2];return response;});return p.then(function(response){return response;});}},{key:\"geoLoc\",get:function get(){return _classPrivateFieldLooseBase(this,_geoZip)[_geoZip];}},{key:\"geoString\",get:function get(){return _classPrivateFieldLooseBase(this,_geoLocString)[_geoLocString];}},{key:\"userLoc\",get:function get(){if(_classPrivateFieldLooseBase(this,_userLocSet)[_userLocSet]){return _classPrivateFieldLooseBase(this,_userZip)[_userZip];}else if(_classPrivateFieldLooseBase(this,_geoIsResolved)[_geoIsResolved]){return _classPrivateFieldLooseBase(this,_geoZip)[_geoZip];}else{return'';}}},{key:\"userString\",get:function get(){if(_classPrivateFieldLooseBase(this,_userLocSet)[_userLocSet]){return _classPrivateFieldLooseBase(this,_userLocString)[_userLocString];}else if(_classPrivateFieldLooseBase(this,_geoIsResolved)[_geoIsResolved]){return _classPrivateFieldLooseBase(this,_geoLocString)[_geoLocString];}else{return'';}}},{key:\"userEntry\",get:function get(){return _classPrivateFieldLooseBase(this,_userEntLocation)[_userEntLocation];},set:function set(value){var rZ='';var rS='';var lSet=false;var uel=value.trim();rS=this.zipLookUp(uel);if(!isNaN(value)&&value.length===5){/*is a zip code*/rS=this.zipLookUp(uel);if(rS!=='Invalid ZipCode'){lSet=true;rZ=uel;}else{rZ='';rS='';uel='';lSet=false;}}else{/*invalid entry*/rZ='';rS='';uel='';lSet=false;}_classPrivateFieldLooseBase(this,_userEntLocation)[_userEntLocation]=uel;_classPrivateFieldLooseBase(this,_userZip)[_userZip]=rZ;_classPrivateFieldLooseBase(this,_userLocString)[_userLocString]=rS;_classPrivateFieldLooseBase(this,_userLocSet)[_userLocSet]=lSet;}}]);return UserLocation;}();export default UserLocation;","map":{"version":3,"sources":["C:/Users/TheTOP/Documents/GitHub/pizza-chatbot-chk4/src/components/ZipLookUp.jsx"],"names":["opencage","lookup","UserLocation","value","l","c","city","s","state","handleGeoLocation","then","data","console","log","response","locOpt","timeout","maximumAge","query","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","position","lat","coords","latitude","long","longitude","error","code","message","newQ","resolveOpenCage","results","newGeoLoc","resolveGeoLoc","r","x2","lastIndexOf","newRes","substring","catch","err","apiKey","addressFormatter","require","p","geocode","q","key","pretty","no_annotations","geoData","formatted","format","components","output","rZ","rS","lSet","uel","trim","zipLookUp","isNaN","length"],"mappings":"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","sourcesContent":["import * as opencage from 'opencage-api-client';\r\nimport {lookup} from 'zipcodes';\r\n\r\nclass UserLocation {\r\n  #geoIsResolved = false;\r\n  #userEntLocation = '';\r\n  #geoZip = '';\r\n  #geoLocString = '';\r\n  #userZip = '';\r\n  #userLocString = '';\r\n  #userLocSet = false;  \r\n\r\n  get geoLoc() {\r\n    return this.#geoZip;\r\n  }\r\n  get geoString(){\r\n    return this.#geoLocString;\r\n  }\r\n  get userLoc() {\r\n    if(this.#userLocSet){\r\n      return this.#userZip;      \r\n    } else if(this.#geoIsResolved) {\r\n      return this.#geoZip;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n  get userString() {\r\n    if(this.#userLocSet){\r\n      return this.#userLocString;      \r\n    } else if(this.#geoIsResolved) {\r\n      return this.#geoLocString;\r\n    } else {\r\n      return '';\r\n    }\r\n  }\r\n  get userEntry() {\r\n    return this.#userEntLocation;\r\n  }\r\n  set userEntry(value){\r\n    let rZ = '';\r\n    let rS = '';\r\n    let lSet = false;\r\n    let uel = value.trim();\r\n    rS = this.zipLookUp(uel); \r\n    if(!isNaN(value) && value.length === 5){\r\n      /*is a zip code*/\r\n      rS = this.zipLookUp(uel);      \r\n      if(rS!=='Invalid ZipCode'){\r\n        lSet = true;\r\n        rZ = uel;\r\n      } else {\r\n        rZ = '';\r\n        rS = '';\r\n        uel = '';\r\n        lSet = false;\r\n      }\r\n    } else {\r\n      /*invalid entry*/\r\n      rZ = '';\r\n      rS = '';\r\n      uel = '';\r\n      lSet = false;\r\n    }\r\n    this.#userEntLocation = uel;\r\n    this.#userZip = rZ;\r\n    this.#userLocString = rS;\r\n    this.#userLocSet = lSet;\r\n  }\r\n  zipLookUp(value){\r\n    const l = lookup(value);\r\n    if(typeof l !==\"undefined\"){\r\n      const c = l.city;\r\n      const s = l.state;\r\n      return c + ', ' + s;\r\n    }\r\n    return 'Invalid ZipCode';        \r\n  }  \r\n  initLoc() {\r\n    /*Factory method commented out for testing*/\r\n    return (this.handleGeoLocation()\r\n      .then(data => {\r\n        console.log('Setting geo zip property: ' + data)\r\n        this.#geoZip = data;\r\n        if(data!==null||data!==''){\r\n          this.#geoIsResolved = true;\r\n          const l = lookup(data);\r\n          const c = l.city;\r\n          const s = l.state;\r\n          this.#geoLocString = c + ', ' + s;\r\n        }\r\n        return this;\r\n      })\r\n    )\r\n      /*geo location hard coded for testing\r\n      const data = '22060';    \r\n      const l = lookup(data);\r\n      const c = l.city;\r\n      const s = l.state;\r\n      this.#geoLocString = c + ', ' + s;\r\n      this.#geoZip = data;\r\n      this.#geoIsResolved = true;\r\n    \r\n    return this;*/\r\n       \r\n  }  \r\n  resolveGeoLoc(){\r\n    let response = '';  \r\n    let locOpt = {\r\n      timeout: 5000,\r\n      maximumAge: 0\r\n    };\r\n    let query = '';\r\n    console.log('Resolving Location...');\r\n    return (new Promise((resolve, reject) => {\r\n      if(\"geolocation\" in navigator) {\r\n        navigator.geolocation.getCurrentPosition((position) => {\r\n          console.log('Browser location resolved');\r\n          let lat = position.coords.latitude;\r\n          let long = position.coords.longitude;\r\n          query = lat + ', ' + long;\r\n          resolve(query);\r\n        },(error) => {\r\n          console.log('Error getting location');\r\n          console.error(\"Error Code = \" + error.code + \" - \" + error.message);\r\n          response = 'GeoFail';\r\n          resolve(response);  \r\n        },locOpt);\r\n      }\r\n    }, ()=>{\r\n      console.log(\"Promise reject\");\r\n      response = 'NoGeo';    \r\n      }\r\n    ).then(query => {   \r\n      let newQ = query+'';\r\n      console.log('Passing location to API: ' + newQ);\r\n      if(newQ!=='') {\r\n        return this.resolveOpenCage(newQ)       \r\n      } else {\r\n        console.log('Query is empty');\r\n        response = 'NoGeo';\r\n        return response;\r\n      }\r\n    }))        \r\n  }\r\n  handleGeoLocation() {    \r\n    let results = '';\r\n    console.log('Entering location handler');  \r\n    const newGeoLoc = this.resolveGeoLoc();    \r\n    const r = newGeoLoc.then(data => {\r\n      if(data==='NoGeo') {\r\n        results = 'NoGeo';\r\n      } else if(data==='GeoFail') {\r\n        results = '';        \r\n      } else {        \r\n        const x2 = data.lastIndexOf(\" \");       \r\n        const newRes = data.substring(x2+1);\r\n        results = newRes;        \r\n      }      \r\n      return results;}\r\n    )\r\n    .catch(err => {\r\n      console.error(err);    \r\n    });\r\n    return r;\r\n  }\r\n  resolveOpenCage(query) {\r\n    const apiKey = 'af85575e9f8d4e71a402d1962a1361d1';\r\n    const addressFormatter = require('@fragaria/address-formatter');\r\n    let response = '';\r\n    console.log('Querying API');\r\n    const p = opencage.geocode({ q: query, key: apiKey, pretty: '1', no_annotations: '1'})\r\n      .then(geoData => {                              \r\n        const data = geoData.results;          \r\n        const formatted = addressFormatter.format(data[0].components, {output: 'array'});\r\n        response = formatted[2];\r\n        return response;\r\n      })    \r\n  return(p.then(response => {\r\n    return response;}))\r\n  }\r\n}\r\n\r\nexport default UserLocation;\r\n"]},"metadata":{},"sourceType":"module"}