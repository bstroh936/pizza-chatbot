var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

function getCjsExportFromNamespace (n) {
	return n && n['default'] || n;
}

var mustache = createCommonjsModule(function (module, exports) {
// This file has been generated from mustache.mjs
(function (global, factory) {
   module.exports = factory() ;
}(commonjsGlobal, (function () {
  /*!
   * mustache.js - Logic-less {{mustache}} templates with JavaScript
   * http://github.com/janl/mustache.js
   */

  var objectToString = Object.prototype.toString;
  var isArray = Array.isArray || function isArrayPolyfill (object) {
    return objectToString.call(object) === '[object Array]';
  };

  function isFunction (object) {
    return typeof object === 'function';
  }

  /**
   * More correct typeof string handling array
   * which normally returns typeof 'object'
   */
  function typeStr (obj) {
    return isArray(obj) ? 'array' : typeof obj;
  }

  function escapeRegExp (string) {
    return string.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&');
  }

  /**
   * Null safe way of checking whether or not an object,
   * including its prototype, has a given property
   */
  function hasProperty (obj, propName) {
    return obj != null && typeof obj === 'object' && (propName in obj);
  }

  /**
   * Safe way of detecting whether or not the given thing is a primitive and
   * whether it has the given property
   */
  function primitiveHasOwnProperty (primitive, propName) {
    return (
      primitive != null
      && typeof primitive !== 'object'
      && primitive.hasOwnProperty
      && primitive.hasOwnProperty(propName)
    );
  }

  // Workaround for https://issues.apache.org/jira/browse/COUCHDB-577
  // See https://github.com/janl/mustache.js/issues/189
  var regExpTest = RegExp.prototype.test;
  function testRegExp (re, string) {
    return regExpTest.call(re, string);
  }

  var nonSpaceRe = /\S/;
  function isWhitespace (string) {
    return !testRegExp(nonSpaceRe, string);
  }

  var entityMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;',
    '/': '&#x2F;',
    '`': '&#x60;',
    '=': '&#x3D;'
  };

  function escapeHtml (string) {
    return String(string).replace(/[&<>"'`=\/]/g, function fromEntityMap (s) {
      return entityMap[s];
    });
  }

  var whiteRe = /\s*/;
  var spaceRe = /\s+/;
  var equalsRe = /\s*=/;
  var curlyRe = /\s*\}/;
  var tagRe = /#|\^|\/|>|\{|&|=|!/;

  /**
   * Breaks up the given `template` string into a tree of tokens. If the `tags`
   * argument is given here it must be an array with two string values: the
   * opening and closing tags used in the template (e.g. [ "<%", "%>" ]). Of
   * course, the default is to use mustaches (i.e. mustache.tags).
   *
   * A token is an array with at least 4 elements. The first element is the
   * mustache symbol that was used inside the tag, e.g. "#" or "&". If the tag
   * did not contain a symbol (i.e. {{myValue}}) this element is "name". For
   * all text that appears outside a symbol this element is "text".
   *
   * The second element of a token is its "value". For mustache tags this is
   * whatever else was inside the tag besides the opening symbol. For text tokens
   * this is the text itself.
   *
   * The third and fourth elements of the token are the start and end indices,
   * respectively, of the token in the original template.
   *
   * Tokens that are the root node of a subtree contain two more elements: 1) an
   * array of tokens in the subtree and 2) the index in the original template at
   * which the closing tag for that section begins.
   *
   * Tokens for partials also contain two more elements: 1) a string value of
   * indendation prior to that tag and 2) the index of that tag on that line -
   * eg a value of 2 indicates the partial is the third tag on this line.
   */
  function parseTemplate (template, tags) {
    if (!template)
      return [];
    var lineHasNonSpace = false;
    var sections = [];     // Stack to hold section tokens
    var tokens = [];       // Buffer to hold the tokens
    var spaces = [];       // Indices of whitespace tokens on the current line
    var hasTag = false;    // Is there a {{tag}} on the current line?
    var nonSpace = false;  // Is there a non-space char on the current line?
    var indentation = '';  // Tracks indentation for tags that use it
    var tagIndex = 0;      // Stores a count of number of tags encountered on a line

    // Strips all whitespace tokens array for the current line
    // if there was a {{#tag}} on it and otherwise only space.
    function stripSpace () {
      if (hasTag && !nonSpace) {
        while (spaces.length)
          delete tokens[spaces.pop()];
      } else {
        spaces = [];
      }

      hasTag = false;
      nonSpace = false;
    }

    var openingTagRe, closingTagRe, closingCurlyRe;
    function compileTags (tagsToCompile) {
      if (typeof tagsToCompile === 'string')
        tagsToCompile = tagsToCompile.split(spaceRe, 2);

      if (!isArray(tagsToCompile) || tagsToCompile.length !== 2)
        throw new Error('Invalid tags: ' + tagsToCompile);

      openingTagRe = new RegExp(escapeRegExp(tagsToCompile[0]) + '\\s*');
      closingTagRe = new RegExp('\\s*' + escapeRegExp(tagsToCompile[1]));
      closingCurlyRe = new RegExp('\\s*' + escapeRegExp('}' + tagsToCompile[1]));
    }

    compileTags(tags || mustache.tags);

    var scanner = new Scanner(template);

    var start, type, value, chr, token, openSection;
    while (!scanner.eos()) {
      start = scanner.pos;

      // Match any text between tags.
      value = scanner.scanUntil(openingTagRe);

      if (value) {
        for (var i = 0, valueLength = value.length; i < valueLength; ++i) {
          chr = value.charAt(i);

          if (isWhitespace(chr)) {
            spaces.push(tokens.length);
            indentation += chr;
          } else {
            nonSpace = true;
            lineHasNonSpace = true;
            indentation += ' ';
          }

          tokens.push([ 'text', chr, start, start + 1 ]);
          start += 1;

          // Check for whitespace on the current line.
          if (chr === '\n') {
            stripSpace();
            indentation = '';
            tagIndex = 0;
            lineHasNonSpace = false;
          }
        }
      }

      // Match the opening tag.
      if (!scanner.scan(openingTagRe))
        break;

      hasTag = true;

      // Get the tag type.
      type = scanner.scan(tagRe) || 'name';
      scanner.scan(whiteRe);

      // Get the tag value.
      if (type === '=') {
        value = scanner.scanUntil(equalsRe);
        scanner.scan(equalsRe);
        scanner.scanUntil(closingTagRe);
      } else if (type === '{') {
        value = scanner.scanUntil(closingCurlyRe);
        scanner.scan(curlyRe);
        scanner.scanUntil(closingTagRe);
        type = '&';
      } else {
        value = scanner.scanUntil(closingTagRe);
      }

      // Match the closing tag.
      if (!scanner.scan(closingTagRe))
        throw new Error('Unclosed tag at ' + scanner.pos);

      if (type == '>') {
        token = [ type, value, start, scanner.pos, indentation, tagIndex, lineHasNonSpace ];
      } else {
        token = [ type, value, start, scanner.pos ];
      }
      tagIndex++;
      tokens.push(token);

      if (type === '#' || type === '^') {
        sections.push(token);
      } else if (type === '/') {
        // Check section nesting.
        openSection = sections.pop();

        if (!openSection)
          throw new Error('Unopened section "' + value + '" at ' + start);

        if (openSection[1] !== value)
          throw new Error('Unclosed section "' + openSection[1] + '" at ' + start);
      } else if (type === 'name' || type === '{' || type === '&') {
        nonSpace = true;
      } else if (type === '=') {
        // Set the tags for the next time around.
        compileTags(value);
      }
    }

    stripSpace();

    // Make sure there are no open sections when we're done.
    openSection = sections.pop();

    if (openSection)
      throw new Error('Unclosed section "' + openSection[1] + '" at ' + scanner.pos);

    return nestTokens(squashTokens(tokens));
  }

  /**
   * Combines the values of consecutive text tokens in the given `tokens` array
   * to a single token.
   */
  function squashTokens (tokens) {
    var squashedTokens = [];

    var token, lastToken;
    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
      token = tokens[i];

      if (token) {
        if (token[0] === 'text' && lastToken && lastToken[0] === 'text') {
          lastToken[1] += token[1];
          lastToken[3] = token[3];
        } else {
          squashedTokens.push(token);
          lastToken = token;
        }
      }
    }

    return squashedTokens;
  }

  /**
   * Forms the given array of `tokens` into a nested tree structure where
   * tokens that represent a section have two additional items: 1) an array of
   * all tokens that appear in that section and 2) the index in the original
   * template that represents the end of that section.
   */
  function nestTokens (tokens) {
    var nestedTokens = [];
    var collector = nestedTokens;
    var sections = [];

    var token, section;
    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
      token = tokens[i];

      switch (token[0]) {
        case '#':
        case '^':
          collector.push(token);
          sections.push(token);
          collector = token[4] = [];
          break;
        case '/':
          section = sections.pop();
          section[5] = token[2];
          collector = sections.length > 0 ? sections[sections.length - 1][4] : nestedTokens;
          break;
        default:
          collector.push(token);
      }
    }

    return nestedTokens;
  }

  /**
   * A simple string scanner that is used by the template parser to find
   * tokens in template strings.
   */
  function Scanner (string) {
    this.string = string;
    this.tail = string;
    this.pos = 0;
  }

  /**
   * Returns `true` if the tail is empty (end of string).
   */
  Scanner.prototype.eos = function eos () {
    return this.tail === '';
  };

  /**
   * Tries to match the given regular expression at the current position.
   * Returns the matched text if it can match, the empty string otherwise.
   */
  Scanner.prototype.scan = function scan (re) {
    var match = this.tail.match(re);

    if (!match || match.index !== 0)
      return '';

    var string = match[0];

    this.tail = this.tail.substring(string.length);
    this.pos += string.length;

    return string;
  };

  /**
   * Skips all text until the given regular expression can be matched. Returns
   * the skipped string, which is the entire tail if no match can be made.
   */
  Scanner.prototype.scanUntil = function scanUntil (re) {
    var index = this.tail.search(re), match;

    switch (index) {
      case -1:
        match = this.tail;
        this.tail = '';
        break;
      case 0:
        match = '';
        break;
      default:
        match = this.tail.substring(0, index);
        this.tail = this.tail.substring(index);
    }

    this.pos += match.length;

    return match;
  };

  /**
   * Represents a rendering context by wrapping a view object and
   * maintaining a reference to the parent context.
   */
  function Context (view, parentContext) {
    this.view = view;
    this.cache = { '.': this.view };
    this.parent = parentContext;
  }

  /**
   * Creates a new context using the given view with this context
   * as the parent.
   */
  Context.prototype.push = function push (view) {
    return new Context(view, this);
  };

  /**
   * Returns the value of the given name in this context, traversing
   * up the context hierarchy if the value is absent in this context's view.
   */
  Context.prototype.lookup = function lookup (name) {
    var cache = this.cache;

    var value;
    if (cache.hasOwnProperty(name)) {
      value = cache[name];
    } else {
      var context = this, intermediateValue, names, index, lookupHit = false;

      while (context) {
        if (name.indexOf('.') > 0) {
          intermediateValue = context.view;
          names = name.split('.');
          index = 0;

          /**
           * Using the dot notion path in `name`, we descend through the
           * nested objects.
           *
           * To be certain that the lookup has been successful, we have to
           * check if the last object in the path actually has the property
           * we are looking for. We store the result in `lookupHit`.
           *
           * This is specially necessary for when the value has been set to
           * `undefined` and we want to avoid looking up parent contexts.
           *
           * In the case where dot notation is used, we consider the lookup
           * to be successful even if the last "object" in the path is
           * not actually an object but a primitive (e.g., a string, or an
           * integer), because it is sometimes useful to access a property
           * of an autoboxed primitive, such as the length of a string.
           **/
          while (intermediateValue != null && index < names.length) {
            if (index === names.length - 1)
              lookupHit = (
                hasProperty(intermediateValue, names[index])
                || primitiveHasOwnProperty(intermediateValue, names[index])
              );

            intermediateValue = intermediateValue[names[index++]];
          }
        } else {
          intermediateValue = context.view[name];

          /**
           * Only checking against `hasProperty`, which always returns `false` if
           * `context.view` is not an object. Deliberately omitting the check
           * against `primitiveHasOwnProperty` if dot notation is not used.
           *
           * Consider this example:
           * ```
           * Mustache.render("The length of a football field is {{#length}}{{length}}{{/length}}.", {length: "100 yards"})
           * ```
           *
           * If we were to check also against `primitiveHasOwnProperty`, as we do
           * in the dot notation case, then render call would return:
           *
           * "The length of a football field is 9."
           *
           * rather than the expected:
           *
           * "The length of a football field is 100 yards."
           **/
          lookupHit = hasProperty(context.view, name);
        }

        if (lookupHit) {
          value = intermediateValue;
          break;
        }

        context = context.parent;
      }

      cache[name] = value;
    }

    if (isFunction(value))
      value = value.call(this.view);

    return value;
  };

  /**
   * A Writer knows how to take a stream of tokens and render them to a
   * string, given a context. It also maintains a cache of templates to
   * avoid the need to parse the same template twice.
   */
  function Writer () {
    this.templateCache = {
      _cache: {},
      set: function set (key, value) {
        this._cache[key] = value;
      },
      get: function get (key) {
        return this._cache[key];
      },
      clear: function clear () {
        this._cache = {};
      }
    };
  }

  /**
   * Clears all cached templates in this writer.
   */
  Writer.prototype.clearCache = function clearCache () {
    if (typeof this.templateCache !== 'undefined') {
      this.templateCache.clear();
    }
  };

  /**
   * Parses and caches the given `template` according to the given `tags` or
   * `mustache.tags` if `tags` is omitted,  and returns the array of tokens
   * that is generated from the parse.
   */
  Writer.prototype.parse = function parse (template, tags) {
    var cache = this.templateCache;
    var cacheKey = template + ':' + (tags || mustache.tags).join(':');
    var isCacheEnabled = typeof cache !== 'undefined';
    var tokens = isCacheEnabled ? cache.get(cacheKey) : undefined;

    if (tokens == undefined) {
      tokens = parseTemplate(template, tags);
      isCacheEnabled && cache.set(cacheKey, tokens);
    }
    return tokens;
  };

  /**
   * High-level method that is used to render the given `template` with
   * the given `view`.
   *
   * The optional `partials` argument may be an object that contains the
   * names and templates of partials that are used in the template. It may
   * also be a function that is used to load partial templates on the fly
   * that takes a single argument: the name of the partial.
   *
   * If the optional `tags` argument is given here it must be an array with two
   * string values: the opening and closing tags used in the template (e.g.
   * [ "<%", "%>" ]). The default is to mustache.tags.
   */
  Writer.prototype.render = function render (template, view, partials, tags) {
    var tokens = this.parse(template, tags);
    var context = (view instanceof Context) ? view : new Context(view, undefined);
    return this.renderTokens(tokens, context, partials, template, tags);
  };

  /**
   * Low-level method that renders the given array of `tokens` using
   * the given `context` and `partials`.
   *
   * Note: The `originalTemplate` is only ever used to extract the portion
   * of the original template that was contained in a higher-order section.
   * If the template doesn't use higher-order sections, this argument may
   * be omitted.
   */
  Writer.prototype.renderTokens = function renderTokens (tokens, context, partials, originalTemplate, tags) {
    var buffer = '';

    var token, symbol, value;
    for (var i = 0, numTokens = tokens.length; i < numTokens; ++i) {
      value = undefined;
      token = tokens[i];
      symbol = token[0];

      if (symbol === '#') value = this.renderSection(token, context, partials, originalTemplate);
      else if (symbol === '^') value = this.renderInverted(token, context, partials, originalTemplate);
      else if (symbol === '>') value = this.renderPartial(token, context, partials, tags);
      else if (symbol === '&') value = this.unescapedValue(token, context);
      else if (symbol === 'name') value = this.escapedValue(token, context);
      else if (symbol === 'text') value = this.rawValue(token);

      if (value !== undefined)
        buffer += value;
    }

    return buffer;
  };

  Writer.prototype.renderSection = function renderSection (token, context, partials, originalTemplate) {
    var self = this;
    var buffer = '';
    var value = context.lookup(token[1]);

    // This function is used to render an arbitrary template
    // in the current context by higher-order sections.
    function subRender (template) {
      return self.render(template, context, partials);
    }

    if (!value) return;

    if (isArray(value)) {
      for (var j = 0, valueLength = value.length; j < valueLength; ++j) {
        buffer += this.renderTokens(token[4], context.push(value[j]), partials, originalTemplate);
      }
    } else if (typeof value === 'object' || typeof value === 'string' || typeof value === 'number') {
      buffer += this.renderTokens(token[4], context.push(value), partials, originalTemplate);
    } else if (isFunction(value)) {
      if (typeof originalTemplate !== 'string')
        throw new Error('Cannot use higher-order sections without the original template');

      // Extract the portion of the original template that the section contains.
      value = value.call(context.view, originalTemplate.slice(token[3], token[5]), subRender);

      if (value != null)
        buffer += value;
    } else {
      buffer += this.renderTokens(token[4], context, partials, originalTemplate);
    }
    return buffer;
  };

  Writer.prototype.renderInverted = function renderInverted (token, context, partials, originalTemplate) {
    var value = context.lookup(token[1]);

    // Use JavaScript's definition of falsy. Include empty arrays.
    // See https://github.com/janl/mustache.js/issues/186
    if (!value || (isArray(value) && value.length === 0))
      return this.renderTokens(token[4], context, partials, originalTemplate);
  };

  Writer.prototype.indentPartial = function indentPartial (partial, indentation, lineHasNonSpace) {
    var filteredIndentation = indentation.replace(/[^ \t]/g, '');
    var partialByNl = partial.split('\n');
    for (var i = 0; i < partialByNl.length; i++) {
      if (partialByNl[i].length && (i > 0 || !lineHasNonSpace)) {
        partialByNl[i] = filteredIndentation + partialByNl[i];
      }
    }
    return partialByNl.join('\n');
  };

  Writer.prototype.renderPartial = function renderPartial (token, context, partials, tags) {
    if (!partials) return;

    var value = isFunction(partials) ? partials(token[1]) : partials[token[1]];
    if (value != null) {
      var lineHasNonSpace = token[6];
      var tagIndex = token[5];
      var indentation = token[4];
      var indentedValue = value;
      if (tagIndex == 0 && indentation) {
        indentedValue = this.indentPartial(value, indentation, lineHasNonSpace);
      }
      return this.renderTokens(this.parse(indentedValue, tags), context, partials, indentedValue);
    }
  };

  Writer.prototype.unescapedValue = function unescapedValue (token, context) {
    var value = context.lookup(token[1]);
    if (value != null)
      return value;
  };

  Writer.prototype.escapedValue = function escapedValue (token, context) {
    var value = context.lookup(token[1]);
    if (value != null)
      return mustache.escape(value);
  };

  Writer.prototype.rawValue = function rawValue (token) {
    return token[1];
  };

  var mustache = {
    name: 'mustache.js',
    version: '4.0.0',
    tags: [ '{{', '}}' ],
    clearCache: undefined,
    escape: undefined,
    parse: undefined,
    render: undefined,
    Scanner: undefined,
    Context: undefined,
    Writer: undefined,
    /**
     * Allows a user to override the default caching strategy, by providing an
     * object with set, get and clear methods. This can also be used to disable
     * the cache by setting it to the literal `undefined`.
     */
    set templateCache (cache) {
      defaultWriter.templateCache = cache;
    },
    /**
     * Gets the default or overridden caching object from the default writer.
     */
    get templateCache () {
      return defaultWriter.templateCache;
    }
  };

  // All high-level mustache.* functions use this writer.
  var defaultWriter = new Writer();

  /**
   * Clears all cached templates in the default writer.
   */
  mustache.clearCache = function clearCache () {
    return defaultWriter.clearCache();
  };

  /**
   * Parses and caches the given template in the default writer and returns the
   * array of tokens it contains. Doing this ahead of time avoids the need to
   * parse templates on the fly as they are rendered.
   */
  mustache.parse = function parse (template, tags) {
    return defaultWriter.parse(template, tags);
  };

  /**
   * Renders the `template` with the given `view` and `partials` using the
   * default writer. If the optional `tags` argument is given here it must be an
   * array with two string values: the opening and closing tags used in the
   * template (e.g. [ "<%", "%>" ]). The default is to mustache.tags.
   */
  mustache.render = function render (template, view, partials, tags) {
    if (typeof template !== 'string') {
      throw new TypeError('Invalid template! Template should be a "string" ' +
                          'but "' + typeStr(template) + '" was given as the first ' +
                          'argument for mustache#render(template, view, partials)');
    }

    return defaultWriter.render(template, view, partials, tags);
  };

  // Export the escaping function so that the user may override it.
  // See https://github.com/janl/mustache.js/issues/244
  mustache.escape = escapeHtml;

  // Export these mainly for testing, but also for advanced usage.
  mustache.Scanner = Scanner;
  mustache.Context = Context;
  mustache.Writer = Writer;

  return mustache;

})));
});

var generic1 = "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n";
var generic2 = "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{village}}} || {{{city}}} || {{{town}}} || {{{county}}} {{/first}} {{{postcode}}}\n{{#first}} {{{country}}} || {{{state}}} {{/first}}\n";
var generic3 = "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}}\n{{{country}}}\n";
var generic4 = "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} || {{{suburb}}} || {{{county}}} {{/first}}, {{#first}} {{{state_code}}} || {{{state}}} {{/first}} {{{postcode}}}\n{{{country}}}\n";
var generic5 = "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} \n{{#first}} {{{state_district}}} || {{{state}}} {{/first}}\n{{{country}}}\n";
var generic6 = "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} \n{{{county}}} \n{{{country}}}\n";
var generic7 = "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}, {{{postcode}}} \n{{{country}}}\n";
var generic8 = "{{{attention}}}\n{{{house}}}\n{{{road}}}, {{{house_number}}} \n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} {{#first}} {{{county_code}}} || {{{county}}} {{/first}}\n{{{country}}}\n";
var generic9 = "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{state_district}}} {{/first}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}}\n{{{country}}}\n";
var generic10 = "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{suburb}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{{state}}}\n{{{country}}}\n{{{postcode}}}\n";
var generic11 = "{{{country}}}\n{{{state}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{{suburb}}}\n{{{road}}}, {{{house_number}}}\n{{{house}}}\n{{{attention}}}\n";
var generic12 = "{{{attention}}}\n{{{house}}}\n{{{house_number}}}, {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{state_district}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} - {{{postcode}}}\n{{{state}}}\n{{{country}}}\n";
var generic13 = "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} || {{{region}}} {{/first}} {{#first}} {{{state_code}}} || {{{state}}} {{/first}} {{{postcode}}}\n{{{country}}}\n";
var generic14 = "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state_district}}} {{/first}}\n{{{state}}}\n{{{country}}}\n";
var generic15 = "{{{attention}}}\n{{{house}}}\n{{{road}}}, {{{house_number}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} || {{{county}}} {{/first}}\n{{{country}}}\n";
var generic16 = "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n";
var generic17 = "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n";
var generic18 = "{{{attention}}}\n{{{house}}}\n{{{house_number}}}, {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} || {{{state}}} {{/first}} \n{{{country}}}\n";
var generic19 = "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} {{{postcode}}} \n{{{country}}}\n";
var generic20 = "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}} \n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} {{{postcode}}} \n{{{country}}}\n";
var generic21 = "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}} \n{{{country}}}\n";
var generic22 = "{{{attention}}}\n{{{house}}}\n{{{house_number}}}, {{{road}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}}\n{{{country}}}\n";
var fallback1 = "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{#first}} {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}}\n{{{country}}}\n";
var fallback2 = "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{suburb}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{island}}} {{/first}}, {{#first}} {{{state_code}}} || {{{state}}} {{/first}}\n{{{country}}}\n";
var fallback3 = "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{suburb}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{{county}}}\n{{{state}}}\n{{{country}}}\n";
var fallback4 = "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{suburb}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{#first}} {{{state}}} || {{{county}}} {{/first}}\n{{{country}}}\n";
var AD = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var AE = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} \n{{#first}} {{{state_district}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var AF = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var AG = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var AI = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{{postcode}}} {{{country}}}\n"
};
var AL = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} {{/first}}\n{{{country}}}\n",
	postformat_replace: [
		[
			"\n(\\d{4}) ([^,]*)\n",
			"\n$1-$2\n"
		]
	]
};
var AM = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}} \n{{{postcode}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{#first}} {{{state_district}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var AO = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}, {{{postcode}}} \n{{{country}}}\n"
};
var AQ = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{#first}} {{{country}}} || {{{continent}}} {{/first}}\n"
};
var AR = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{state_district}}} {{/first}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
	replace: [
		[
			"^Autonomous City of ",
			""
		]
	],
	postformat_replace: [
		[
			"\n(\\w\\d{4})(\\w{3}) ",
			"\n$1 $2 "
		]
	]
};
var AS = {
	use_country: "US",
	change_country: "United States of America",
	add_component: "state=American Samoa"
};
var AT = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var AU = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} || {{{region}}} {{/first}} {{#first}} {{{state_code}}} || {{{state}}} {{/first}} {{{postcode}}}\n{{{country}}}\n"
};
var AW = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var AX = {
	use_country: "FI",
	change_country: "Åland, Finland"
};
var AZ = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var BA = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var BB = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var BD = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{state_district}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} - {{{postcode}}}\n{{{country}}}\n"
};
var BE = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var BF = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} \n{{{county}}} \n{{{country}}}\n"
};
var BG = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{state_district}}} {{/first}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var BH = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{village}}} || {{{city}}} || {{{town}}} || {{{county}}} {{/first}} {{{postcode}}}\n{{#first}} {{{country}}} || {{{state}}} {{/first}}\n"
};
var BI = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var BJ = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}}, {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var BL = {
	use_country: "FR",
	change_country: "Saint-Barthélemy, France"
};
var BM = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{village}}} || {{{city}}} || {{{town}}} || {{{county}}} {{/first}} {{{postcode}}}\n{{#first}} {{{country}}} || {{{state}}} {{/first}}\n"
};
var BN = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}}, {{{road}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} \n{{#first}} {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} {{{postcode}}} \n{{{country}}}\n"
};
var BO = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n",
	replace: [
		[
			"^Municipio Nuestra Senora de ",
			""
		]
	]
};
var BQ = {
	use_country: "NL",
	change_country: "Caribbean Netherlands"
};
var BR = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} {{/first}} - {{#first}} {{{state_code}}} || {{{state}}} {{/first}}\n{{{postcode}}}\n{{{country}}}\n",
	postformat_replace: [
		[
			"\\b(\\d{5})(\\d{3})\\b",
			"$1-$2"
		]
	]
};
var BS = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} \n{{{county}}} \n{{{country}}}\n"
};
var BT = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}, {{{house}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}} {{{postcode}}} \n{{{country}}}\n"
};
var BV = {
	use_country: "NO",
	change_country: "Bouvet Island, Norway"
};
var BW = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} \n{{{country}}}\n"
};
var BY = {
	address_template: "{{{country}}}\n{{{state}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{{suburb}}}\n{{{road}}}, {{{house_number}}}\n{{{house}}}\n{{{attention}}}\n"
};
var BZ = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var CA = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{#first}} {{{house_number}}} {{{road}}} || {{{suburb}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} {{/first}}, {{#first}} {{{state_code}}} || {{{state}}} {{/first}} {{{postcode}}}\n{{{country}}}\n",
	fallback_template: "{{{attention}}}\n{{{house}}}\n{{#first}} {{{house_number}}} {{{road}}} || {{{suburb}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} {{/first}}, {{#first}} {{{state_code}}} || {{{state}}} {{/first}} {{{postcode}}}\n{{{country}}}\n",
	postformat_replace: [
		[
			" (\\w{2}) (\\w{3})(\\w{3})\n",
			" $1 $2 $3\n"
		]
	]
};
var CC = {
	use_country: "AU",
	change_country: "Australia"
};
var CD = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}}, {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var CF = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var CG = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}}, {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var CH = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var CI = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var CK = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var CL = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
	postformat_replace: [
		[
			"\n(\\d{3})(\\d{4}) ",
			"\n$1 $2 "
		]
	]
};
var CM = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var CN = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}} \n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{county}}}\n{{{postcode}}} {{#first}} {{{state_code}}} || {{{state}}} || {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} {{/first}}         \n{{{country}}}\n"
};
var CN_en = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}} \n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{county}}}\n{{{postcode}}} {{#first}} {{{state_code}}} || {{{state}}} || {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} {{/first}} \n{{{country}}}\n"
};
var CN_zh = {
	address_template: "{{{country}}}\n{{{postcode}}} \n{{#first}} {{{state_code}}} || {{{state}}} {{/first}}\n{{#first}} {{{state_district}}} || {{{county}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{road}}}\n{{{house_number}}} \n{{{house}}}\n{{{attention}}}\n"
};
var CO = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} {{/first}}, {{#first}} {{{state_code}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
	postformat_replace: [
		[
			"Bogota, Bogota",
			"Bogota"
		]
	]
};
var CR = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{state}}}, {{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} {{/first}}, {{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{postcode}}} {{{country}}}\n"
};
var CU = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}, {{{postcode}}} \n{{{country}}}\n"
};
var CV = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
	postformat_replace: [
		[
			"\n(\\d{4}) ([^,]*)\n",
			"\n$1-$2\n"
		]
	]
};
var CW = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var CX = {
	use_country: "AU",
	add_component: "state=Christmas Island",
	change_country: "Australia"
};
var CY = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var CZ = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
	postformat_replace: [
		[
			"\n(\\d{3})(\\d{2}) ",
			"\n$1 $2 "
		]
	]
};
var DE = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
	fallback_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{town}}} || {{{city}}} || {{{village}}} || {{{county}}} {{/first}}\n{{#first}} {{{state}}} || {{{state_district}}} {{/first}}\n{{{country}}}\n",
	replace: [
		[
			"^Stadtteil ",
			""
		],
		[
			"^Stadtbezirk (\\d+)",
			""
		],
		[
			"^Ortsbeirat (\\d+) :",
			""
		],
		[
			"^Gemeinde ",
			""
		],
		[
			"^Gemeindeverwaltungsverband ",
			""
		],
		[
			"^Landkreis ",
			""
		],
		[
			"^Kreis ",
			""
		],
		[
			"^Grenze ",
			""
		],
		[
			"^Free State of ",
			""
		],
		[
			"^Freistaat ",
			""
		],
		[
			"^Regierungsbezirk ",
			""
		],
		[
			"^Gemeindefreies Gebiet ",
			""
		],
		[
			"city=Alt-Berlin",
			"Berlin"
		]
	],
	postformat_replace: [
		[
			"Berlin\nBerlin",
			"Berlin"
		],
		[
			"Bremen\nBremen",
			"Bremen"
		],
		[
			"Hamburg\nHamburg",
			"Hamburg"
		]
	]
};
var DJ = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n",
	replace: [
		[
			"city=Djibouti",
			"Djibouti-Ville"
		]
	]
};
var DK = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var DM = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var DO = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}, {{{state}}} \n{{{postcode}}} \n{{{country}}}\n",
	postformat_replace: [
		[
			", Distrito Nacional",
			", DN"
		]
	]
};
var DZ = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var EC = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} {{/first}}\n{{{country}}}\n"
};
var EG = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} \n{{{postcode}}} \n{{{country}}}\n"
};
var EE = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var EH = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var ER = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var ES = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}}, {{{house_number}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} || {{{county}}} {{/first}}\n{{{country}}}\n",
	fallback_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{suburb}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{#first}} {{{state}}} || {{{county}}} {{/first}}\n{{{country}}}\n"
};
var ET = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var FI = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var FJ = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var FK = {
	use_country: "GB",
	change_country: "Falkland Islands, United Kingdom"
};
var FM = {
	use_country: "US",
	change_country: "United States of America",
	add_component: "state=Micronesia"
};
var FO = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
	postformat_replace: [
		[
			"Territorial waters of Faroe Islands",
			"Faroe Islands"
		]
	]
};
var FR = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
	replace: [
		[
			"Polynésie française, Îles du Vent \\(eaux territoriales\\)",
			"Polynésie française"
		],
		[
			"France, Mayotte \\(eaux territoriales\\)",
			"Mayotte, France"
		],
		[
			"France, La Réunion \\(eaux territoriales\\)",
			"La Réunion, France"
		],
		[
			"Grande Terre et récifs d'Entrecasteaux",
			""
		],
		[
			"France, Nouvelle-Calédonie",
			"Nouvelle-Calédonie, France"
		],
		[
			"\\(eaux territoriales\\)",
			""
		]
	]
};
var GA = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}} \n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} || {{{village}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var GB = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{village}}} || {{{city}}} || {{{town}}} || {{{county}}} {{/first}} {{{postcode}}}\n{{#first}} {{{country}}} || {{{state}}} {{/first}}\n",
	fallback_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{suburb}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{{county}}}\n{{{state}}}\n{{{country}}}\n",
	replace: [
		[
			"^Borough of ",
			""
		],
		[
			"^County( of)? ",
			""
		],
		[
			"^Parish of ",
			""
		],
		[
			"^Central ",
			""
		],
		[
			"^Greater London",
			"London"
		],
		[
			"^London Borough of .+",
			"London"
		],
		[
			"Royal Borough of ",
			""
		],
		[
			"County Borough of ",
			""
		]
	],
	postformat_replace: [
		[
			"London, London",
			"London"
		],
		[
			"London, Greater London",
			"London"
		],
		[
			"City of Westminster",
			"London"
		],
		[
			"City of Nottingham",
			"Nottingham"
		],
		[
			", United Kingdom$",
			"\nUnited Kingdom"
		],
		[
			"London\nEngland\nUnited Kingdom",
			"London\nUnited Kingdom"
		]
	]
};
var GD = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var GE = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var GF = {
	use_country: "FR",
	change_country: "France"
};
var GG = {
	use_country: "GB",
	change_country: "Guernsey, Channel Islands"
};
var GH = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var GI = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var GL = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var GM = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var GN = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state_district}}} {{/first}}\n{{{state}}}\n{{{country}}}\n"
};
var GP = {
	use_country: "FR",
	change_country: "Guadeloupe, France"
};
var GQ = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var GR = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
	postformat_replace: [
		[
			"\n(\\d{3})(\\d{2}) ",
			"\n$1 $2 "
		]
	]
};
var GS = {
	use_country: "GB",
	change_country: "United Kingdom",
	add_component: "county=South Georgia"
};
var GT = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}}-{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
	postformat_replace: [
		[
			"\n(\\d{5})- ",
			"\n$1-"
		],
		[
			"\n -",
			"\n"
		]
	]
};
var GU = {
	use_country: "US",
	change_country: "United States of America",
	add_component: "state=Guam"
};
var GW = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var GY = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var HK = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}} \n{{{state_district}}}\n{{{state}}}\n"
};
var HK_en = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}} \n{{{state_district}}}\n{{{state}}}\n{{{country}}}\n"
};
var HK_zh = {
	address_template: "{{{country}}}\n{{{state}}}\n{{{state_district}}}\n{{{road}}}\n{{{house_number}}}\n{{{house}}}\n{{{attention}}}\n"
};
var HM = {
	use_country: "AU",
	change_country: "Australia",
	add_component: "state=Heard Island and McDonald Islands"
};
var HN = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var HR = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var HT = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
	postformat_replace: [
		[
			" Commune de",
			" "
		]
	]
};
var HU = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} \n{{{road}}} {{{house_number}}} \n{{{postcode}}}\n{{{country}}}\n"
};
var ID = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} {{{postcode}}}\n{{{state}}}\n{{{country}}}\n"
};
var IE = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{{county}}}\n{{{country}}}\n",
	replace: [
		[
			" City$",
			""
		],
		[
			"The Municipal District of ",
			""
		],
		[
			"The Metropolitan District of ",
			""
		]
	]
};
var IL = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var IM = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{village}}} || {{{city}}} || {{{town}}} || {{{county}}} {{/first}} {{{postcode}}}\n{{#first}} {{{country}}} || {{{state}}} {{/first}}\n"
};
var IN = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}}, {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{state_district}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} - {{{postcode}}}\n{{{state}}}\n{{{country}}}\n"
};
var IO = {
	use_country: "GB",
	change_country: "British Indian Ocean Territory, United Kingdom"
};
var IQ = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{#first}} {{{city_district}}} || {{{neighbourhood}}} || {{{suburb}}} {{/first}}\n{{{road}}}         \n{{#first}} {{{city}}} || {{{town}}} || {{{state}}} || {{{village}}} {{/first}}\n{{{postcode}}}\n{{{country}}}\n"
};
var IR = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{road}}}\n{{{house_number}}}\n{{#first}} {{{province}}} || {{{state}}} {{/first}}\n{{{postcode}}}\n{{{country}}}\n"
};
var IR_en = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{road}}}\n{{{house_number}}}\n{{#first}} {{{province}}} || {{{state}}} {{/first}}\n{{{postcode}}}\n{{{country}}}\n"
};
var IR_fa = {
	address_template: "{{{country}}}\n{{#first}} {{{state}}} || {{{province}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{road}}}\n{{{house_number}}}\n{{{house}}}\n{{{attention}}}\n{{{postcode}}}\n"
};
var IS = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var IT = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}}, {{{house_number}}} \n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} {{#first}} {{{county_code}}} || {{{county}}} {{/first}}\n{{{country}}}\n",
	replace: [
		[
			"Città metropolitana di ",
			""
		],
		[
			"Metropolitan City of ",
			""
		]
	],
	postformat_replace: [
		[
			"Vatican City\nVatican City$",
			"\nVatican City"
		],
		[
			"Città del Vaticano\nCittà del Vaticano$",
			"Città del Vaticano\n"
		]
	]
};
var JE = {
	use_country: "GB",
	change_country: "Jersey, Channel Islands"
};
var JM = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}} \n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} {{{postcode}}} \n{{{country}}}\n"
};
var JO = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var JP = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}, {{#first}} {{{state}}} || {{{state_district}}} {{/first}} {{{postcode}}}\n{{{country}}}\n",
	postformat_replace: [
		[
			" (\\d{3})(\\d{4})\n",
			" $1-$2\n"
		]
	]
};
var JP_en = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}, {{#first}} {{{state}}} || {{{state_district}}} {{/first}} {{{postcode}}}\n{{{country}}}\n",
	postformat_replace: [
		[
			" (\\d{3})(\\d{4})\n",
			" $1-$2\n"
		]
	]
};
var JP_ja = {
	address_template: "{{{country}}}\n{{{postcode}}}\n{{#first}} {{{state}}} || {{{state_district}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{road}}}\n{{{house_number}}}\n{{{house}}}\n{{{attention}}}\n",
	postformat_replace: [
		[
			" (\\d{3})(\\d{4})\n",
			" $1-$2\n"
		]
	]
};
var KE = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{state}}} || {{{village}}} {{/first}}\n{{{postcode}}}\n{{{country}}}\n"
};
var KG = {
	address_template: "{{{country}}}\n{{{state}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{{suburb}}}\n{{{road}}}, {{{house_number}}}\n{{{house}}}\n{{{attention}}}\n"
};
var KH = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}} \n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} {{{postcode}}}\n{{{country}}}\n"
};
var KI = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var KM = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{country}}}\n"
};
var KN = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}, {{#first}} {{{state}}} || {{{island}}} {{/first}}\n{{{country}}}\n"
};
var KP = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var KR = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}} \n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}, {{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}, {{#first}} {{{state}}} {{/first}} {{{postcode}}} \n{{{country}}}\n"
};
var KR_en = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}} \n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}, {{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}, {{#first}} {{{state}}} {{/first}} {{{postcode}}} \n{{{country}}}\n"
};
var KR_ko = {
	address_template: "{{{country}}}\n{{#first}} {{{state}}} {{/first}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{road}}}\n{{{house_number}}} \n{{{house}}}\n{{{attention}}}\n{{{postcode}}}\n"
};
var KW = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n\n{{{road}}} \n{{{house_number}}} {{{house}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{{country}}}\n"
};
var KY = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{village}}} || {{{city}}} || {{{town}}} || {{{county}}} {{/first}} {{{postcode}}}\n{{#first}} {{{country}}} || {{{state}}} {{/first}}\n"
};
var KZ = {
	address_template: "{{{country}}}\n{{{state}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{{suburb}}}\n{{{road}}}, {{{house_number}}}\n{{{house}}}\n{{{attention}}}\n"
};
var LA = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}}, {{{road}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var LB = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{village}}} || {{{city}}} || {{{town}}} || {{{county}}} {{/first}} {{{postcode}}}\n{{#first}} {{{country}}} || {{{state}}} {{/first}}\n",
	postformat_replace: [
		[
			" (\\d{4}) (\\d{4})\n",
			" $1 $2\n"
		]
	]
};
var LC = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var LI = {
	use_country: "CH"
};
var LK = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}} \n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} {{{postcode}}} \n{{{country}}}\n"
};
var LR = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var LS = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{village}}} || {{{city}}} || {{{town}}} || {{{county}}} {{/first}} {{{postcode}}}\n{{#first}} {{{country}}} || {{{state}}} {{/first}}\n"
};
var LT = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var LU = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var LV = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}, {{{postcode}}} \n{{{country}}}\n"
};
var LY = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var MA = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var MC = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var MD = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}}, {{{house_number}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var ME = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var MF = {
	use_country: "FR",
	change_country: "France"
};
var MH = {
	use_country: "US",
	add_component: "state=Marshall Islands"
};
var MG = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}} \n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} \n{{{country}}}\n"
};
var MK = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var ML = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var MM = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}}, {{{postcode}}} \n{{{country}}}\n"
};
var MN = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{city_district}}} \n{{#first}} {{{suburb}}} || {{{neighbourhood}}} {{/first}}\n{{{road}}} \n{{{house_number}}} \n{{{postcode}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} \n{{{country}}}\n"
};
var MO = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{village}}} || {{{state_district}}} {{/first}}\n{{{country}}}\n"
};
var MO_pt = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{village}}} || {{{state_district}}} {{/first}}\n{{{country}}}\n"
};
var MO_zh = {
	address_template: "{{{country}}}\n{{#first}} {{{suburb}}} || {{{village}}} || {{{state_district}}} {{/first}}\n{{{road}}}\n{{{house_number}}}    \n{{{house}}}\n{{{attention}}}\n"
};
var MP = {
	use_country: "US",
	change_country: "United States of America",
	add_component: "state=Northern Mariana Islands"
};
var MS = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var MT = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{suburb}}} || {{{village}}} {{/first}} \n{{{postcode}}}\n{{{country}}}\n"
};
var MQ = {
	use_country: "FR",
	change_country: "Martinique, France"
};
var MR = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}}, {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var MU = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}}, {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var MV = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{village}}} || {{{city}}} || {{{town}}} || {{{county}}} {{/first}} {{{postcode}}}\n{{#first}} {{{country}}} || {{{state}}} {{/first}}\n"
};
var MW = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var MX = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} {{/first}}, {{#first}} {{{state_code}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var MY = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{{state}}}\n{{{country}}}\n"
};
var MZ = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}}, {{{house_number}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} || {{{county}}} {{/first}}\n{{{country}}}\n",
	fallback_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{suburb}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{#first}} {{{state}}} || {{{county}}} {{/first}}\n{{{country}}}\n"
};
var NA = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{village}}} || {{{city}}} || {{{town}}} || {{{county}}} {{/first}} {{{postcode}}}\n{{#first}} {{{country}}} || {{{state}}} {{/first}}\n"
};
var NC = {
	use_country: "FR",
	change_country: "Nouvelle-Calédonie, France"
};
var NE = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} \n{{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{{country}}}\n"
};
var NF = {
	use_country: "AU",
	add_component: "state=Norfolk Island",
	change_country: "Australia"
};
var NG = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} {{{postcode}}}\n{{{state}}}\n{{{country}}}\n"
};
var NI = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var NL = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
	postformat_replace: [
		[
			"\n(\\d{4})(\\w{2}) ",
			"\n$1 $2 "
		],
		[
			"\nKoninkrijk der Nederlanden$",
			"\nNederland"
		]
	]
};
var NO = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var NP = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{suburb}}} || {{{neighbourhood}}} || {{{city}}} {{/first}}\n{{#first}} {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} {{{postcode}}} \n{{{country}}}\n"
};
var NR = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var NU = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var NZ = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}} \n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} {{{postcode}}} \n{{{country}}}\n"
};
var OM = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}} \n{{{postcode}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} {{/first}}\n{{{state}}}\n{{{country}}}\n"
};
var PA = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{postcode}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} {{/first}}\n{{{state}}}\n{{{country}}}\n",
	replace: [
		[
			"city=Panama",
			"Panama City"
		],
		[
			"city=Panamá",
			"Ciudad de Panamá"
		]
	]
};
var PE = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} {{{postcode}}} \n{{{country}}}\n"
};
var PF = {
	use_country: "FR",
	change_country: "Polynésie française, France",
	replace: [
		[
			"Polynésie française, Îles du Vent \\(eaux territoriales\\)",
			"Polynésie française"
		]
	]
};
var PG = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} {{{postcode}}} {{{state}}} \n{{{country}}}\n"
};
var PH = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{suburb}}} || {{{state_district}}} {{/first}}\n{{{postcode}}} {{{state}}}\n{{{country}}}\n"
};
var PK = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}} {{{postcode}}} \n{{{country}}}\n"
};
var PL = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
	postformat_replace: [
		[
			"\n(\\d{2})(\\w{3}) ",
			"\n$1-$2 "
		]
	]
};
var PM = {
	use_country: "FR",
	change_country: "Saint-Pierre-et-Miquelon, France"
};
var PN = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{island}}} {{/first}} \n{{{country}}}\n"
};
var PR = {
	use_country: "US",
	change_country: "United States of America",
	add_component: "state=Puerto Rico"
};
var PS = {
	use_country: "IL"
};
var PT = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var PW = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var PY = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var QA = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var RE = {
	use_country: "FR",
	change_country: "La Réunion, France"
};
var RO = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var RS = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var RU = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{suburb}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{{state}}}\n{{{country}}}\n{{{postcode}}}\n"
};
var RW = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var SA = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}, {{#first}} {{{village}}} || {{{city_district}}} || {{{suburb}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} {{/first}} {{{postcode}}}\n{{{country}}}\n"
};
var SB = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var SC = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{island}}} {{/first}} \n{{{island}}}\n{{{country}}}\n"
};
var SD = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var SE = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
	postformat_replace: [
		[
			"\n(\\d{3})(\\d{2}) ",
			"\n$1 $2 "
		]
	]
};
var SG = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{village}}} || {{{city}}} || {{{town}}} || {{{county}}} {{/first}} {{{postcode}}}\n{{#first}} {{{country}}} || {{{state}}} {{/first}}\n"
};
var SH = {
	use_country: "GB",
	change_country: "$state, United Kingdom"
};
var SI = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var SJ = {
	use_country: "NO",
	change_country: "Norway"
};
var SK = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
	replace: [
		[
			"^District of ",
			""
		]
	]
};
var SL = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var SM = {
	use_country: "IT"
};
var SN = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var SO = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var SR = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var SS = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var ST = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var SV = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{{postcode}}} - {{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} \n{{{state}}} \n{{{country}}}\n",
	postformat_replace: [
		[
			"\n- ",
			"\n "
		]
	]
};
var SX = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var SY = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}}, {{{house_number}}}\n{{#first}} {{{village}}} || {{{city_district}}} || {{{neighbourhood}}} || {{{suburb}}} {{/first}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{state}}} {{/first}}\n\n{{{country}}}\n"
};
var SZ = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}}\n{{{postcode}}} \n{{{country}}}\n"
};
var TC = {
	use_country: "GB"
};
var TD = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var TF = {
	use_country: "FR",
	change_country: "Terres australes et antarctiques françaises, France"
};
var TG = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}}, {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var TH = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{village}}}\n{{{road}}} \n{{#first}} {{{neighbourhood}}} || {{{city}}} || {{{town}}} {{/first}}, {{#first}} {{{suburb}}} || {{{city_district}}} || {{{state_district}}} {{/first}}\n{{{state}}} {{{postcode}}} \n{{{country}}}\n"
};
var TJ = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var TK = {
	use_country: "NZ",
	change_country: "Tokelau, New Zealand"
};
var TL = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var TM = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}}, {{{road}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var TN = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var TO = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var TR = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var TT = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{state_district}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} {{/first}}, {{{postcode}}}\n{{{country}}}\n"
};
var TV = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{#first}} {{{county}}} || {{{state_district}}} || {{{state}}} || {{{island}}} {{/first}}\n{{{country}}}\n"
};
var TW = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}} \n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} {{{postcode}}} \n{{{country}}}\n"
};
var TW_en = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}} \n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} {{{postcode}}} \n{{{country}}}\n"
};
var TW_zh = {
	address_template: "{{{country}}}\n{{{postcode}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{{city_district}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{{road}}}\n{{{house_number}}}\n{{{house}}}\n{{{attention}}}\n"
};
var TZ = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state_district}}} {{/first}}\n{{{state}}}\n{{{country}}}\n",
	fallback_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state_district}}} {{/first}}\n{{{state}}}\n{{{country}}}\n",
	postformat_replace: [
		[
			"Dar es Salaam\nDar es Salaam",
			"Dar es Salaam"
		]
	]
};
var UA = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}}, {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{state_district}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}}\n{{{postcode}}} \n{{{country}}}\n"
};
var UG = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var UM = {
	fallback_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{suburb}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{{county}}}\n{{{state}}}\n{{{country}}}\n",
	use_country: "US",
	change_country: "United States of America",
	add_component: "state=US Minor Outlying Islands"
};
var US = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} || {{{suburb}}} || {{{county}}} {{/first}}, {{#first}} {{{state_code}}} || {{{state}}} {{/first}} {{{postcode}}}\n{{{country}}}\n",
	fallback_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{suburb}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{island}}} {{/first}}, {{#first}} {{{state_code}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
	replace: [
		[
			"state=United States Virgin Islands",
			"US Virgin Islands"
		],
		[
			"state=USVI",
			"US Virgin Islands"
		]
	],
	postformat_replace: [
		[
			"\nUS$",
			"\nUnited States of America"
		],
		[
			"\nUSA$",
			"\nUnited States of America"
		],
		[
			"\nUnited States$",
			"\nUnited States of America"
		]
	]
};
var UZ = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}} \n{{#first}} {{{state}}} || {{{state_district}}} {{/first}} \n{{{country}}}\n{{{postcode}}}\n"
};
var UY = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var VA = {
	use_country: "IT"
};
var VC = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var VE = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} {{/first}} {{{postcode}}}, {{#first}} {{{state_code}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var VG = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}, {{{island}}}\n{{{country}}}, {{{postcode}}}\n"
};
var VI = {
	use_country: "US",
	change_country: "United States of America",
	add_component: "state=US Virgin Islands"
};
var VN = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}}, {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}, {{#first}} {{{city}}} || {{{town}}} || {{{state_district}}} || {{{village}}} {{/first}}\n{{{state}}} {{{postcode}}}\n{{{country}}}\n"
};
var VU = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var WF = {
	use_country: "FR",
	change_country: "Wallis-et-Futuna, France"
};
var WS = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}} \n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var YE = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}}, {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var YT = {
	use_country: "FR",
	change_country: "Mayotte, France"
};
var ZA = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{state_district}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}} \n{{{postcode}}}\n{{{country}}}\n"
};
var ZM = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{{postcode}}} {{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
};
var ZW = {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{house_number}}} {{{road}}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} || {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}} \n{{{country}}}\n"
};
var templates = {
	generic1: generic1,
	generic2: generic2,
	generic3: generic3,
	generic4: generic4,
	generic5: generic5,
	generic6: generic6,
	generic7: generic7,
	generic8: generic8,
	generic9: generic9,
	generic10: generic10,
	generic11: generic11,
	generic12: generic12,
	generic13: generic13,
	generic14: generic14,
	generic15: generic15,
	generic16: generic16,
	generic17: generic17,
	generic18: generic18,
	generic19: generic19,
	generic20: generic20,
	generic21: generic21,
	generic22: generic22,
	fallback1: fallback1,
	fallback2: fallback2,
	fallback3: fallback3,
	fallback4: fallback4,
	"default": {
	address_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{{postcode}}} {{#first}} {{{town}}} || {{{city}}} || {{{village}}} || || {{{county}}} || {{{state}}} {{/first}}\n{{{country}}}\n",
	fallback_template: "{{{attention}}}\n{{{house}}}\n{{{road}}} {{{house_number}}}\n{{#first}} {{{suburb}}} || {{{city_district}}} || {{{neighbourhood}}} {{/first}}\n{{#first}} {{{city}}} || {{{town}}} || {{{village}}} {{/first}}\n{{#first}} {{{county}}} || {{{state_district}}} || {{{state}}} {{/first}}\n{{{country}}}\n"
},
	AD: AD,
	AE: AE,
	AF: AF,
	AG: AG,
	AI: AI,
	AL: AL,
	AM: AM,
	AO: AO,
	AQ: AQ,
	AR: AR,
	AS: AS,
	AT: AT,
	AU: AU,
	AW: AW,
	AX: AX,
	AZ: AZ,
	BA: BA,
	BB: BB,
	BD: BD,
	BE: BE,
	BF: BF,
	BG: BG,
	BH: BH,
	BI: BI,
	BJ: BJ,
	BL: BL,
	BM: BM,
	BN: BN,
	BO: BO,
	BQ: BQ,
	BR: BR,
	BS: BS,
	BT: BT,
	BV: BV,
	BW: BW,
	BY: BY,
	BZ: BZ,
	CA: CA,
	CC: CC,
	CD: CD,
	CF: CF,
	CG: CG,
	CH: CH,
	CI: CI,
	CK: CK,
	CL: CL,
	CM: CM,
	CN: CN,
	CN_en: CN_en,
	CN_zh: CN_zh,
	CO: CO,
	CR: CR,
	CU: CU,
	CV: CV,
	CW: CW,
	CX: CX,
	CY: CY,
	CZ: CZ,
	DE: DE,
	DJ: DJ,
	DK: DK,
	DM: DM,
	DO: DO,
	DZ: DZ,
	EC: EC,
	EG: EG,
	EE: EE,
	EH: EH,
	ER: ER,
	ES: ES,
	ET: ET,
	FI: FI,
	FJ: FJ,
	FK: FK,
	FM: FM,
	FO: FO,
	FR: FR,
	GA: GA,
	GB: GB,
	GD: GD,
	GE: GE,
	GF: GF,
	GG: GG,
	GH: GH,
	GI: GI,
	GL: GL,
	GM: GM,
	GN: GN,
	GP: GP,
	GQ: GQ,
	GR: GR,
	GS: GS,
	GT: GT,
	GU: GU,
	GW: GW,
	GY: GY,
	HK: HK,
	HK_en: HK_en,
	HK_zh: HK_zh,
	HM: HM,
	HN: HN,
	HR: HR,
	HT: HT,
	HU: HU,
	ID: ID,
	IE: IE,
	IL: IL,
	IM: IM,
	IN: IN,
	IO: IO,
	IQ: IQ,
	IR: IR,
	IR_en: IR_en,
	IR_fa: IR_fa,
	IS: IS,
	IT: IT,
	JE: JE,
	JM: JM,
	JO: JO,
	JP: JP,
	JP_en: JP_en,
	JP_ja: JP_ja,
	KE: KE,
	KG: KG,
	KH: KH,
	KI: KI,
	KM: KM,
	KN: KN,
	KP: KP,
	KR: KR,
	KR_en: KR_en,
	KR_ko: KR_ko,
	KW: KW,
	KY: KY,
	KZ: KZ,
	LA: LA,
	LB: LB,
	LC: LC,
	LI: LI,
	LK: LK,
	LR: LR,
	LS: LS,
	LT: LT,
	LU: LU,
	LV: LV,
	LY: LY,
	MA: MA,
	MC: MC,
	MD: MD,
	ME: ME,
	MF: MF,
	MH: MH,
	MG: MG,
	MK: MK,
	ML: ML,
	MM: MM,
	MN: MN,
	MO: MO,
	MO_pt: MO_pt,
	MO_zh: MO_zh,
	MP: MP,
	MS: MS,
	MT: MT,
	MQ: MQ,
	MR: MR,
	MU: MU,
	MV: MV,
	MW: MW,
	MX: MX,
	MY: MY,
	MZ: MZ,
	NA: NA,
	NC: NC,
	NE: NE,
	NF: NF,
	NG: NG,
	NI: NI,
	NL: NL,
	NO: NO,
	NP: NP,
	NR: NR,
	NU: NU,
	NZ: NZ,
	OM: OM,
	PA: PA,
	PE: PE,
	PF: PF,
	PG: PG,
	PH: PH,
	PK: PK,
	PL: PL,
	PM: PM,
	PN: PN,
	PR: PR,
	PS: PS,
	PT: PT,
	PW: PW,
	PY: PY,
	QA: QA,
	RE: RE,
	RO: RO,
	RS: RS,
	RU: RU,
	RW: RW,
	SA: SA,
	SB: SB,
	SC: SC,
	SD: SD,
	SE: SE,
	SG: SG,
	SH: SH,
	SI: SI,
	SJ: SJ,
	SK: SK,
	SL: SL,
	SM: SM,
	SN: SN,
	SO: SO,
	SR: SR,
	SS: SS,
	ST: ST,
	SV: SV,
	SX: SX,
	SY: SY,
	SZ: SZ,
	TC: TC,
	TD: TD,
	TF: TF,
	TG: TG,
	TH: TH,
	TJ: TJ,
	TK: TK,
	TL: TL,
	TM: TM,
	TN: TN,
	TO: TO,
	TR: TR,
	TT: TT,
	TV: TV,
	TW: TW,
	TW_en: TW_en,
	TW_zh: TW_zh,
	TZ: TZ,
	UA: UA,
	UG: UG,
	UM: UM,
	US: US,
	UZ: UZ,
	UY: UY,
	VA: VA,
	VC: VC,
	VE: VE,
	VG: VG,
	VI: VI,
	VN: VN,
	VU: VU,
	WF: WF,
	WS: WS,
	YE: YE,
	YT: YT,
	ZA: ZA,
	ZM: ZM,
	ZW: ZW
};

var templates$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	generic1: generic1,
	generic2: generic2,
	generic3: generic3,
	generic4: generic4,
	generic5: generic5,
	generic6: generic6,
	generic7: generic7,
	generic8: generic8,
	generic9: generic9,
	generic10: generic10,
	generic11: generic11,
	generic12: generic12,
	generic13: generic13,
	generic14: generic14,
	generic15: generic15,
	generic16: generic16,
	generic17: generic17,
	generic18: generic18,
	generic19: generic19,
	generic20: generic20,
	generic21: generic21,
	generic22: generic22,
	fallback1: fallback1,
	fallback2: fallback2,
	fallback3: fallback3,
	fallback4: fallback4,
	AD: AD,
	AE: AE,
	AF: AF,
	AG: AG,
	AI: AI,
	AL: AL,
	AM: AM,
	AO: AO,
	AQ: AQ,
	AR: AR,
	AS: AS,
	AT: AT,
	AU: AU,
	AW: AW,
	AX: AX,
	AZ: AZ,
	BA: BA,
	BB: BB,
	BD: BD,
	BE: BE,
	BF: BF,
	BG: BG,
	BH: BH,
	BI: BI,
	BJ: BJ,
	BL: BL,
	BM: BM,
	BN: BN,
	BO: BO,
	BQ: BQ,
	BR: BR,
	BS: BS,
	BT: BT,
	BV: BV,
	BW: BW,
	BY: BY,
	BZ: BZ,
	CA: CA,
	CC: CC,
	CD: CD,
	CF: CF,
	CG: CG,
	CH: CH,
	CI: CI,
	CK: CK,
	CL: CL,
	CM: CM,
	CN: CN,
	CN_en: CN_en,
	CN_zh: CN_zh,
	CO: CO,
	CR: CR,
	CU: CU,
	CV: CV,
	CW: CW,
	CX: CX,
	CY: CY,
	CZ: CZ,
	DE: DE,
	DJ: DJ,
	DK: DK,
	DM: DM,
	DO: DO,
	DZ: DZ,
	EC: EC,
	EG: EG,
	EE: EE,
	EH: EH,
	ER: ER,
	ES: ES,
	ET: ET,
	FI: FI,
	FJ: FJ,
	FK: FK,
	FM: FM,
	FO: FO,
	FR: FR,
	GA: GA,
	GB: GB,
	GD: GD,
	GE: GE,
	GF: GF,
	GG: GG,
	GH: GH,
	GI: GI,
	GL: GL,
	GM: GM,
	GN: GN,
	GP: GP,
	GQ: GQ,
	GR: GR,
	GS: GS,
	GT: GT,
	GU: GU,
	GW: GW,
	GY: GY,
	HK: HK,
	HK_en: HK_en,
	HK_zh: HK_zh,
	HM: HM,
	HN: HN,
	HR: HR,
	HT: HT,
	HU: HU,
	ID: ID,
	IE: IE,
	IL: IL,
	IM: IM,
	IN: IN,
	IO: IO,
	IQ: IQ,
	IR: IR,
	IR_en: IR_en,
	IR_fa: IR_fa,
	IS: IS,
	IT: IT,
	JE: JE,
	JM: JM,
	JO: JO,
	JP: JP,
	JP_en: JP_en,
	JP_ja: JP_ja,
	KE: KE,
	KG: KG,
	KH: KH,
	KI: KI,
	KM: KM,
	KN: KN,
	KP: KP,
	KR: KR,
	KR_en: KR_en,
	KR_ko: KR_ko,
	KW: KW,
	KY: KY,
	KZ: KZ,
	LA: LA,
	LB: LB,
	LC: LC,
	LI: LI,
	LK: LK,
	LR: LR,
	LS: LS,
	LT: LT,
	LU: LU,
	LV: LV,
	LY: LY,
	MA: MA,
	MC: MC,
	MD: MD,
	ME: ME,
	MF: MF,
	MH: MH,
	MG: MG,
	MK: MK,
	ML: ML,
	MM: MM,
	MN: MN,
	MO: MO,
	MO_pt: MO_pt,
	MO_zh: MO_zh,
	MP: MP,
	MS: MS,
	MT: MT,
	MQ: MQ,
	MR: MR,
	MU: MU,
	MV: MV,
	MW: MW,
	MX: MX,
	MY: MY,
	MZ: MZ,
	NA: NA,
	NC: NC,
	NE: NE,
	NF: NF,
	NG: NG,
	NI: NI,
	NL: NL,
	NO: NO,
	NP: NP,
	NR: NR,
	NU: NU,
	NZ: NZ,
	OM: OM,
	PA: PA,
	PE: PE,
	PF: PF,
	PG: PG,
	PH: PH,
	PK: PK,
	PL: PL,
	PM: PM,
	PN: PN,
	PR: PR,
	PS: PS,
	PT: PT,
	PW: PW,
	PY: PY,
	QA: QA,
	RE: RE,
	RO: RO,
	RS: RS,
	RU: RU,
	RW: RW,
	SA: SA,
	SB: SB,
	SC: SC,
	SD: SD,
	SE: SE,
	SG: SG,
	SH: SH,
	SI: SI,
	SJ: SJ,
	SK: SK,
	SL: SL,
	SM: SM,
	SN: SN,
	SO: SO,
	SR: SR,
	SS: SS,
	ST: ST,
	SV: SV,
	SX: SX,
	SY: SY,
	SZ: SZ,
	TC: TC,
	TD: TD,
	TF: TF,
	TG: TG,
	TH: TH,
	TJ: TJ,
	TK: TK,
	TL: TL,
	TM: TM,
	TN: TN,
	TO: TO,
	TR: TR,
	TT: TT,
	TV: TV,
	TW: TW,
	TW_en: TW_en,
	TW_zh: TW_zh,
	TZ: TZ,
	UA: UA,
	UG: UG,
	UM: UM,
	US: US,
	UZ: UZ,
	UY: UY,
	VA: VA,
	VC: VC,
	VE: VE,
	VG: VG,
	VI: VI,
	VN: VN,
	VU: VU,
	WF: WF,
	WS: WS,
	YE: YE,
	YT: YT,
	ZA: ZA,
	ZM: ZM,
	ZW: ZW,
	'default': templates
});

var aliases = [
	{
		alias: "street_number",
		name: "house_number"
	},
	{
		alias: "house_number",
		name: "house_number"
	},
	{
		alias: "building",
		name: "house"
	},
	{
		alias: "public_building",
		name: "house"
	},
	{
		alias: "house",
		name: "house"
	},
	{
		alias: "footway",
		name: "road"
	},
	{
		alias: "street",
		name: "road"
	},
	{
		alias: "street_name",
		name: "road"
	},
	{
		alias: "residential",
		name: "road"
	},
	{
		alias: "path",
		name: "road"
	},
	{
		alias: "pedestrian",
		name: "road"
	},
	{
		alias: "road_reference",
		name: "road"
	},
	{
		alias: "road_reference_intl",
		name: "road"
	},
	{
		alias: "square",
		name: "road"
	},
	{
		alias: "place",
		name: "road"
	},
	{
		alias: "road",
		name: "road"
	},
	{
		alias: "hamlet",
		name: "village"
	},
	{
		alias: "locality",
		name: "village"
	},
	{
		alias: "croft",
		name: "village"
	},
	{
		alias: "village",
		name: "village"
	},
	{
		alias: "suburb",
		name: "neighbourhood"
	},
	{
		alias: "city_district",
		name: "neighbourhood"
	},
	{
		alias: "district",
		name: "neighbourhood"
	},
	{
		alias: "quarter",
		name: "neighbourhood"
	},
	{
		alias: "residential",
		name: "neighbourhood"
	},
	{
		alias: "commercial",
		name: "neighbourhood"
	},
	{
		alias: "industrial",
		name: "neighbourhood"
	},
	{
		alias: "houses",
		name: "neighbourhood"
	},
	{
		alias: "subdivision",
		name: "neighbourhood"
	},
	{
		alias: "neighbourhood",
		name: "neighbourhood"
	},
	{
		alias: "town",
		name: "city"
	},
	{
		alias: "municipality",
		name: "city"
	},
	{
		alias: "city",
		name: "city"
	},
	{
		alias: "local_administrative_area",
		name: "county"
	},
	{
		alias: "county_code",
		name: "county"
	},
	{
		alias: "county",
		name: "county"
	},
	{
		alias: "state_district",
		name: "state_district"
	},
	{
		alias: "postcode",
		name: "postcode"
	},
	{
		alias: "province",
		name: "state"
	},
	{
		alias: "state_code",
		name: "state"
	},
	{
		alias: "state",
		name: "state"
	},
	{
		alias: "region",
		name: "region"
	},
	{
		alias: "island",
		name: "island"
	},
	{
		alias: "country_name",
		name: "country"
	},
	{
		alias: "country",
		name: "country"
	},
	{
		alias: "country_code",
		name: "country_code"
	},
	{
		alias: "continent",
		name: "continent"
	}
];

var aliases$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	'default': aliases
});

var AM$1 = [
	{
		name: "Aragac̣otn",
		key: "AG"
	},
	{
		name: "Ararat",
		key: "AR"
	},
	{
		name: "Armavir",
		key: "AV"
	},
	{
		name: "Erevan",
		key: "ER"
	},
	{
		name: "Geġark'unik'",
		key: "GR"
	},
	{
		name: "Kotayk'",
		key: "KT"
	},
	{
		name: "Loṙi",
		key: "LO"
	},
	{
		name: "Širak",
		key: "SH"
	},
	{
		name: "Syunik'",
		key: "SU"
	},
	{
		name: "Tavuš",
		key: "TV"
	},
	{
		name: "Vayoć Jor",
		key: "VD"
	}
];
var AO$1 = [
	{
		name: "Bengo",
		key: "BGO"
	},
	{
		name: "Benguela",
		key: "BGU"
	},
	{
		name: "Bié",
		key: "BIE"
	},
	{
		name: "Cabinda",
		key: "CAB"
	},
	{
		name: "Kuando Kubango",
		key: "CCU"
	},
	{
		name: "Cunene",
		key: "CNN"
	},
	{
		name: "Kwanza Norte",
		key: "CNO"
	},
	{
		name: "Kwanza Sul",
		key: "CUS"
	},
	{
		name: "Huambo",
		key: "HUA"
	},
	{
		name: "Huíla",
		key: "HUI"
	},
	{
		name: "Lunda Norte",
		key: "LNO"
	},
	{
		name: "Lunda Sul",
		key: "LSU"
	},
	{
		name: "Luanda",
		key: "LUA"
	},
	{
		name: "Malange",
		key: "MAL"
	},
	{
		name: "Moxico",
		key: "MOX"
	},
	{
		name: "Namibe",
		key: "NAM"
	},
	{
		name: "Uíge",
		key: "UIG"
	},
	{
		name: "Zaire",
		key: "ZAI"
	}
];
var AR$1 = [
	{
		name: "Salta",
		key: "A"
	},
	{
		name: "Buenos Aires",
		key: "B"
	},
	{
		name: "Ciudad Autónoma de Buenos Aires",
		key: "C"
	},
	{
		name: "San Luis",
		key: "D"
	},
	{
		name: "Entre Ríos",
		key: "E"
	},
	{
		name: "La Rioja",
		key: "F"
	},
	{
		name: "Santiago del Estero",
		key: "G"
	},
	{
		name: "Chaco",
		key: "H"
	},
	{
		name: "San Juan",
		key: "J"
	},
	{
		name: "Catamarca",
		key: "K"
	},
	{
		name: "La Pampa",
		key: "L"
	},
	{
		name: "Mendoza",
		key: "M"
	},
	{
		name: "Misiones",
		key: "N"
	},
	{
		name: "Formosa",
		key: "P"
	},
	{
		name: "Neuquén",
		key: "Q"
	},
	{
		name: "Río Negro",
		key: "R"
	},
	{
		name: "Santa Fe",
		key: "S"
	},
	{
		name: "Tucumán",
		key: "T"
	},
	{
		name: "Chubut",
		key: "U"
	},
	{
		name: "Tierra del Fuego",
		key: "V"
	},
	{
		name: "Corrientes",
		key: "W"
	},
	{
		name: "Córdoba",
		key: "X"
	},
	{
		name: "Jujuy",
		key: "Y"
	},
	{
		name: "Santa Cruz",
		key: "Z"
	}
];
var AU$1 = [
	{
		name: "Australian Antarctic Territory",
		key: "AAT"
	},
	{
		name: "Australian Capital Territory",
		key: "ACT"
	},
	{
		name: "Heard Island and McDonald Islands",
		key: "HIMI"
	},
	{
		name: "Jervis Bay Territory",
		key: "JBT"
	},
	{
		name: "New South Wales",
		key: "NSW"
	},
	{
		name: "Northern Territory",
		key: "NT"
	},
	{
		name: "Queensland",
		key: "QLD"
	},
	{
		name: "South Australia",
		key: "SA"
	},
	{
		name: "Tasmania",
		key: "TAS"
	},
	{
		name: "Victoria",
		key: "VIC"
	},
	{
		name: "Western Australia",
		key: "WA"
	}
];
var AZ$1 = [
	{
		name: "Abşeron",
		key: "ABS"
	},
	{
		name: "Ağstafa",
		key: "AGA"
	},
	{
		name: "Ağcabədi",
		key: "AGC"
	},
	{
		name: "Ağdam",
		key: "AGM"
	},
	{
		name: "Ağdaş",
		key: "AGS"
	},
	{
		name: "Ağsu",
		key: "AGU"
	},
	{
		name: "Astara",
		key: "AST"
	},
	{
		name: "Bakı",
		key: "BA"
	},
	{
		name: "Babək",
		key: "BAB"
	},
	{
		name: "Balakən",
		key: "BAL"
	},
	{
		name: "Bərdə",
		key: "BAR"
	},
	{
		name: "Beyləqan",
		key: "BEY"
	},
	{
		name: "Biləsuvar",
		key: "BIL"
	},
	{
		name: "Cəbrayıl",
		key: "CAB"
	},
	{
		name: "Cəlilabad",
		key: "CAL"
	},
	{
		name: "Culfa",
		key: "CUL"
	},
	{
		name: "Daşkəsən",
		key: "DAS"
	},
	{
		name: "Füzuli",
		key: "FUZ"
	},
	{
		name: "Gəncə",
		key: "GA"
	},
	{
		name: "Gədəbəy",
		key: "GAD"
	},
	{
		name: "Goranboy",
		key: "GOR"
	},
	{
		name: "Göyçay",
		key: "GOY"
	},
	{
		name: "Göygöl",
		key: "GYG"
	},
	{
		name: "Hacıqabul",
		key: "HAC"
	},
	{
		name: "İmişli",
		key: "IMI"
	},
	{
		name: "İsmayıllı",
		key: "ISM"
	},
	{
		name: "Kəlbəcər",
		key: "KAL"
	},
	{
		name: "Kǝngǝrli",
		key: "KAN"
	},
	{
		name: "Kürdəmir",
		key: "KUR"
	},
	{
		name: "Lənkəran",
		key: "LA"
	},
	{
		name: "Laçın",
		key: "LAC"
	},
	{
		name: "Lənkəran",
		key: "LAN"
	},
	{
		name: "Lerik",
		key: "LER"
	},
	{
		name: "Masallı",
		key: "MAS"
	},
	{
		name: "Mingəçevir",
		key: "MI"
	},
	{
		name: "Naftalan",
		key: "NA"
	},
	{
		name: "Neftçala",
		key: "NEF"
	},
	{
		name: "Naxçıvan",
		key: "NV"
	},
	{
		name: "Naxçıvan",
		key: "NX"
	},
	{
		name: "Oğuz",
		key: "OGU"
	},
	{
		name: "Ordubad",
		key: "ORD"
	},
	{
		name: "Qəbələ",
		key: "QAB"
	},
	{
		name: "Qax",
		key: "QAX"
	},
	{
		name: "Qazax",
		key: "QAZ"
	},
	{
		name: "Quba",
		key: "QBA"
	},
	{
		name: "Qubadlı",
		key: "QBI"
	},
	{
		name: "Qobustan",
		key: "QOB"
	},
	{
		name: "Qusar",
		key: "QUS"
	},
	{
		name: "Şəki",
		key: "SA"
	},
	{
		name: "Sabirabad",
		key: "SAB"
	},
	{
		name: "Sədərək",
		key: "SAD"
	},
	{
		name: "Şahbuz",
		key: "SAH"
	},
	{
		name: "Şəki",
		key: "SAK"
	},
	{
		name: "Salyan",
		key: "SAL"
	},
	{
		name: "Şərur",
		key: "SAR"
	},
	{
		name: "Saatlı",
		key: "SAT"
	},
	{
		name: "Şabran",
		key: "SBN"
	},
	{
		name: "Siyəzən",
		key: "SIY"
	},
	{
		name: "Şəmkir",
		key: "SKR"
	},
	{
		name: "Sumqayıt",
		key: "SM"
	},
	{
		name: "Şamaxı",
		key: "SMI"
	},
	{
		name: "Samux",
		key: "SMX"
	},
	{
		name: "Şirvan",
		key: "SR"
	},
	{
		name: "Şuşa",
		key: "SUS"
	},
	{
		name: "Tərtər",
		key: "TAR"
	},
	{
		name: "Tovuz",
		key: "TOV"
	},
	{
		name: "Ucar",
		key: "UCA"
	},
	{
		name: "Xankəndi",
		key: "XA"
	},
	{
		name: "Xaçmaz",
		key: "XAC"
	},
	{
		name: "Xocalı",
		key: "XCI"
	},
	{
		name: "Xızı",
		key: "XIZ"
	},
	{
		name: "Xocavənd",
		key: "XVD"
	},
	{
		name: "Yardımlı",
		key: "YAR"
	},
	{
		name: "Yevlax",
		key: "YE"
	},
	{
		name: "Yevlax",
		key: "YEV"
	},
	{
		name: "Zəngilan",
		key: "ZAN"
	},
	{
		name: "Zaqatala",
		key: "ZAQ"
	},
	{
		name: "Zərdab",
		key: "ZAR"
	}
];
var BA$1 = [
	{
		name: "Federacija Bosne i Hercegovine",
		key: "BIH"
	},
	{
		name: "Brčko distrikt",
		key: "BRC"
	},
	{
		name: "Republika Srpska",
		key: "SRP"
	}
];
var BE$1 = [
	{
		name: "Bruxelles-Capitale",
		key: "BRU"
	},
	{
		name: "Antwerpen",
		key: "VAN"
	},
	{
		name: "Vlaams Brabant",
		key: "VBR"
	},
	{
		name: "Limburg",
		key: "VLI"
	},
	{
		name: "Oost-Vlaanderen",
		key: "VOV"
	},
	{
		name: "West-Vlaanderen",
		key: "VWV"
	},
	{
		name: "Brabant wallon",
		key: "WBR"
	},
	{
		name: "Hainaut",
		key: "WHT"
	},
	{
		name: "Liège",
		key: "WLG"
	},
	{
		name: "Luxembourg",
		key: "WLX"
	},
	{
		name: "Namur",
		key: "WNA"
	}
];
var BF$1 = [
	{
		name: "Balé",
		key: "BAL"
	},
	{
		name: "Bam",
		key: "BAM"
	},
	{
		name: "Banwa",
		key: "BAN"
	},
	{
		name: "Bazèga ga",
		key: "BAZ"
	},
	{
		name: "Bougouriba",
		key: "BGR"
	},
	{
		name: "Boulgou",
		key: "BLG"
	},
	{
		name: "Boulkiemdé",
		key: "BLK"
	},
	{
		name: "Comoé",
		key: "COM"
	},
	{
		name: "Ganzourgou",
		key: "GAN"
	},
	{
		name: "Gnagna",
		key: "GNA"
	},
	{
		name: "Gourma",
		key: "GOU"
	},
	{
		name: "Houet",
		key: "HOU"
	},
	{
		name: "Ioba",
		key: "IOB"
	},
	{
		name: "Kadiogo",
		key: "KAD"
	},
	{
		name: "Kénédougou",
		key: "KEN"
	},
	{
		name: "Komondjari",
		key: "KMD"
	},
	{
		name: "Kompienga",
		key: "KMP"
	},
	{
		name: "Koulpélogo",
		key: "KOP"
	},
	{
		name: "Kossi",
		key: "KOS"
	},
	{
		name: "Kouritenga",
		key: "KOT"
	},
	{
		name: "Kourwéogo",
		key: "KOW"
	},
	{
		name: "Léraba",
		key: "LER"
	},
	{
		name: "Loroum",
		key: "LOR"
	},
	{
		name: "Mouhoun",
		key: "MOU"
	},
	{
		name: "Namentenga",
		key: "NAM"
	},
	{
		name: "Nahouri",
		key: "NAO"
	},
	{
		name: "Nayala",
		key: "NAY"
	},
	{
		name: "Noumbiel",
		key: "NOU"
	},
	{
		name: "Oubritenga",
		key: "OUB"
	},
	{
		name: "Oudalan",
		key: "OUD"
	},
	{
		name: "Passoré",
		key: "PAS"
	},
	{
		name: "Poni",
		key: "PON"
	},
	{
		name: "Séno",
		key: "SEN"
	},
	{
		name: "Sissili",
		key: "SIS"
	},
	{
		name: "Sanmatenga",
		key: "SMT"
	},
	{
		name: "Sanguié",
		key: "SNG"
	},
	{
		name: "Soum",
		key: "SOM"
	},
	{
		name: "Sourou",
		key: "SOR"
	},
	{
		name: "Tapoa",
		key: "TAP"
	},
	{
		name: "Tuy",
		key: "TUI"
	},
	{
		name: "Yagha",
		key: "YAG"
	},
	{
		name: "Yatenga",
		key: "YAT"
	},
	{
		name: "Ziro",
		key: "ZIR"
	},
	{
		name: "Zondoma",
		key: "ZON"
	},
	{
		name: "Zoundwéogo",
		key: "ZOU"
	}
];
var BI$1 = [
	{
		name: "Bubanza",
		key: "BB"
	},
	{
		name: "Bujumbura Rural",
		key: "BL"
	},
	{
		name: "Bujumbura Mairie",
		key: "BM"
	},
	{
		name: "Bururi",
		key: "BR"
	},
	{
		name: "Cankuzo",
		key: "CA"
	},
	{
		name: "Cibitoke",
		key: "CI"
	},
	{
		name: "Gitega",
		key: "GI"
	},
	{
		name: "Kirundo",
		key: "KI"
	},
	{
		name: "Karuzi",
		key: "KR"
	},
	{
		name: "Kayanza",
		key: "KY"
	},
	{
		name: "Makamba",
		key: "MA"
	},
	{
		name: "Muramvya",
		key: "MU"
	},
	{
		name: "Mwaro",
		key: "MW"
	},
	{
		name: "Muyinga",
		key: "MY"
	},
	{
		name: "Ngozi",
		key: "NG"
	},
	{
		name: "Rumonge",
		key: "RM"
	},
	{
		name: "Rutana",
		key: "RT"
	},
	{
		name: "Ruyigi",
		key: "RY"
	}
];
var BJ$1 = [
	{
		name: "Atacora",
		key: "AK"
	},
	{
		name: "Alibori",
		key: "AL"
	},
	{
		name: "Atlantique",
		key: "AQ"
	},
	{
		name: "Borgou",
		key: "BO"
	},
	{
		name: "Collines",
		key: "CO"
	},
	{
		name: "Donga",
		key: "DO"
	},
	{
		name: "Couffo",
		key: "KO"
	},
	{
		name: "Littoral",
		key: "LI"
	},
	{
		name: "Mono",
		key: "MO"
	},
	{
		name: "Ouémé",
		key: "OU"
	},
	{
		name: "Plateau",
		key: "PL"
	},
	{
		name: "Zou",
		key: "ZO"
	}
];
var BN$1 = [
	{
		name: "Belait",
		key: "BE"
	},
	{
		name: "Brunei-Muara",
		key: "BM"
	},
	{
		name: "Temburong",
		key: "TE"
	},
	{
		name: "Tutong",
		key: "TU"
	}
];
var BO$1 = [
	{
		name: "El Beni",
		key: "B"
	},
	{
		name: "Cochabamba",
		key: "C"
	},
	{
		name: "Chuquisaca",
		key: "H"
	},
	{
		name: "La Paz",
		key: "L"
	},
	{
		name: "Pando",
		key: "N"
	},
	{
		name: "Oruro",
		key: "O"
	},
	{
		name: "Potosí",
		key: "P"
	},
	{
		name: "Santa Cruz",
		key: "S"
	},
	{
		name: "Tarija",
		key: "T"
	}
];
var BR$1 = [
	{
		name: "Acre",
		key: "AC"
	},
	{
		name: "Alagoas",
		key: "AL"
	},
	{
		name: "Amapá",
		key: "AP"
	},
	{
		name: "Amazonas",
		key: "AM"
	},
	{
		name: "Bahia",
		key: "BA"
	},
	{
		name: "Ceará",
		key: "CE"
	},
	{
		name: "Distrito Federal",
		key: "DF"
	},
	{
		name: "Espírito Santo",
		key: "ES"
	},
	{
		name: "Goiás",
		key: "GO"
	},
	{
		name: "Maranhão",
		key: "MA"
	},
	{
		name: "Mato Grosso",
		key: "MT"
	},
	{
		name: "Mato Grosso do Sul",
		key: "MS"
	},
	{
		name: "Minas Gerais",
		key: "MG"
	},
	{
		name: "Pará",
		key: "PA"
	},
	{
		name: "Paraíba",
		key: "PB"
	},
	{
		name: "Paraná",
		key: "PR"
	},
	{
		name: "Pernambuco",
		key: "PE"
	},
	{
		name: "Piauí",
		key: "PI"
	},
	{
		name: "Rio de Janeiro",
		key: "RJ"
	},
	{
		name: "Rio Grande do Norte",
		key: "RN"
	},
	{
		name: "Rio Grande do Sul",
		key: "RS"
	},
	{
		name: "Rondônia",
		key: "RO"
	},
	{
		name: "Roraima",
		key: "RR"
	},
	{
		name: "Santa Catarina",
		key: "SC"
	},
	{
		name: "São Paulo",
		key: "SP"
	},
	{
		name: "Sergipe",
		key: "SE"
	},
	{
		name: "Tocantins",
		key: "TO"
	}
];
var BW$1 = [
	{
		name: "Central",
		key: "CE"
	},
	{
		name: "Chobe",
		key: "CH"
	},
	{
		name: "Francistown",
		key: "FR"
	},
	{
		name: "Gaborone",
		key: "GA"
	},
	{
		name: "Ghanzi",
		key: "GH"
	},
	{
		name: "Jwaneng",
		key: "JW"
	},
	{
		name: "Kgalagadi",
		key: "KG"
	},
	{
		name: "Kgatleng",
		key: "KL"
	},
	{
		name: "Kweneng",
		key: "KW"
	},
	{
		name: "Lobatse",
		key: "LO"
	},
	{
		name: "North East",
		key: "NE"
	},
	{
		name: "North West",
		key: "NW"
	},
	{
		name: "South East",
		key: "SE"
	},
	{
		name: "Southern",
		key: "SO"
	},
	{
		name: "Selibe Phikwe",
		key: "SP"
	},
	{
		name: "Sowa Town",
		key: "ST"
	}
];
var BZ$1 = [
	{
		name: "Belize",
		key: "BZ"
	},
	{
		name: "Cayo",
		key: "CY"
	},
	{
		name: "Corozal",
		key: "CZL"
	},
	{
		name: "Orange Walk",
		key: "OW"
	},
	{
		name: "Stann Creek",
		key: "SC"
	},
	{
		name: "Toledo",
		key: "TOL"
	}
];
var CA$1 = [
	{
		name: "Alberta",
		key: "AB"
	},
	{
		name: "British Columbia",
		key: "BC"
	},
	{
		name: "Manitoba",
		key: "MB"
	},
	{
		name: "New Brunswick",
		key: "NB"
	},
	{
		name: "Newfoundland and Labrador",
		key: "NL"
	},
	{
		name: "Northwest Territories",
		key: "NT"
	},
	{
		name: "Nova Scotia",
		key: "NS"
	},
	{
		name: "Nunavut",
		key: "NU"
	},
	{
		name: "Ontario",
		key: "ON"
	},
	{
		name: "Prince Edward Island",
		key: "PE"
	},
	{
		name: "Quebec",
		key: "QC"
	},
	{
		name: "Saskatchewan",
		key: "SK"
	},
	{
		name: "Yukon",
		key: "YT"
	}
];
var CD$1 = [
	{
		name: "Kongo Central",
		key: "BC"
	},
	{
		name: "Bas-Uélé",
		key: "BU"
	},
	{
		name: "Équateur",
		key: "EQ"
	},
	{
		name: "Haut-Katanga",
		key: "HK"
	},
	{
		name: "Haut-Lomami",
		key: "HL"
	},
	{
		name: "Haut-Uélé",
		key: "HU"
	},
	{
		name: "Ituri",
		key: "IT"
	},
	{
		name: "Kasaï Central",
		key: "KC"
	},
	{
		name: "Kasaï Oriental",
		key: "KE"
	},
	{
		name: "Kwango",
		key: "KG"
	},
	{
		name: "Kwilu",
		key: "KL"
	},
	{
		name: "Kinshasa",
		key: "KN"
	},
	{
		name: "Kasaï",
		key: "KS"
	},
	{
		name: "Lomami",
		key: "LO"
	},
	{
		name: "Lualaba",
		key: "LU"
	},
	{
		name: "Maniema",
		key: "MA"
	},
	{
		name: "Mai-Ndombe",
		key: "MN"
	},
	{
		name: "Mongala",
		key: "MO"
	},
	{
		name: "Nord-Kivu",
		key: "NK"
	},
	{
		name: "Nord-Ubangi",
		key: "NU"
	},
	{
		name: "Sankuru",
		key: "SA"
	},
	{
		name: "Sud-Kivu",
		key: "SK"
	},
	{
		name: "Sud-Ubangi",
		key: "SU"
	},
	{
		name: "Tanganyika",
		key: "TA"
	},
	{
		name: "Tshopo",
		key: "TO"
	},
	{
		name: "Tshuapa",
		key: "TU"
	}
];
var CF$1 = [
	{
		name: "Ouham",
		key: "AC"
	},
	{
		name: "Bamingui-Bangoran",
		key: "BB"
	},
	{
		name: "Bangui",
		key: "BGF"
	},
	{
		name: "Basse-Kotto",
		key: "BK"
	},
	{
		name: "Haute-Kotto",
		key: "HK"
	},
	{
		name: "Haut-Mbomou",
		key: "HM"
	},
	{
		name: "Mambéré-Kadéï",
		key: "HS"
	},
	{
		name: "Gribingui",
		key: "KB"
	},
	{
		name: "Kémo‐Gribingui",
		key: "KG"
	},
	{
		name: "Lobaye",
		key: "LB"
	},
	{
		name: "Mbomou",
		key: "MB"
	},
	{
		name: "Ombella-Mpoko",
		key: "MP"
	},
	{
		name: "Nana-Mambéré",
		key: "NM"
	},
	{
		name: "Ouham-Pendé",
		key: "OP"
	},
	{
		name: "Sangha",
		key: "SE"
	},
	{
		name: "Ouaka",
		key: "UK"
	},
	{
		name: "Vakaga",
		key: "VK"
	}
];
var CH$1 = [
	{
		name: "Aargau",
		key: "AG"
	},
	{
		name: "Appenzell Innerrhoden",
		key: "AI"
	},
	{
		name: "Appenzell Ausserrhoden",
		key: "AR"
	},
	{
		name: "Bern",
		key: "BE"
	},
	{
		name: "Basel-Landschaft",
		key: "BL"
	},
	{
		name: "Basel-Stadt",
		key: "BS"
	},
	{
		name: "Fribourg",
		key: "FR"
	},
	{
		name: "Genève",
		key: "GE"
	},
	{
		name: "Glarus",
		key: "GL"
	},
	{
		name: "Graubünden",
		key: "GR"
	},
	{
		name: "Jura",
		key: "JU"
	},
	{
		name: "Luzern",
		key: "LU"
	},
	{
		name: "Neuchâtel",
		key: "NE"
	},
	{
		name: "Nidwalden",
		key: "NW"
	},
	{
		name: "Obwalden",
		key: "OW"
	},
	{
		name: "Sankt Gallen",
		key: "SG"
	},
	{
		name: "Schaffhausen",
		key: "SH"
	},
	{
		name: "Solothurn",
		key: "SO"
	},
	{
		name: "Schwyz",
		key: "SZ"
	},
	{
		name: "Thurgau",
		key: "TG"
	},
	{
		name: "Ticino",
		key: "TI"
	},
	{
		name: "Uri",
		key: "UR"
	},
	{
		name: "Vaud",
		key: "VD"
	},
	{
		name: "Valais",
		key: "VS"
	},
	{
		name: "Zug",
		key: "ZG"
	},
	{
		name: "Zürich",
		key: "ZH"
	}
];
var CI$1 = [
	{
		name: "Abidjan",
		key: "AB"
	},
	{
		name: "Bas-Sassandra",
		key: "BS"
	},
	{
		name: "Comoé",
		key: "CM"
	},
	{
		name: "Denguélé",
		key: "DN"
	},
	{
		name: "Gôh-Djiboua",
		key: "GD"
	},
	{
		name: "Lacs",
		key: "LC"
	},
	{
		name: "Lagunes",
		key: "LG"
	},
	{
		name: "Montagnes",
		key: "MG"
	},
	{
		name: "Sassandra-Marahoué",
		key: "SM"
	},
	{
		name: "Savanes",
		key: "SV"
	},
	{
		name: "Vallée du Bandama",
		key: "VB"
	},
	{
		name: "Woroba",
		key: "WR"
	},
	{
		name: "Yamoussoukro",
		key: "YM"
	},
	{
		name: "Zanzan",
		key: "ZZ"
	}
];
var CL$1 = [
	{
		name: "Aisén del General Carlos Ibañez del Campo",
		key: "AI"
	},
	{
		name: "Antofagasta",
		key: "AN"
	},
	{
		name: "Arica y Parinacota",
		key: "AP"
	},
	{
		name: "La Araucanía",
		key: "AR"
	},
	{
		name: "Atacama",
		key: "AT"
	},
	{
		name: "Biobío",
		key: "BI"
	},
	{
		name: "Coquimbo",
		key: "CO"
	},
	{
		name: "Libertador General Bernardo O'Higgins",
		key: "LI"
	},
	{
		name: "Los Lagos",
		key: "LL"
	},
	{
		name: "Los Ríos",
		key: "LR"
	},
	{
		name: "Magallanes",
		key: "MA"
	},
	{
		name: "Maule",
		key: "ML"
	},
	{
		name: "Región Metropolitana de Santiago",
		key: "RM"
	},
	{
		name: "Tarapacá",
		key: "TA"
	},
	{
		name: "Valparaíso",
		key: "VS"
	}
];
var CM$1 = [
	{
		name: "Adamaoua",
		key: "AD"
	},
	{
		name: "Centre",
		key: "CE"
	},
	{
		name: "Far North",
		key: "EN"
	},
	{
		name: "East",
		key: "ES"
	},
	{
		name: "Littoral",
		key: "LT"
	},
	{
		name: "North",
		key: "NO"
	},
	{
		name: "North-West",
		key: "NW"
	},
	{
		name: "West",
		key: "OU"
	},
	{
		name: "South",
		key: "SU"
	},
	{
		name: "South-West",
		key: "SW"
	}
];
var CO$1 = [
	{
		name: "Amazonas",
		key: "AMA"
	},
	{
		name: "Antioquia",
		key: "ANT"
	},
	{
		name: "Arauca",
		key: "ARA"
	},
	{
		name: "Atlántico",
		key: "ATL"
	},
	{
		name: "Bolívar",
		key: "BOL"
	},
	{
		name: "Boyacá",
		key: "BOY"
	},
	{
		name: "Caldas",
		key: "CAL"
	},
	{
		name: "Caquetá",
		key: "CAQ"
	},
	{
		name: "Casanare",
		key: "CAS"
	},
	{
		name: "Cauca",
		key: "CAU"
	},
	{
		name: "Cesar",
		key: "CES"
	},
	{
		name: "Chocó",
		key: "CHO"
	},
	{
		name: "Córdoba",
		key: "COR"
	},
	{
		name: "Cundinamarca",
		key: "CUN"
	},
	{
		name: "Distrito Capital de Bogotá",
		key: "DC"
	},
	{
		name: "Guainía",
		key: "GUA"
	},
	{
		name: "Guaviare",
		key: "GUV"
	},
	{
		name: "Huila",
		key: "HUI"
	},
	{
		name: "La Guajira",
		key: "LAG"
	},
	{
		name: "Magdalena",
		key: "MAG"
	},
	{
		name: "Meta",
		key: "MET"
	},
	{
		name: "Nariño",
		key: "NAR"
	},
	{
		name: "Norte de Santander",
		key: "NSA"
	},
	{
		name: "Putumayo",
		key: "PUT"
	},
	{
		name: "Quindío",
		key: "QUI"
	},
	{
		name: "Risaralda",
		key: "RIS"
	},
	{
		name: "Santander",
		key: "SAN"
	},
	{
		name: "San Andrés",
		key: "SAP"
	},
	{
		name: "Sucre",
		key: "SUC"
	},
	{
		name: "Tolima",
		key: "TOL"
	},
	{
		name: "Valle del Cauca",
		key: "VAC"
	},
	{
		name: "Vaupés",
		key: "VAU"
	},
	{
		name: "Vichada",
		key: "VID"
	}
];
var CR$1 = [
	{
		name: "Alajuela",
		key: "A"
	},
	{
		name: "Cartago",
		key: "C"
	},
	{
		name: "Guanacaste",
		key: "G"
	},
	{
		name: "Heredia",
		key: "H"
	},
	{
		name: "Limón",
		key: "L"
	},
	{
		name: "Puntarenas",
		key: "P"
	},
	{
		name: "San José",
		key: "SJ"
	}
];
var CV$1 = [
	{
		name: "Brava",
		key: "BR"
	},
	{
		name: "Boa Vista",
		key: "BV"
	},
	{
		name: "Santa Catarina",
		key: "CA"
	},
	{
		name: "Santa Catarina do Fogo",
		key: "CF"
	},
	{
		name: "Santa Cruz",
		key: "CR"
	},
	{
		name: "Maio",
		key: "MA"
	},
	{
		name: "Mosteiros",
		key: "MO"
	},
	{
		name: "Paul",
		key: "PA"
	},
	{
		name: "Porto Novo",
		key: "PN"
	},
	{
		name: "Praia",
		key: "PR"
	},
	{
		name: "Ribeira Brava",
		key: "RB"
	},
	{
		name: "Ribeira Grande",
		key: "RG"
	},
	{
		name: "Ribeira Grande de Santiago",
		key: "RS"
	},
	{
		name: "São Domingos",
		key: "SD"
	},
	{
		name: "São Filipe",
		key: "SF"
	},
	{
		name: "Sal",
		key: "SL"
	},
	{
		name: "São Miguel",
		key: "SM"
	},
	{
		name: "São Lourenço dos Órgãos",
		key: "SO"
	},
	{
		name: "São Salvador do Mundo",
		key: "SS"
	},
	{
		name: "São Vicente",
		key: "SV"
	},
	{
		name: "Tarrafal",
		key: "TA"
	},
	{
		name: "Tarrafal de São Nicolau",
		key: "TS"
	}
];
var DE$1 = [
	{
		name: "Brandenburg",
		key: "BB"
	},
	{
		name: "Berlin",
		key: "BE"
	},
	{
		name: "Baden-Württemberg",
		key: "BW"
	},
	{
		name: "Bayern",
		key: "BY"
	},
	{
		name: "Bremen",
		key: "HB"
	},
	{
		name: "Hessen",
		key: "HE"
	},
	{
		name: "Hamburg",
		key: "HH"
	},
	{
		name: "Mecklenburg-Vorpommern",
		key: "MV"
	},
	{
		name: "Niedersachsen",
		key: "NI"
	},
	{
		name: "Nordrhein-Westfalen",
		key: "NW"
	},
	{
		name: "Rheinland-Pfalz",
		key: "RP"
	},
	{
		name: "Schleswig-Holstein",
		key: "SH"
	},
	{
		name: "Saarland",
		key: "SL"
	},
	{
		name: "Sachsen",
		key: "SN"
	},
	{
		name: "Sachsen-Anhalt",
		key: "ST"
	},
	{
		name: "Thüringen",
		key: "TH"
	}
];
var DJ$1 = [
	{
		name: "Arta",
		key: "AR"
	},
	{
		name: "Ali Sabieh",
		key: "AS"
	},
	{
		name: "Dikhil",
		key: "DI"
	},
	{
		name: "Djibouti",
		key: "DJ"
	},
	{
		name: "Obock",
		key: "OB"
	},
	{
		name: "Tadjourah",
		key: "TA"
	}
];
var EC$1 = [
	{
		name: "Azuay",
		key: "A"
	},
	{
		name: "Bolívar",
		key: "B"
	},
	{
		name: "Carchi",
		key: "C"
	},
	{
		name: "Orellana",
		key: "D"
	},
	{
		name: "Esmeraldas",
		key: "E"
	},
	{
		name: "Cañar",
		key: "F"
	},
	{
		name: "Guayas",
		key: "G"
	},
	{
		name: "Chimborazo",
		key: "H"
	},
	{
		name: "Imbabura",
		key: "I"
	},
	{
		name: "Loja",
		key: "L"
	},
	{
		name: "Manabí",
		key: "M"
	},
	{
		name: "Napo",
		key: "N"
	},
	{
		name: "El Oro",
		key: "O"
	},
	{
		name: "Pichincha",
		key: "P"
	},
	{
		name: "Los Ríos",
		key: "R"
	},
	{
		name: "Morona-Santiago",
		key: "S"
	},
	{
		name: "Santo Domingo de los Tsáchilas",
		key: "SD"
	},
	{
		name: "Santa Elena",
		key: "SE"
	},
	{
		name: "Tungurahua",
		key: "T"
	},
	{
		name: "Sucumbíos",
		key: "U"
	},
	{
		name: "Galápagos",
		key: "W"
	},
	{
		name: "Cotopaxi",
		key: "X"
	},
	{
		name: "Pastaza",
		key: "Y"
	},
	{
		name: "Zamora Chinchipe",
		key: "Z"
	}
];
var ES$1 = [
	{
		name: "Andalucía",
		key: "AN"
	},
	{
		name: "Aragón",
		key: "AR"
	},
	{
		name: "Asturias",
		key: "AS"
	},
	{
		name: "Cantabria",
		key: "CB"
	},
	{
		name: "Ceuta",
		key: "CE"
	},
	{
		name: "Castilla y León",
		key: "CL"
	},
	{
		name: "Castilla-La Mancha",
		key: "CM"
	},
	{
		name: "Canarias",
		key: "CN"
	},
	{
		name: "Cataluña",
		key: "CT"
	},
	{
		name: "Extremadura",
		key: "EX"
	},
	{
		name: "Galicia",
		key: "GA"
	},
	{
		name: "Islas Baleares",
		key: "IB"
	},
	{
		name: "Región de Murcia",
		key: "MC"
	},
	{
		name: "Comunidad de Madrid",
		key: "MD"
	},
	{
		name: "Melilla",
		key: "ML"
	},
	{
		name: "Navarra",
		key: "NC"
	},
	{
		name: "País Vasco",
		key: "PV"
	},
	{
		name: "La Rioja",
		key: "RI"
	},
	{
		name: "Comunidad Valenciana",
		key: "VC"
	}
];
var FM$1 = [
	{
		name: "Kosrae",
		key: "KSA"
	},
	{
		name: "Pohnpei",
		key: "PNI"
	},
	{
		name: "Chuuk",
		key: "TRK"
	},
	{
		name: "Yap",
		key: "YAP"
	}
];
var FR$1 = [
	{
		name: "Auvergne-Rhône-Alpes",
		key: "ARA"
	},
	{
		name: "Bourgogne-Franche-Comté",
		key: "BFC"
	},
	{
		name: "Bretagne",
		key: "BRE"
	},
	{
		name: "Centre-Val de Loire",
		key: "CVL"
	},
	{
		name: "Corse",
		key: "COR"
	},
	{
		name: "Grand Est",
		key: "GES"
	},
	{
		name: "Guyane",
		key: "GF"
	},
	{
		name: "Guadeloupe",
		key: "GP"
	},
	{
		name: "Hauts-de-France",
		key: "HDF"
	},
	{
		name: "Île-de-France",
		key: "IDF"
	},
	{
		name: "Martinique",
		key: "MQ"
	},
	{
		name: "Normandie",
		key: "NOR"
	},
	{
		name: "Nouvelle-Aquitaine",
		key: "NAQ"
	},
	{
		name: "Occitanie",
		key: "OCC"
	},
	{
		name: "Pays de la Loire",
		key: "PDL"
	},
	{
		name: "Provence-Alpes-Côte d'Azur",
		key: "PAC"
	},
	{
		name: "La Réunion",
		key: "RE"
	},
	{
		name: "Mayotte",
		key: "YT"
	}
];
var GB$1 = [
	{
		name: "England",
		key: "ENG"
	},
	{
		name: "Northern Ireland",
		key: "NIR"
	},
	{
		name: "Scotland",
		key: "SCT"
	},
	{
		name: "Wales",
		key: "WLS"
	}
];
var GH$1 = [
	{
		name: "Greater Accra",
		key: "AA"
	},
	{
		name: "Ashanti",
		key: "AH"
	},
	{
		name: "Brong-Ahafo",
		key: "BA"
	},
	{
		name: "Central",
		key: "CP"
	},
	{
		name: "Eastern",
		key: "EP"
	},
	{
		name: "Northern",
		key: "NP"
	},
	{
		name: "Volta",
		key: "TV"
	},
	{
		name: "Upper East",
		key: "UE"
	},
	{
		name: "Upper West",
		key: "UW"
	},
	{
		name: "Western",
		key: "WP"
	}
];
var GL$1 = [
	{
		name: "Kommune Kujalleq",
		key: "KU"
	},
	{
		name: "Qaasuitsup Kommunia",
		key: "QA"
	},
	{
		name: "Qeqqata Kommunia",
		key: "QE"
	},
	{
		name: "Kommuneqarfik Sermersooq",
		key: "SM"
	}
];
var GM$1 = [
	{
		name: "Banjul",
		key: "B"
	},
	{
		name: "Lower River",
		key: "L"
	},
	{
		name: "Central River",
		key: "M"
	},
	{
		name: "North Bank",
		key: "N"
	},
	{
		name: "Upper River",
		key: "U"
	},
	{
		name: "Western",
		key: "W"
	}
];
var GN$1 = [
	{
		name: "Beyla",
		key: "BE"
	},
	{
		name: "Boffa",
		key: "BF"
	},
	{
		name: "Boké",
		key: "BK"
	},
	{
		name: "Coyah",
		key: "CO"
	},
	{
		name: "Dabola",
		key: "DB"
	},
	{
		name: "Dinguiraye",
		key: "DI"
	},
	{
		name: "Dalaba",
		key: "DL"
	},
	{
		name: "Dubréka",
		key: "DU"
	},
	{
		name: "Faranah",
		key: "FA"
	},
	{
		name: "Forécariah",
		key: "FO"
	},
	{
		name: "Fria",
		key: "FR"
	},
	{
		name: "Gaoual",
		key: "GA"
	},
	{
		name: "Guékédou",
		key: "GU"
	},
	{
		name: "Kankan",
		key: "KA"
	},
	{
		name: "Koubia",
		key: "KB"
	},
	{
		name: "Kindia",
		key: "KD"
	},
	{
		name: "Kérouané",
		key: "KE"
	},
	{
		name: "Koundara",
		key: "KN"
	},
	{
		name: "Kouroussa",
		key: "KO"
	},
	{
		name: "Kissidougou",
		key: "KS"
	},
	{
		name: "Labé",
		key: "LA"
	},
	{
		name: "Lélouma",
		key: "LE"
	},
	{
		name: "Lola",
		key: "LO"
	},
	{
		name: "Macenta",
		key: "MC"
	},
	{
		name: "Mandiana",
		key: "MD"
	},
	{
		name: "Mali",
		key: "ML"
	},
	{
		name: "Mamou",
		key: "MM"
	},
	{
		name: "Nzérékoré",
		key: "NZ"
	},
	{
		name: "Pita",
		key: "PI"
	},
	{
		name: "Siguiri",
		key: "SI"
	},
	{
		name: "Télimélé",
		key: "TE"
	},
	{
		name: "Tougué",
		key: "TO"
	},
	{
		name: "Yomou",
		key: "YO"
	}
];
var GQ$1 = [
	{
		name: "Annobón",
		key: "AN"
	},
	{
		name: "Bioko Norte",
		key: "BN"
	},
	{
		name: "Bioko Sur",
		key: "BS"
	},
	{
		name: "Centro Sur",
		key: "CS"
	},
	{
		name: "Kié‐Ntem",
		key: "KN"
	},
	{
		name: "Litoral",
		key: "LI"
	},
	{
		name: "Wele‐Nzas",
		key: "WN"
	}
];
var GT$1 = [
	{
		name: "Alta Verapaz",
		key: "AV"
	},
	{
		name: "Baja Verapaz",
		key: "BV"
	},
	{
		name: "Chimaltenango",
		key: "CM"
	},
	{
		name: "Chiquimula",
		key: "CQ"
	},
	{
		name: "Escuintla",
		key: "ES"
	},
	{
		name: "Guatemala",
		key: "GU"
	},
	{
		name: "Huehuetenango",
		key: "HU"
	},
	{
		name: "Izabal",
		key: "IZ"
	},
	{
		name: "Jalapa",
		key: "JA"
	},
	{
		name: "Jutiapa",
		key: "JU"
	},
	{
		name: "Petén",
		key: "PE"
	},
	{
		name: "El Progreso",
		key: "PR"
	},
	{
		name: "Quiché",
		key: "QC"
	},
	{
		name: "Quetzaltenango",
		key: "QZ"
	},
	{
		name: "Retalhuleu",
		key: "RE"
	},
	{
		name: "Sacatepéquez",
		key: "SA"
	},
	{
		name: "San Marcos",
		key: "SM"
	},
	{
		name: "Sololá",
		key: "SO"
	},
	{
		name: "Santa Rosa",
		key: "SR"
	},
	{
		name: "Suchitepéquez",
		key: "SU"
	},
	{
		name: "Totonicapán",
		key: "TO"
	},
	{
		name: "Zacapa",
		key: "ZA"
	}
];
var GW$1 = [
	{
		name: "Bafatá",
		key: "BA"
	},
	{
		name: "Bolama",
		key: "BL"
	},
	{
		name: "Biombo",
		key: "BM"
	},
	{
		name: "Bissau",
		key: "BS"
	},
	{
		name: "Cacheu",
		key: "CA"
	},
	{
		name: "Gabú",
		key: "GA"
	},
	{
		name: "Oio",
		key: "OI"
	},
	{
		name: "Quinara",
		key: "QU"
	},
	{
		name: "Tombali",
		key: "TO"
	}
];
var GY$1 = [
	{
		name: "Barima-Waini",
		key: "BA"
	},
	{
		name: "Cuyuni-Mazaruni",
		key: "CU"
	},
	{
		name: "Demerara-Mahaica",
		key: "DE"
	},
	{
		name: "East Berbice-Corentyne",
		key: "EB"
	},
	{
		name: "Essequibo Islands-West Demerara",
		key: "ES"
	},
	{
		name: "Mahaica-Berbice",
		key: "MA"
	},
	{
		name: "Pomeroon-Supenaam",
		key: "PM"
	},
	{
		name: "Potaro-Siparuni",
		key: "PT"
	},
	{
		name: "Upper Demerara-Berbice",
		key: "UD"
	},
	{
		name: "Upper Takutu-Upper Essequibo",
		key: "UT"
	}
];
var HN$1 = [
	{
		name: "Atlántida",
		key: "AT"
	},
	{
		name: "Choluteca",
		key: "CH"
	},
	{
		name: "Colón",
		key: "CL"
	},
	{
		name: "Comayagua",
		key: "CM"
	},
	{
		name: "Copán",
		key: "CP"
	},
	{
		name: "Cortés",
		key: "CR"
	},
	{
		name: "El Paraíso",
		key: "EP"
	},
	{
		name: "Francisco Morazán",
		key: "FM"
	},
	{
		name: "Gracias a Dios",
		key: "GD"
	},
	{
		name: "Islas de la Bahía",
		key: "IB"
	},
	{
		name: "Intibucá",
		key: "IN"
	},
	{
		name: "Lempira",
		key: "LE"
	},
	{
		name: "La Paz",
		key: "LP"
	},
	{
		name: "Ocotepeque",
		key: "OC"
	},
	{
		name: "Olancho",
		key: "OL"
	},
	{
		name: "Santa Bárbara",
		key: "SB"
	},
	{
		name: "Valle",
		key: "VA"
	},
	{
		name: "Yoro",
		key: "YO"
	}
];
var HT$1 = [
	{
		name: "Artibonite",
		key: "AR"
	},
	{
		name: "Centre",
		key: "CE"
	},
	{
		name: "Grande’Anse",
		key: "GA"
	},
	{
		name: "Nord",
		key: "ND"
	},
	{
		name: "Nord-Est",
		key: "NE"
	},
	{
		name: "Nippes",
		key: "NI"
	},
	{
		name: "Nord-Ouest",
		key: "NO"
	},
	{
		name: "Ouest",
		key: "OU"
	},
	{
		name: "Sud",
		key: "SD"
	},
	{
		name: "Sud-Est",
		key: "SE"
	}
];
var HU$1 = [
	{
		name: "Baranya",
		key: "BA"
	},
	{
		name: "Békéscsaba",
		key: "BC"
	},
	{
		name: "Békés",
		key: "BE"
	},
	{
		name: "Bács-Kiskun",
		key: "BK"
	},
	{
		name: "Budapest",
		key: "BU"
	},
	{
		name: "Borsod-Abaúj-Zemplén",
		key: "BZ"
	},
	{
		name: "Csongrád",
		key: "CS"
	},
	{
		name: "Debrecen",
		key: "DE"
	},
	{
		name: "Dunaújváros",
		key: "DU"
	},
	{
		name: "Eger",
		key: "EG"
	},
	{
		name: "Érd",
		key: "ER"
	},
	{
		name: "Fejér",
		key: "FE"
	},
	{
		name: "Győr‐Moson‐Sopron",
		key: "GS"
	},
	{
		name: "Győr",
		key: "GY"
	},
	{
		name: "Hajdú-Bihar",
		key: "HB"
	},
	{
		name: "Heves",
		key: "HE"
	},
	{
		name: "Hódmezővásárhely",
		key: "HV"
	},
	{
		name: "Jász-Nagykun-Szolnok",
		key: "JN"
	},
	{
		name: "Komárom-Esztergom",
		key: "KE"
	},
	{
		name: "Kecskemét",
		key: "KM"
	},
	{
		name: "Kaposvár",
		key: "KV"
	},
	{
		name: "Miskolc",
		key: "MI"
	},
	{
		name: "Nagykanizsa",
		key: "NK"
	},
	{
		name: "Nógrád",
		key: "NO"
	},
	{
		name: "Nyíregyháza",
		key: "NY"
	},
	{
		name: "Pest",
		key: "PE"
	},
	{
		name: "Pécs",
		key: "PS"
	},
	{
		name: "Szeged",
		key: "SD"
	},
	{
		name: "Székesfehérvár",
		key: "SF"
	},
	{
		name: "Szombathely",
		key: "SH"
	},
	{
		name: "Szolnok",
		key: "SK"
	},
	{
		name: "Sopron",
		key: "SN"
	},
	{
		name: "Somogy",
		key: "SO"
	},
	{
		name: "Szekszárd",
		key: "SS"
	},
	{
		name: "Salgótarján",
		key: "ST"
	},
	{
		name: "Szabolcs-Szatmár-Bereg",
		key: "SZ"
	},
	{
		name: "Tatabánya",
		key: "TB"
	},
	{
		name: "Tolna",
		key: "TO"
	},
	{
		name: "Vas",
		key: "VA"
	},
	{
		name: "Veszprém",
		key: "VE"
	},
	{
		name: "Veszprém",
		key: "VM"
	},
	{
		name: "Zala",
		key: "ZA"
	},
	{
		name: "Zalaegerszeg",
		key: "ZE"
	}
];
var IE$1 = [
	{
		name: "Connacht",
		key: "C"
	},
	{
		name: "Leinster",
		key: "L"
	},
	{
		name: "Munster",
		key: "M"
	},
	{
		name: "Ulster",
		key: "U"
	}
];
var IN$1 = [
	{
		name: "Andaman and Nicobar Islands",
		key: "AN"
	},
	{
		name: "Andhra Pradesh",
		key: "AP"
	},
	{
		name: "Arunachal Pradesh",
		key: "AR"
	},
	{
		name: "Assam",
		key: "AS"
	},
	{
		name: "Bihar",
		key: "BR"
	},
	{
		name: "Chandigarh",
		key: "CH"
	},
	{
		name: "Chhattisgarh",
		key: "CT"
	},
	{
		name: "Daman and Diu",
		key: "DD"
	},
	{
		name: "Delhi",
		key: "DL"
	},
	{
		name: "Dadra and Nagar Haveli",
		key: "DN"
	},
	{
		name: "Goa",
		key: "GA"
	},
	{
		name: "Gujarat",
		key: "GJ"
	},
	{
		name: "Himachal Pradesh",
		key: "HP"
	},
	{
		name: "Haryana",
		key: "HR"
	},
	{
		name: "Jharkhand",
		key: "JH"
	},
	{
		name: "Jammu and Kashmir",
		key: "JK"
	},
	{
		name: "Karnataka",
		key: "KA"
	},
	{
		name: "Kerala",
		key: "KL"
	},
	{
		name: "Lakshadweep",
		key: "LD"
	},
	{
		name: "Maharashtra",
		key: "MH"
	},
	{
		name: "Meghalaya",
		key: "ML"
	},
	{
		name: "Manipur",
		key: "MN"
	},
	{
		name: "Madhya Pradesh",
		key: "MP"
	},
	{
		name: "Mizoram",
		key: "MZ"
	},
	{
		name: "Nagaland",
		key: "NL"
	},
	{
		name: "Odisha",
		key: "OR"
	},
	{
		name: "Punjab",
		key: "PB"
	},
	{
		name: "Puducherry",
		key: "PY"
	},
	{
		name: "Rajasthan",
		key: "RJ"
	},
	{
		name: "Sikkim",
		key: "SK"
	},
	{
		name: "Telangana",
		key: "TG"
	},
	{
		name: "Tamil Nadu",
		key: "TN"
	},
	{
		name: "Tripura",
		key: "TR"
	},
	{
		name: "Uttar Pradesh",
		key: "UP"
	},
	{
		name: "Uttarakhand",
		key: "UT"
	},
	{
		name: "West Bengal",
		key: "WB"
	}
];
var IT$1 = [
	{
		name: "Abruzzo",
		key: "ABR"
	},
	{
		name: "Basilicata",
		key: "BAS"
	},
	{
		name: "Calabria",
		key: "CAL"
	},
	{
		name: "Campania",
		key: "CAM"
	},
	{
		name: "Emilia-Romagna",
		key: "EMI"
	},
	{
		name: "Friuli Venezia Giulia",
		key: "FRI"
	},
	{
		name: "Lazio",
		key: "LAZ"
	},
	{
		name: "Liguria",
		key: "LIG"
	},
	{
		name: "Lombardia",
		key: "LOM"
	},
	{
		name: "Marche",
		key: "MAR"
	},
	{
		name: "Molise",
		key: "MOL"
	},
	{
		name: "Piemonte",
		key: "PIE"
	},
	{
		name: "Puglia",
		key: "PUG"
	},
	{
		name: "Sardegna",
		key: "SAR"
	},
	{
		name: "Sicilia",
		key: "SIC"
	},
	{
		name: "Toscana",
		key: "TOS"
	},
	{
		name: "Trentino-Alto Adige",
		key: "TRE"
	},
	{
		name: "Umbria",
		key: "UMB"
	},
	{
		name: "Valle d'Aosta",
		key: "VAL"
	},
	{
		name: "Veneto",
		key: "VEN"
	}
];
var KI$1 = [
	{
		name: "Gilbert Islands",
		key: "G"
	},
	{
		name: "Line Islands",
		key: "L"
	},
	{
		name: "Phoenix Islands",
		key: "P"
	}
];
var KM$1 = [
	{
		name: "Anjouan",
		key: "A"
	},
	{
		name: "Grande Comore",
		key: "G"
	},
	{
		name: "Mohéli",
		key: "M"
	}
];
var LR$1 = [
	{
		name: "Bong",
		key: "BG"
	},
	{
		name: "Bomi",
		key: "BM"
	},
	{
		name: "Grand Cape Mount",
		key: "CM"
	},
	{
		name: "Grand Bassa",
		key: "GB"
	},
	{
		name: "Grand Gedeh",
		key: "GG"
	},
	{
		name: "Grand Kru",
		key: "GK"
	},
	{
		name: "Gbarpolu",
		key: "GP"
	},
	{
		name: "Lofa",
		key: "LO"
	},
	{
		name: "Margibi",
		key: "MG"
	},
	{
		name: "Montserrado",
		key: "MO"
	},
	{
		name: "Maryland",
		key: "MY"
	},
	{
		name: "Nimba",
		key: "NI"
	},
	{
		name: "River Gee",
		key: "RG"
	},
	{
		name: "River Cess",
		key: "RI"
	},
	{
		name: "Sinoe",
		key: "SI"
	}
];
var LS$1 = [
	{
		name: "Maseru",
		key: "A"
	},
	{
		name: "Butha-Buthe",
		key: "B"
	},
	{
		name: "Leribe",
		key: "C"
	},
	{
		name: "Berea",
		key: "D"
	},
	{
		name: "Mafeteng",
		key: "E"
	},
	{
		name: "Mohale's Hoek",
		key: "F"
	},
	{
		name: "Quthing",
		key: "G"
	},
	{
		name: "Qacha's Nek",
		key: "H"
	},
	{
		name: "Mokhotlong",
		key: "J"
	},
	{
		name: "Thaba-Tseka",
		key: "K"
	}
];
var LU$1 = [
	{
		name: "Capellen",
		key: "CA"
	},
	{
		name: "Clervaux",
		key: "CL"
	},
	{
		name: "Diekirch",
		key: "DI"
	},
	{
		name: "Echternach",
		key: "EC"
	},
	{
		name: "Esch-sur-Alzette",
		key: "ES"
	},
	{
		name: "Gréivemaacher",
		key: "GR"
	},
	{
		name: "Luxembourg",
		key: "LU"
	},
	{
		name: "Mersch",
		key: "ME"
	},
	{
		name: "Redange",
		key: "RD"
	},
	{
		name: "Remich",
		key: "RM"
	},
	{
		name: "Vianden",
		key: "VD"
	},
	{
		name: "Wiltz",
		key: "WI"
	}
];
var MD$1 = [
	{
		name: "Anenii Noi",
		key: "AN"
	},
	{
		name: "Bălţi",
		key: "BA"
	},
	{
		name: "Bender [Tighina]",
		key: "BD"
	},
	{
		name: "Briceni",
		key: "BR"
	},
	{
		name: "Basarabeasca",
		key: "BS"
	},
	{
		name: "Cahul",
		key: "CA"
	},
	{
		name: "Călăraşi",
		key: "CL"
	},
	{
		name: "Cimişlia",
		key: "CM"
	},
	{
		name: "Criuleni",
		key: "CR"
	},
	{
		name: "Căuşeni",
		key: "CS"
	},
	{
		name: "Cantemir",
		key: "CT"
	},
	{
		name: "Chişinău",
		key: "CU"
	},
	{
		name: "Donduşeni",
		key: "DO"
	},
	{
		name: "Drochia",
		key: "DR"
	},
	{
		name: "Dubăsari",
		key: "DU"
	},
	{
		name: "Edineţ",
		key: "ED"
	},
	{
		name: "Făleşti",
		key: "FA"
	},
	{
		name: "Floreşti",
		key: "FL"
	},
	{
		name: "Găgăuzia",
		key: "GA"
	},
	{
		name: "Glodeni",
		key: "GL"
	},
	{
		name: "Hînceşti",
		key: "HI"
	},
	{
		name: "Ialoveni",
		key: "IA"
	},
	{
		name: "Leova",
		key: "LE"
	},
	{
		name: "Nisporeni",
		key: "NI"
	},
	{
		name: "Ocniþa",
		key: "OC"
	},
	{
		name: "Orhei",
		key: "OR"
	},
	{
		name: "Rezina",
		key: "RE"
	},
	{
		name: "Rîşcani",
		key: "RI"
	},
	{
		name: "Şoldăneşti",
		key: "SD"
	},
	{
		name: "Sîngerei",
		key: "SI"
	},
	{
		name: "Stînga Nistrului",
		key: "SN"
	},
	{
		name: "Soroca",
		key: "SO"
	},
	{
		name: "Străşeni",
		key: "ST"
	},
	{
		name: "Ştefan Vodă",
		key: "SV"
	},
	{
		name: "Taraclia",
		key: "TA"
	},
	{
		name: "Teleneşti",
		key: "TE"
	},
	{
		name: "Ungheni",
		key: "UN"
	}
];
var MG$1 = [
	{
		name: "Toamasina",
		key: "A"
	},
	{
		name: "Antsiranana",
		key: "D"
	},
	{
		name: "Fianarantsoa",
		key: "F"
	},
	{
		name: "Mahajanga",
		key: "M"
	},
	{
		name: "Antananarivo",
		key: "T"
	},
	{
		name: "Toliara",
		key: "U"
	}
];
var MX$1 = [
	{
		name: "Aguascalientes",
		key: "AGU"
	},
	{
		name: "Baja California",
		key: "BCN"
	},
	{
		name: "Baja California Sur",
		key: "BCS"
	},
	{
		name: "Campeche",
		key: "CAM"
	},
	{
		name: "Chihuahua",
		key: "CHH"
	},
	{
		name: "Chiapas",
		key: "CHP"
	},
	{
		name: "Ciudad de México",
		key: "CMX"
	},
	{
		name: "Coahuila de Zaragoza",
		key: "COA"
	},
	{
		name: "Colima",
		key: "COL"
	},
	{
		name: "Durango",
		key: "DUR"
	},
	{
		name: "Guerrero",
		key: "GRO"
	},
	{
		name: "Guanajuato",
		key: "GUA"
	},
	{
		name: "Hidalgo",
		key: "HID"
	},
	{
		name: "Jalisco",
		key: "JAL"
	},
	{
		name: "México",
		key: "MEX"
	},
	{
		name: "Michoacán de Ocampo",
		key: "MIC"
	},
	{
		name: "Morelos",
		key: "MOR"
	},
	{
		name: "Nayarit",
		key: "NAY"
	},
	{
		name: "Nuevo León",
		key: "NLE"
	},
	{
		name: "Oaxaca",
		key: "OAX"
	},
	{
		name: "Puebla",
		key: "PUE"
	},
	{
		name: "Querétaro",
		key: "QUE"
	},
	{
		name: "Quintana Roo",
		key: "ROO"
	},
	{
		name: "Sinaloa",
		key: "SIN"
	},
	{
		name: "San Luis Potosí",
		key: "SLP"
	},
	{
		name: "Sonora",
		key: "SON"
	},
	{
		name: "Tabasco",
		key: "TAB"
	},
	{
		name: "Tamaulipas",
		key: "TAM"
	},
	{
		name: "Tlaxcala",
		key: "TLA"
	},
	{
		name: "Veracruz de Ignacio de la Llave",
		key: "VER"
	},
	{
		name: "Yucatán",
		key: "YUC"
	},
	{
		name: "Zacatecas",
		key: "ZAC"
	}
];
var MZ$1 = [
	{
		name: "Niaosa",
		key: "A"
	},
	{
		name: "Manica",
		key: "B"
	},
	{
		name: "Gaza",
		key: "G"
	},
	{
		name: "Inhambane",
		key: "I"
	},
	{
		name: "Maputo",
		key: "L"
	},
	{
		name: "Maputo",
		key: "MPM"
	},
	{
		name: "Nampula",
		key: "N"
	},
	{
		name: "Cabo Delgado",
		key: "P"
	},
	{
		name: "Zambézia",
		key: "Q"
	},
	{
		name: "Sofala",
		key: "S"
	},
	{
		name: "Tete",
		key: "T"
	}
];
var NA$1 = [
	{
		name: "Zambezi",
		key: "CA"
	},
	{
		name: "Erongo",
		key: "ER"
	},
	{
		name: "Hardap",
		key: "HA"
	},
	{
		name: "Karas",
		key: "KA"
	},
	{
		name: "Kavango East",
		key: "KE"
	},
	{
		name: "Khomas",
		key: "KH"
	},
	{
		name: "Kunene",
		key: "KU"
	},
	{
		name: "Kavango West",
		key: "KW"
	},
	{
		name: "Otjozondjupa",
		key: "OD"
	},
	{
		name: "Omaheke",
		key: "OH"
	},
	{
		name: "Oshana",
		key: "ON"
	},
	{
		name: "Omusati",
		key: "OS"
	},
	{
		name: "Oshikoto",
		key: "OT"
	},
	{
		name: "Ohangwena",
		key: "OW"
	}
];
var NG$1 = [
	{
		name: "Abia",
		key: "AB"
	},
	{
		name: "Adamawa",
		key: "AD"
	},
	{
		name: "Akwa Ibom",
		key: "AK"
	},
	{
		name: "Anambra",
		key: "AN"
	},
	{
		name: "Bauchi",
		key: "BA"
	},
	{
		name: "Benue",
		key: "BE"
	},
	{
		name: "Borno",
		key: "BO"
	},
	{
		name: "Bayelsa",
		key: "BY"
	},
	{
		name: "Cross River",
		key: "CR"
	},
	{
		name: "Delta",
		key: "DE"
	},
	{
		name: "Ebonyi",
		key: "EB"
	},
	{
		name: "Edo",
		key: "ED"
	},
	{
		name: "Ekiti",
		key: "EK"
	},
	{
		name: "Enugu",
		key: "EN"
	},
	{
		name: "Abuja Capital Territory",
		key: "FC"
	},
	{
		name: "Gombe",
		key: "GO"
	},
	{
		name: "Imo",
		key: "IM"
	},
	{
		name: "Jigawa",
		key: "JI"
	},
	{
		name: "Kaduna",
		key: "KD"
	},
	{
		name: "Kebbi",
		key: "KE"
	},
	{
		name: "Kano",
		key: "KN"
	},
	{
		name: "Kogi",
		key: "KO"
	},
	{
		name: "Katsina",
		key: "KT"
	},
	{
		name: "Kwara",
		key: "KW"
	},
	{
		name: "Lagos",
		key: "LA"
	},
	{
		name: "Nasarawa",
		key: "NA"
	},
	{
		name: "Niger",
		key: "NI"
	},
	{
		name: "Ogun",
		key: "OG"
	},
	{
		name: "Ondo",
		key: "ON"
	},
	{
		name: "Osun",
		key: "OS"
	},
	{
		name: "Oyo",
		key: "OY"
	},
	{
		name: "Plateau",
		key: "PL"
	},
	{
		name: "Rivers",
		key: "RI"
	},
	{
		name: "Sokoto",
		key: "SO"
	},
	{
		name: "Taraba",
		key: "TA"
	},
	{
		name: "Yobe",
		key: "YO"
	},
	{
		name: "Zamfara",
		key: "ZA"
	}
];
var NI$1 = [
	{
		name: "Atlántico Norte",
		key: "AN"
	},
	{
		name: "Atlántico Sur",
		key: "AS"
	},
	{
		name: "Boaco",
		key: "BO"
	},
	{
		name: "Carazo",
		key: "CA"
	},
	{
		name: "Chinandega",
		key: "CI"
	},
	{
		name: "Chontales",
		key: "CO"
	},
	{
		name: "Estelí",
		key: "ES"
	},
	{
		name: "Granada",
		key: "GR"
	},
	{
		name: "Jinotega",
		key: "JI"
	},
	{
		name: "León",
		key: "LE"
	},
	{
		name: "Madriz",
		key: "MD"
	},
	{
		name: "Managua",
		key: "MN"
	},
	{
		name: "Masaya",
		key: "MS"
	},
	{
		name: "Matagalpa",
		key: "MT"
	},
	{
		name: "Nueva Segovia",
		key: "NS"
	},
	{
		name: "Rivas",
		key: "RI"
	},
	{
		name: "Río San Juan",
		key: "SJ"
	}
];
var NL$1 = [
	{
		name: "Drenthe",
		key: "DR"
	},
	{
		name: "Flevoland",
		key: "FL"
	},
	{
		name: "Friesland",
		key: "FR"
	},
	{
		name: "Gelderland",
		key: "GE"
	},
	{
		name: "Groningen",
		key: "GR"
	},
	{
		name: "Limburg",
		key: "LI"
	},
	{
		name: "Noord-Brabant",
		key: "NB"
	},
	{
		name: "Noord-Holland",
		key: "NH"
	},
	{
		name: "Overijssel",
		key: "OV"
	},
	{
		name: "Utrecht",
		key: "UT"
	},
	{
		name: "Zeeland",
		key: "ZE"
	},
	{
		name: "Zuid-Holland",
		key: "ZH"
	}
];
var NZ$1 = [
	{
		name: "Auckland",
		key: "AUK"
	},
	{
		name: "Bay of Plenty",
		key: "BOP"
	},
	{
		name: "Canterbury",
		key: "CAN"
	},
	{
		name: "Chatham Islands Territory",
		key: "CIT"
	},
	{
		name: "Gisborne",
		key: "GIS"
	},
	{
		name: "Hawkes's Bay",
		key: "HKB"
	},
	{
		name: "Marlborough",
		key: "MBH"
	},
	{
		name: "Manawatu-Wanganui",
		key: "MWT"
	},
	{
		name: "Nelson",
		key: "NSN"
	},
	{
		name: "Northland",
		key: "NTL"
	},
	{
		name: "Otago",
		key: "OTA"
	},
	{
		name: "Southland",
		key: "STL"
	},
	{
		name: "Tasman",
		key: "TAS"
	},
	{
		name: "Taranaki",
		key: "TKI"
	},
	{
		name: "Wellington",
		key: "WGN"
	},
	{
		name: "Waikato",
		key: "WKO"
	},
	{
		name: "West Coast",
		key: "WTC"
	}
];
var PE$1 = [
	{
		name: "Amazonas",
		key: "AMA"
	},
	{
		name: "Ancash",
		key: "ANC"
	},
	{
		name: "Apurímac",
		key: "APU"
	},
	{
		name: "Arequipa",
		key: "ARE"
	},
	{
		name: "Ayacucho",
		key: "AYA"
	},
	{
		name: "Cajamarca",
		key: "CAJ"
	},
	{
		name: "El Callao",
		key: "CAL"
	},
	{
		name: "Cuzco",
		key: "CUS"
	},
	{
		name: "Huánuco",
		key: "HUC"
	},
	{
		name: "Huancavelica",
		key: "HUV"
	},
	{
		name: "Ica",
		key: "ICA"
	},
	{
		name: "Junín",
		key: "JUN"
	},
	{
		name: "La Libertad",
		key: "LAL"
	},
	{
		name: "Lambayeque",
		key: "LAM"
	},
	{
		name: "Lima",
		key: "LIM"
	},
	{
		name: "Lima hatun llaqta",
		key: "LMA"
	},
	{
		name: "Loreto",
		key: "LOR"
	},
	{
		name: "Madre de Dios",
		key: "MDD"
	},
	{
		name: "Moquegua",
		key: "MOQ"
	},
	{
		name: "Pasco",
		key: "PAS"
	},
	{
		name: "Piura",
		key: "PIU"
	},
	{
		name: "Puno",
		key: "PUN"
	},
	{
		name: "San Martín",
		key: "SAM"
	},
	{
		name: "Tacna",
		key: "TAC"
	},
	{
		name: "Tumbes",
		key: "TUM"
	},
	{
		name: "Ucayali",
		key: "UCA"
	}
];
var PG$1 = [
	{
		name: "Chimbu",
		key: "CPK"
	},
	{
		name: "Central",
		key: "CPM"
	},
	{
		name: "East New Britain",
		key: "EBR"
	},
	{
		name: "Eastern Highlands",
		key: "EHG"
	},
	{
		name: "Enga",
		key: "EPW"
	},
	{
		name: "East Sepik",
		key: "ESW"
	},
	{
		name: "Gulf",
		key: "GPK"
	},
	{
		name: "Hela",
		key: "HLA"
	},
	{
		name: "Jiwaka",
		key: "JWK"
	},
	{
		name: "Milne Bay",
		key: "MBA"
	},
	{
		name: "Morobe",
		key: "MPL"
	},
	{
		name: "Madang",
		key: "MPM"
	},
	{
		name: "Manus",
		key: "MRL"
	},
	{
		name: "National Capital District",
		key: "NCD"
	},
	{
		name: "New Ireland",
		key: "NIK"
	},
	{
		name: "Northern",
		key: "NPP"
	},
	{
		name: "Bougainville",
		key: "NSB"
	},
	{
		name: "West Sepik",
		key: "SAN"
	},
	{
		name: "Southern Highlands",
		key: "SHM"
	},
	{
		name: "West New Britain",
		key: "WBK"
	},
	{
		name: "Western Highlands",
		key: "WHM"
	},
	{
		name: "Western",
		key: "WPD"
	}
];
var PK$1 = [
	{
		name: "Balochistan",
		key: "BA"
	},
	{
		name: "Gilgit-Baltistan",
		key: "GB"
	},
	{
		name: "Islamabad",
		key: "IS"
	},
	{
		name: "Azad Jammu and Kashmir",
		key: "JK"
	},
	{
		name: "Khyber Pakhtunkhwa",
		key: "KP"
	},
	{
		name: "Punjab",
		key: "PB"
	},
	{
		name: "Sindh",
		key: "SD"
	},
	{
		name: "Federally Administered Tribal Areas",
		key: "TA"
	}
];
var PL$1 = [
	{
		name: "województwo dolnośląskie",
		key: "DS"
	},
	{
		name: "województwo kujawsko-pomorskie",
		key: "KP"
	},
	{
		name: "województwo lubuskie",
		key: "LB"
	},
	{
		name: "województwo łódzkie",
		key: "LD"
	},
	{
		name: "województwo lubelskie",
		key: "LU"
	},
	{
		name: "województwo małopolskie",
		key: "MA"
	},
	{
		name: "województwo mazowieckie",
		key: "MZ"
	},
	{
		name: "województwo opolskie",
		key: "OP"
	},
	{
		name: "województwo podlaskie",
		key: "PD"
	},
	{
		name: "województwo podkarpackie",
		key: "PK"
	},
	{
		name: "województwo pomorskie",
		key: "PM"
	},
	{
		name: "województwo świętokrzyskie",
		key: "SK"
	},
	{
		name: "województwo śląskie",
		key: "SL"
	},
	{
		name: "województwo warmińsko-mazurskie",
		key: "WN"
	},
	{
		name: "województwo wielkopolskie",
		key: "WP"
	},
	{
		name: "województwo zachodniopomorskie",
		key: "ZP"
	}
];
var RO$1 = [
	{
		name: "Alba",
		key: "AB"
	},
	{
		name: "Argeş",
		key: "AG"
	},
	{
		name: "Arad",
		key: "AR"
	},
	{
		name: "Bucureşti",
		key: "B"
	},
	{
		name: "Bacău",
		key: "BC"
	},
	{
		name: "Bihor",
		key: "BH"
	},
	{
		name: "Bistriţa-Năsăud",
		key: "BN"
	},
	{
		name: "Brāila",
		key: "BR"
	},
	{
		name: "Botoşani",
		key: "BT"
	},
	{
		name: "Braşov",
		key: "BV"
	},
	{
		name: "Buzău",
		key: "BZ"
	},
	{
		name: "Cluj",
		key: "CJ"
	},
	{
		name: "Călărasi",
		key: "CL"
	},
	{
		name: "Caraş-Severin",
		key: "CS"
	},
	{
		name: "Constarţa",
		key: "CT"
	},
	{
		name: "Covasna",
		key: "CV"
	},
	{
		name: "Dâmboviţa",
		key: "DB"
	},
	{
		name: "Dolj",
		key: "DJ"
	},
	{
		name: "Gorj",
		key: "GJ"
	},
	{
		name: "Galaţi",
		key: "GL"
	},
	{
		name: "Giurgiu",
		key: "GR"
	},
	{
		name: "Hunedoara",
		key: "HD"
	},
	{
		name: "Harghita",
		key: "HR"
	},
	{
		name: "Ilfov",
		key: "IF"
	},
	{
		name: "Ialomiţa",
		key: "IL"
	},
	{
		name: "Iaşi",
		key: "IS"
	},
	{
		name: "Mehedinţi",
		key: "MH"
	},
	{
		name: "Maramureş",
		key: "MM"
	},
	{
		name: "Mureş",
		key: "MS"
	},
	{
		name: "Neamţ",
		key: "NT"
	},
	{
		name: "Olt",
		key: "OT"
	},
	{
		name: "Prahova",
		key: "PH"
	},
	{
		name: "Sibiu",
		key: "SB"
	},
	{
		name: "Sălaj",
		key: "SJ"
	},
	{
		name: "Satu Mare",
		key: "SM"
	},
	{
		name: "Suceava",
		key: "SV"
	},
	{
		name: "Tulcea",
		key: "TL"
	},
	{
		name: "Timiş",
		key: "TM"
	},
	{
		name: "Teleorman",
		key: "TR"
	},
	{
		name: "Vâlcea",
		key: "VL"
	},
	{
		name: "Vrancea",
		key: "VN"
	},
	{
		name: "Vaslui",
		key: "VS"
	}
];
var SE$1 = [
	{
		name: "Stockholms län",
		key: "AB"
	},
	{
		name: "Västerbottens län",
		key: "AC"
	},
	{
		name: "Norrbottens län",
		key: "BD"
	},
	{
		name: "Uppsala län",
		key: "C"
	},
	{
		name: "Södermanlands län",
		key: "D"
	},
	{
		name: "Östergötlands län",
		key: "E"
	},
	{
		name: "Jönköpings län",
		key: "F"
	},
	{
		name: "Kronoborgs län",
		key: "G"
	},
	{
		name: "Kalmar län",
		key: "H"
	},
	{
		name: "Gotlands län",
		key: "I"
	},
	{
		name: "Blekinge län",
		key: "K"
	},
	{
		name: "Skåne län",
		key: "M"
	},
	{
		name: "Hallands län",
		key: "N"
	},
	{
		name: "Västra Götalands län",
		key: "O"
	},
	{
		name: "Värmlands län",
		key: "S"
	},
	{
		name: "Örebro län",
		key: "T"
	},
	{
		name: "Västmanlands län",
		key: "U"
	},
	{
		name: "Dalarnes län",
		key: "W"
	},
	{
		name: "Gävleborgs län",
		key: "X"
	},
	{
		name: "Västernorrlands län",
		key: "Y"
	},
	{
		name: "Jämtlands län",
		key: "Z"
	}
];
var SH$1 = [
	{
		name: "Ascension",
		key: "AC"
	},
	{
		name: "Saint Helena",
		key: "HL"
	},
	{
		name: "Tristan da Cunha",
		key: "TA"
	}
];
var SL$1 = [
	{
		name: "Eastern",
		key: "E"
	},
	{
		name: "Northern",
		key: "N"
	},
	{
		name: "Southern",
		key: "S"
	},
	{
		name: "Western Area",
		key: "W"
	}
];
var SN$1 = [
	{
		name: "Diourbel",
		key: "DB"
	},
	{
		name: "Dakar",
		key: "DK"
	},
	{
		name: "Fatick",
		key: "FK"
	},
	{
		name: "Kaffrine",
		key: "KA"
	},
	{
		name: "Kolda",
		key: "KD"
	},
	{
		name: "Kédougou",
		key: "KE"
	},
	{
		name: "Kaolack",
		key: "KL"
	},
	{
		name: "Louga",
		key: "LG"
	},
	{
		name: "Matam",
		key: "MT"
	},
	{
		name: "Sédhiou",
		key: "SE"
	},
	{
		name: "Saint-Louis",
		key: "SL"
	},
	{
		name: "Tambacounda",
		key: "TC"
	},
	{
		name: "Thiès",
		key: "TH"
	},
	{
		name: "Ziguinchor",
		key: "ZG"
	}
];
var SO$1 = [
	{
		name: "Awdal",
		key: "AW"
	},
	{
		name: "Bakool",
		key: "BK"
	},
	{
		name: "Banaadir",
		key: "BN"
	},
	{
		name: "Bari",
		key: "BR"
	},
	{
		name: "Bay",
		key: "BY"
	},
	{
		name: "Galguduud",
		key: "GA"
	},
	{
		name: "Gedo",
		key: "GE"
	},
	{
		name: "Hiiraan",
		key: "HI"
	},
	{
		name: "Jubbada Dhexe",
		key: "JD"
	},
	{
		name: "Jubbada Hoose",
		key: "JH"
	},
	{
		name: "Mudug",
		key: "MU"
	},
	{
		name: "Nugaal",
		key: "NU"
	},
	{
		name: "Sanaag",
		key: "SA"
	},
	{
		name: "Shabeellaha Dhexe",
		key: "SD"
	},
	{
		name: "Shabeellaha Hoose",
		key: "SH"
	},
	{
		name: "Sool",
		key: "SO"
	},
	{
		name: "Togdheer",
		key: "TO"
	},
	{
		name: "Woqooyi Galbeed",
		key: "WO"
	}
];
var SR$1 = [
	{
		name: "Brokopondo",
		key: "BR"
	},
	{
		name: "Commewijne",
		key: "CM"
	},
	{
		name: "Coronie",
		key: "CR"
	},
	{
		name: "Marowijne",
		key: "MA"
	},
	{
		name: "Nickerie",
		key: "NI"
	},
	{
		name: "Paramaribo",
		key: "PM"
	},
	{
		name: "Para",
		key: "PR"
	},
	{
		name: "Saramacca",
		key: "SA"
	},
	{
		name: "Sipaliwini",
		key: "SI"
	},
	{
		name: "Wanica",
		key: "WA"
	}
];
var SS$1 = [
	{
		name: "Northern Bahr el Ghazal",
		key: "BN"
	},
	{
		name: "Western Bahr el Ghazal",
		key: "BW"
	},
	{
		name: "Central Equatoria",
		key: "EC"
	},
	{
		name: "Eastern Equatoria",
		key: "EE"
	},
	{
		name: "Western Equatoria",
		key: "EW"
	},
	{
		name: "Jonglei",
		key: "JG"
	},
	{
		name: "Lakes",
		key: "LK"
	},
	{
		name: "Upper Nile",
		key: "NU"
	},
	{
		name: "Unity",
		key: "UY"
	},
	{
		name: "Warrap",
		key: "WR"
	}
];
var SV$1 = [
	{
		name: "Ahuachapán",
		key: "AH"
	},
	{
		name: "Cabañas",
		key: "CA"
	},
	{
		name: "Chalatenango",
		key: "CH"
	},
	{
		name: "Cuscatlán",
		key: "CU"
	},
	{
		name: "La Libertad",
		key: "LI"
	},
	{
		name: "Morazán",
		key: "MO"
	},
	{
		name: "La Paz",
		key: "PA"
	},
	{
		name: "Santa Ana",
		key: "SA"
	},
	{
		name: "San Miguel",
		key: "SM"
	},
	{
		name: "Sonsonate",
		key: "SO"
	},
	{
		name: "San Salvador",
		key: "SS"
	},
	{
		name: "San Vicente",
		key: "SV"
	},
	{
		name: "La Unión",
		key: "UN"
	},
	{
		name: "Usulután",
		key: "US"
	}
];
var TD$1 = [
	{
		name: "Batha",
		key: "BA"
	},
	{
		name: "Baḩr al Ghazāl",
		key: "BG"
	},
	{
		name: "Būrkū",
		key: "BO"
	},
	{
		name: "Chari-Baguirmi",
		key: "CB"
	},
	{
		name: "Ennedi-Est",
		key: "EE"
	},
	{
		name: "Ennedi-Ouest",
		key: "EO"
	},
	{
		name: "Guéra",
		key: "GR"
	},
	{
		name: "Hadjer Lamis",
		key: "HL"
	},
	{
		name: "Kanem",
		key: "KA"
	},
	{
		name: "Lac",
		key: "LC"
	},
	{
		name: "Logone-Occidental",
		key: "LO"
	},
	{
		name: "Logone-Oriental",
		key: "LR"
	},
	{
		name: "Mandoul",
		key: "MA"
	},
	{
		name: "Moyen-Chari",
		key: "MC"
	},
	{
		name: "Mayo‐Kebbi‐Est",
		key: "ME"
	},
	{
		name: "Mayo‐Kebbi‐Ouest",
		key: "MO"
	},
	{
		name: "Ville de Ndjamena",
		key: "ND"
	},
	{
		name: "Ouaddaï",
		key: "OD"
	},
	{
		name: "Salamat",
		key: "SA"
	},
	{
		name: "Sīlā",
		key: "SI"
	},
	{
		name: "Tandjilé",
		key: "TA"
	},
	{
		name: "Tibastī",
		key: "TI"
	},
	{
		name: "Wadi Fira",
		key: "WF"
	}
];
var TG$1 = [
	{
		name: "Centrale",
		key: "C"
	},
	{
		name: "Kara",
		key: "K"
	},
	{
		name: "Maritime",
		key: "M"
	},
	{
		name: "Plateaux",
		key: "P"
	},
	{
		name: "Savanes",
		key: "S"
	}
];
var TL$1 = [
	{
		name: "Aileu",
		key: "AL"
	},
	{
		name: "Ainaro",
		key: "AN"
	},
	{
		name: "Baucau",
		key: "BA"
	},
	{
		name: "Bobonaro",
		key: "BO"
	},
	{
		name: "Cova Lima",
		key: "CO"
	},
	{
		name: "Díli",
		key: "DI"
	},
	{
		name: "Ermera",
		key: "ER"
	},
	{
		name: "Lautem",
		key: "LA"
	},
	{
		name: "Liquiça",
		key: "LI"
	},
	{
		name: "Manufahi",
		key: "MF"
	},
	{
		name: "Manatuto",
		key: "MT"
	},
	{
		name: "Oecussi",
		key: "OE"
	},
	{
		name: "Viqueque",
		key: "VI"
	}
];
var TT$1 = [
	{
		name: "Arima",
		key: "ARI"
	},
	{
		name: "Chaguanas",
		key: "CHA"
	},
	{
		name: "Couva-Tabaquite-Talparo",
		key: "CTT"
	},
	{
		name: "Diego Martin",
		key: "DMN"
	},
	{
		name: "Mayaro-Rio Claro",
		key: "MRC"
	},
	{
		name: "Penal-Debe",
		key: "PED"
	},
	{
		name: "Port of Spain",
		key: "POS"
	},
	{
		name: "Princes Town",
		key: "PRT"
	},
	{
		name: "Point Fortin",
		key: "PTF"
	},
	{
		name: "San Fernando",
		key: "SFO"
	},
	{
		name: "Sangre Grande",
		key: "SGE"
	},
	{
		name: "Siparia",
		key: "SIP"
	},
	{
		name: "San Juan-Laventille",
		key: "SJL"
	},
	{
		name: "Tobago",
		key: "TOB"
	},
	{
		name: "Tunapuna-Piarco",
		key: "TUP"
	}
];
var US$1 = [
	{
		name: "Alabama",
		key: "AL"
	},
	{
		name: "Alaska",
		key: "AK"
	},
	{
		name: "American Samoa",
		key: "AS"
	},
	{
		name: "Arizona",
		key: "AZ"
	},
	{
		name: "Arkansas",
		key: "AR"
	},
	{
		name: "California",
		key: "CA"
	},
	{
		name: "Colorado",
		key: "CO"
	},
	{
		name: "Connecticut",
		key: "CT"
	},
	{
		name: "Delaware",
		key: "DE"
	},
	{
		name: "District of Columbia",
		key: "DC"
	},
	{
		name: "Florida",
		key: "FL"
	},
	{
		name: "Micronesia",
		key: "FM"
	},
	{
		name: "Georgia",
		key: "GA"
	},
	{
		name: "Guam",
		key: "GU"
	},
	{
		name: "Hawaii",
		key: "HI"
	},
	{
		name: "Idaho",
		key: "ID"
	},
	{
		name: "Illinois",
		key: "IL"
	},
	{
		name: "Indiana",
		key: "IN"
	},
	{
		name: "Iowa",
		key: "IA"
	},
	{
		name: "Kansas",
		key: "KS"
	},
	{
		name: "Kentucky",
		key: "KY"
	},
	{
		name: "Louisiana",
		key: "LA"
	},
	{
		name: "Maine",
		key: "ME"
	},
	{
		name: "Maryland",
		key: "MD"
	},
	{
		name: "Massachusetts",
		key: "MA"
	},
	{
		name: "Marshall Islands",
		key: "MH"
	},
	{
		name: "Michigan",
		key: "MI"
	},
	{
		name: "Minnesota",
		key: "MN"
	},
	{
		name: "Mississippi",
		key: "MS"
	},
	{
		name: "Missouri",
		key: "MO"
	},
	{
		name: "Northern Mariana Islands",
		key: "MP"
	},
	{
		name: "Montana",
		key: "MT"
	},
	{
		name: "Nebraska",
		key: "NE"
	},
	{
		name: "Nevada",
		key: "NV"
	},
	{
		name: "New Hampshire",
		key: "NH"
	},
	{
		name: "New Jersey",
		key: "NJ"
	},
	{
		name: "New Mexico",
		key: "NM"
	},
	{
		name: "New York",
		key: "NY"
	},
	{
		name: "North Carolina",
		key: "NC"
	},
	{
		name: "North Dakota",
		key: "ND"
	},
	{
		name: "Ohio",
		key: "OH"
	},
	{
		name: "Oklahoma",
		key: "OK"
	},
	{
		name: "Oregon",
		key: "OR"
	},
	{
		name: "Pennsylvania",
		key: "PA"
	},
	{
		name: "Puerto Rico",
		key: "PR"
	},
	{
		name: "Palau",
		key: "PW"
	},
	{
		name: "Rhode Island",
		key: "RI"
	},
	{
		name: "South Carolina",
		key: "SC"
	},
	{
		name: "South Dakota",
		key: "SD"
	},
	{
		name: "Tennessee",
		key: "TN"
	},
	{
		name: "Texas",
		key: "TX"
	},
	{
		name: "US Minor Outlying Islands",
		key: "UM"
	},
	{
		name: "Utah",
		key: "UT"
	},
	{
		name: "Vermont",
		key: "VT"
	},
	{
		name: "Virginia",
		key: "VA"
	},
	{
		name: "US Virgin Islands",
		key: "VI"
	},
	{
		name: "Washington",
		key: "WA"
	},
	{
		name: "West Virginia",
		key: "WV"
	},
	{
		name: "Wisconsin",
		key: "WI"
	},
	{
		name: "Wyoming",
		key: "WY"
	}
];
var UY$1 = [
	{
		name: "Artigas",
		key: "AR"
	},
	{
		name: "Canelones",
		key: "CA"
	},
	{
		name: "Cerro Largo",
		key: "CL"
	},
	{
		name: "Colonia",
		key: "CO"
	},
	{
		name: "Durazno",
		key: "DU"
	},
	{
		name: "Florida",
		key: "FD"
	},
	{
		name: "Flores",
		key: "FS"
	},
	{
		name: "Lavalleja",
		key: "LA"
	},
	{
		name: "Maldonado",
		key: "MA"
	},
	{
		name: "Montevideo",
		key: "MO"
	},
	{
		name: "Paysandú",
		key: "PA"
	},
	{
		name: "Río Negro",
		key: "RN"
	},
	{
		name: "Rocha",
		key: "RO"
	},
	{
		name: "Rivera",
		key: "RV"
	},
	{
		name: "Salto",
		key: "SA"
	},
	{
		name: "San José",
		key: "SJ"
	},
	{
		name: "Soriano",
		key: "SO"
	},
	{
		name: "Tacuarembó",
		key: "TA"
	},
	{
		name: "Treinta y Tres",
		key: "TT"
	}
];
var VE$1 = [
	{
		name: "Distrito Capital",
		key: "A"
	},
	{
		name: "Anzoátegui",
		key: "B"
	},
	{
		name: "Apure",
		key: "C"
	},
	{
		name: "Aragua",
		key: "D"
	},
	{
		name: "Barinas",
		key: "E"
	},
	{
		name: "Bolívar",
		key: "F"
	},
	{
		name: "Carabobo",
		key: "G"
	},
	{
		name: "Cojedes",
		key: "H"
	},
	{
		name: "Falcón",
		key: "I"
	},
	{
		name: "Guárico",
		key: "J"
	},
	{
		name: "Lara",
		key: "K"
	},
	{
		name: "Mérida",
		key: "L"
	},
	{
		name: "Miranda",
		key: "M"
	},
	{
		name: "Monagas",
		key: "N"
	},
	{
		name: "Nueva Esparta",
		key: "O"
	},
	{
		name: "Portuguesa",
		key: "P"
	},
	{
		name: "Sucre",
		key: "R"
	},
	{
		name: "Táchira",
		key: "S"
	},
	{
		name: "Trujillo",
		key: "T"
	},
	{
		name: "Yaracuy",
		key: "U"
	},
	{
		name: "Zulia",
		key: "V"
	},
	{
		name: "Dependencias Federales",
		key: "W"
	},
	{
		name: "vargas",
		key: "X"
	},
	{
		name: "Delta Amacuro",
		key: "Y"
	},
	{
		name: "Amazonas",
		key: "Z"
	}
];
var ZA$1 = [
	{
		name: "Eastern Cape",
		key: "EC"
	},
	{
		name: "Free State",
		key: "FS"
	},
	{
		name: "Gauteng",
		key: "GT"
	},
	{
		name: "Limpopo",
		key: "LP"
	},
	{
		name: "Mpumalanga",
		key: "MP"
	},
	{
		name: "Northern Cape",
		key: "NC"
	},
	{
		name: "Kwazulu-Natal",
		key: "NL"
	},
	{
		name: "North-West",
		key: "NW"
	},
	{
		name: "Western Cape",
		key: "WC"
	}
];
var ZW$1 = [
	{
		name: "Bulawayo",
		key: "BU"
	},
	{
		name: "Harare",
		key: "HA"
	},
	{
		name: "Manicaland",
		key: "MA"
	},
	{
		name: "Mashonaland Central",
		key: "MC"
	},
	{
		name: "Mashonaland East",
		key: "ME"
	},
	{
		name: "Midlands",
		key: "MI"
	},
	{
		name: "Matabeleland North",
		key: "MN"
	},
	{
		name: "Matabeleland South",
		key: "MS"
	},
	{
		name: "Masvingo",
		key: "MV"
	},
	{
		name: "Mashonaland West",
		key: "MW"
	}
];
var stateCodes = {
	AM: AM$1,
	AO: AO$1,
	AR: AR$1,
	AU: AU$1,
	AZ: AZ$1,
	BA: BA$1,
	BE: BE$1,
	BF: BF$1,
	BI: BI$1,
	BJ: BJ$1,
	BN: BN$1,
	BO: BO$1,
	BR: BR$1,
	BW: BW$1,
	BZ: BZ$1,
	CA: CA$1,
	CD: CD$1,
	CF: CF$1,
	CH: CH$1,
	CI: CI$1,
	CL: CL$1,
	CM: CM$1,
	CO: CO$1,
	CR: CR$1,
	CV: CV$1,
	DE: DE$1,
	DJ: DJ$1,
	EC: EC$1,
	ES: ES$1,
	FM: FM$1,
	FR: FR$1,
	GB: GB$1,
	GH: GH$1,
	GL: GL$1,
	GM: GM$1,
	GN: GN$1,
	GQ: GQ$1,
	GT: GT$1,
	GW: GW$1,
	GY: GY$1,
	HN: HN$1,
	HT: HT$1,
	HU: HU$1,
	IE: IE$1,
	IN: IN$1,
	IT: IT$1,
	KI: KI$1,
	KM: KM$1,
	LR: LR$1,
	LS: LS$1,
	LU: LU$1,
	MD: MD$1,
	MG: MG$1,
	MX: MX$1,
	MZ: MZ$1,
	NA: NA$1,
	NG: NG$1,
	NI: NI$1,
	NL: NL$1,
	NZ: NZ$1,
	PE: PE$1,
	PG: PG$1,
	PK: PK$1,
	PL: PL$1,
	RO: RO$1,
	SE: SE$1,
	SH: SH$1,
	SL: SL$1,
	SN: SN$1,
	SO: SO$1,
	SR: SR$1,
	SS: SS$1,
	SV: SV$1,
	TD: TD$1,
	TG: TG$1,
	TL: TL$1,
	TT: TT$1,
	US: US$1,
	UY: UY$1,
	VE: VE$1,
	ZA: ZA$1,
	ZW: ZW$1
};

var stateCodes$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	AM: AM$1,
	AO: AO$1,
	AR: AR$1,
	AU: AU$1,
	AZ: AZ$1,
	BA: BA$1,
	BE: BE$1,
	BF: BF$1,
	BI: BI$1,
	BJ: BJ$1,
	BN: BN$1,
	BO: BO$1,
	BR: BR$1,
	BW: BW$1,
	BZ: BZ$1,
	CA: CA$1,
	CD: CD$1,
	CF: CF$1,
	CH: CH$1,
	CI: CI$1,
	CL: CL$1,
	CM: CM$1,
	CO: CO$1,
	CR: CR$1,
	CV: CV$1,
	DE: DE$1,
	DJ: DJ$1,
	EC: EC$1,
	ES: ES$1,
	FM: FM$1,
	FR: FR$1,
	GB: GB$1,
	GH: GH$1,
	GL: GL$1,
	GM: GM$1,
	GN: GN$1,
	GQ: GQ$1,
	GT: GT$1,
	GW: GW$1,
	GY: GY$1,
	HN: HN$1,
	HT: HT$1,
	HU: HU$1,
	IE: IE$1,
	IN: IN$1,
	IT: IT$1,
	KI: KI$1,
	KM: KM$1,
	LR: LR$1,
	LS: LS$1,
	LU: LU$1,
	MD: MD$1,
	MG: MG$1,
	MX: MX$1,
	MZ: MZ$1,
	NA: NA$1,
	NG: NG$1,
	NI: NI$1,
	NL: NL$1,
	NZ: NZ$1,
	PE: PE$1,
	PG: PG$1,
	PK: PK$1,
	PL: PL$1,
	RO: RO$1,
	SE: SE$1,
	SH: SH$1,
	SL: SL$1,
	SN: SN$1,
	SO: SO$1,
	SR: SR$1,
	SS: SS$1,
	SV: SV$1,
	TD: TD$1,
	TG: TG$1,
	TL: TL$1,
	TT: TT$1,
	US: US$1,
	UY: UY$1,
	VE: VE$1,
	ZA: ZA$1,
	ZW: ZW$1,
	'default': stateCodes
});

var ES$2 = [
	{
		name: "Alicante",
		key: "A"
	},
	{
		name: "Albacete",
		key: "AB"
	},
	{
		name: "Almería",
		key: "AL"
	},
	{
		name: "Ávila",
		key: "AV"
	},
	{
		name: "Barcelona",
		key: "B"
	},
	{
		name: "Badajoz",
		key: "BA"
	},
	{
		name: "Vizcaya",
		key: "BI"
	},
	{
		name: "Burgos",
		key: "BU"
	},
	{
		name: "A Coruña",
		key: "C"
	},
	{
		name: "Cádiz",
		key: "CA"
	},
	{
		name: "Cáceres",
		key: "CC"
	},
	{
		name: "Córdoba",
		key: "CO"
	},
	{
		name: "Ciudad Real",
		key: "CR"
	},
	{
		name: "Castellón",
		key: "CS"
	},
	{
		name: "Cuenca",
		key: "CU"
	},
	{
		name: "Las Palmas",
		key: "GC"
	},
	{
		name: "Girona",
		key: "GI"
	},
	{
		name: "Granada",
		key: "GR"
	},
	{
		name: "Guadalajara",
		key: "GU"
	},
	{
		name: "Huelva",
		key: "H"
	},
	{
		name: "Huesca",
		key: "HU"
	},
	{
		name: "Jaén",
		key: "J"
	},
	{
		name: "Lérida",
		key: "L"
	},
	{
		name: "León",
		key: "LE"
	},
	{
		name: "La Rioja",
		key: "LO"
	},
	{
		name: "Lugo",
		key: "LU"
	},
	{
		name: "Comunidad de Madrid",
		key: "M"
	},
	{
		name: "Málaga",
		key: "MA"
	},
	{
		name: "Región de Murcia",
		key: "MU"
	},
	{
		name: "Navarra",
		key: "NA"
	},
	{
		name: "Asturias",
		key: "O"
	},
	{
		name: "Ourense",
		key: "OR"
	},
	{
		name: "Palencia",
		key: "P"
	},
	{
		name: "Islas Baleares",
		key: "PM"
	},
	{
		name: "Pontevedra",
		key: "PO"
	},
	{
		name: "Cantabria",
		key: "S"
	},
	{
		name: "Salamanca",
		key: "SA"
	},
	{
		name: "Sevilla",
		key: "SE"
	},
	{
		name: "Segovia",
		key: "SG"
	},
	{
		name: "Soria",
		key: "SO"
	},
	{
		name: "Guipúzcoa",
		key: "SS"
	},
	{
		name: "Tarragona",
		key: "T"
	},
	{
		name: "Teruel",
		key: "TE"
	},
	{
		name: "Santa Cruz de Tenerife",
		key: "TF"
	},
	{
		name: "Toledo",
		key: "TO"
	},
	{
		name: "Valencia",
		key: "V"
	},
	{
		name: "Valladolid",
		key: "VA"
	},
	{
		name: "Álava",
		key: "VI"
	},
	{
		name: "Zaragoza",
		key: "Z"
	},
	{
		name: "Zamora",
		key: "ZA"
	}
];
var GB$2 = [
	{
		name: "County Armagh",
		key: "ABC"
	},
	{
		name: "Aberdeenshire",
		key: "ABD"
	},
	{
		name: "Aberdeen City",
		key: "ABE"
	},
	{
		name: "Argyll and Bute",
		key: "AGB"
	},
	{
		name: "Isle of Anglesey",
		key: "AGY"
	},
	{
		name: "Ards and North Down",
		key: "AND"
	},
	{
		name: "Antrim and Newtownabbey",
		key: "ANN"
	},
	{
		name: "Angus",
		key: "ANS"
	},
	{
		name: "Armagh",
		key: "ARM"
	},
	{
		name: "Bath and North East Somerset",
		key: "BAS"
	},
	{
		name: "Blackburn with Darwen",
		key: "BBD"
	},
	{
		name: "Bedford",
		key: "BDF"
	},
	{
		name: "London Borough of Barking and Dagenham",
		key: "BDG"
	},
	{
		name: "London Borough of Brent",
		key: "BEN"
	},
	{
		name: "London Borough of Bexley",
		key: "BEX"
	},
	{
		name: "Belfast",
		key: "BFS"
	},
	{
		name: "Bridgend",
		key: "BGE"
	},
	{
		name: "Blaenau Gwent",
		key: "BGW"
	},
	{
		name: "Birmingham",
		key: "BIR"
	},
	{
		name: "Buckinghamshire",
		key: "BKM"
	},
	{
		name: "Bournemouth",
		key: "BMH"
	},
	{
		name: "London Borough of Barnet",
		key: "BNE"
	},
	{
		name: "Brighton and Hove",
		key: "BNH"
	},
	{
		name: "Barnsley",
		key: "BNS"
	},
	{
		name: "Bolton",
		key: "BOL"
	},
	{
		name: "Blackpool",
		key: "BPL"
	},
	{
		name: "Bracknell Forest",
		key: "BRC"
	},
	{
		name: "Bradford",
		key: "BRD"
	},
	{
		name: "London Borough of Bromley",
		key: "BRY"
	},
	{
		name: "City of Bristol",
		key: "BST"
	},
	{
		name: "Bury",
		key: "BUR"
	},
	{
		name: "Cambridgeshire",
		key: "CAM"
	},
	{
		name: "Caerphilly",
		key: "CAY"
	},
	{
		name: "Central Bedfordshire",
		key: "CBF"
	},
	{
		name: "Causeway Coast and Glens",
		key: "CCG"
	},
	{
		name: "Ceredigion",
		key: "CGN"
	},
	{
		name: "Cheshire East",
		key: "CHE"
	},
	{
		name: "Cheshire West and Chester",
		key: "CHW"
	},
	{
		name: "Calderdale",
		key: "CLD"
	},
	{
		name: "Clackmannanshire",
		key: "CLK"
	},
	{
		name: "Cumbria",
		key: "CMA"
	},
	{
		name: "London Borough of Camden",
		key: "CMD"
	},
	{
		name: "Carmarthenshire",
		key: "CMN"
	},
	{
		name: "Cornwall",
		key: "CON"
	},
	{
		name: "Coventry",
		key: "COV"
	},
	{
		name: "Cardiff",
		key: "CRF"
	},
	{
		name: "London Borough of Croydon",
		key: "CRY"
	},
	{
		name: "Conwy",
		key: "CWY"
	},
	{
		name: "Darlington",
		key: "DAL"
	},
	{
		name: "Derbyshire",
		key: "DBY"
	},
	{
		name: "Denbighshire",
		key: "DEN"
	},
	{
		name: "Derby",
		key: "DER"
	},
	{
		name: "Devon",
		key: "DEV"
	},
	{
		name: "Dumfries and Galloway",
		key: "DGY"
	},
	{
		name: "Doncaster",
		key: "DNC"
	},
	{
		name: "Dundee City",
		key: "DND"
	},
	{
		name: "Dorset",
		key: "DOR"
	},
	{
		name: "Derry and Strabane",
		key: "DRS"
	},
	{
		name: "Dudley",
		key: "DUD"
	},
	{
		name: "Durham",
		key: "DUR"
	},
	{
		name: "London Borough of Ealing",
		key: "EAL"
	},
	{
		name: "East Ayrshire",
		key: "EAY"
	},
	{
		name: "City of Edinburgh",
		key: "EDH"
	},
	{
		name: "East Dunbartonshire",
		key: "EDU"
	},
	{
		name: "East Lothian",
		key: "ELN"
	},
	{
		name: "Eilean Siar",
		key: "ELS"
	},
	{
		name: "Enfield",
		key: "ENF"
	},
	{
		name: "East Renfrewshire",
		key: "ERW"
	},
	{
		name: "East Riding of Yorkshire",
		key: "ERY"
	},
	{
		name: "Essex",
		key: "ESS"
	},
	{
		name: "East Sussex",
		key: "ESX"
	},
	{
		name: "Falkirk",
		key: "FAL"
	},
	{
		name: "Fife",
		key: "FIF"
	},
	{
		name: "Flintshire",
		key: "FLN"
	},
	{
		name: "Fermanagh and Omagh",
		key: "FMO"
	},
	{
		name: "Gateshead",
		key: "GAT"
	},
	{
		name: "Glasgow City",
		key: "GLG"
	},
	{
		name: "Gloucestershire",
		key: "GLS"
	},
	{
		name: "Royal Borough of Greenwich",
		key: "GRE"
	},
	{
		name: "Gwynedd",
		key: "GWN"
	},
	{
		name: "Halton",
		key: "HAL"
	},
	{
		name: "Hampshire",
		key: "HAM"
	},
	{
		name: "London Borough of Havering",
		key: "HAV"
	},
	{
		name: "London Borough of Hackney",
		key: "HCK"
	},
	{
		name: "Herefordshire",
		key: "HEF"
	},
	{
		name: "London Borough of Hillingdon",
		key: "HIL"
	},
	{
		name: "Highland",
		key: "HLD"
	},
	{
		name: "London Borough of Hammersmith and Fulham",
		key: "HMF"
	},
	{
		name: "London Borough of Hounslow",
		key: "HNS"
	},
	{
		name: "Hartlepool",
		key: "HPL"
	},
	{
		name: "Hertfordshire",
		key: "HRT"
	},
	{
		name: "London Borough of Harrow",
		key: "HRW"
	},
	{
		name: "London Borough of Haringey",
		key: "HRY"
	},
	{
		name: "Isles of Scilly",
		key: "IOS"
	},
	{
		name: "Isle of Wight",
		key: "IOW"
	},
	{
		name: "London Borough of Islington",
		key: "ISL"
	},
	{
		name: "Inverclyde",
		key: "IVC"
	},
	{
		name: "Royal Borough of Kensington and Chelsea",
		key: "KEC"
	},
	{
		name: "Kent",
		key: "KEN"
	},
	{
		name: "Kingston upon Hull",
		key: "KHL"
	},
	{
		name: "Kirklees",
		key: "KIR"
	},
	{
		name: "Royal Borough of Kingston upon Thames",
		key: "KTT"
	},
	{
		name: "Knowsley",
		key: "KWL"
	},
	{
		name: "Lancashire",
		key: "LAN"
	},
	{
		name: "Lisburn and Castlereagh",
		key: "LBC"
	},
	{
		name: "London Borough of Lambeth",
		key: "LBH"
	},
	{
		name: "Leicester",
		key: "LCE"
	},
	{
		name: "Leeds",
		key: "LDS"
	},
	{
		name: "Leicestershire",
		key: "LEC"
	},
	{
		name: "London Borough of Lewisham",
		key: "LEW"
	},
	{
		name: "Lincolnshire",
		key: "LIN"
	},
	{
		name: "Liverpool",
		key: "LIV"
	},
	{
		name: "City of London",
		key: "LND"
	},
	{
		name: "Luton",
		key: "LUT"
	},
	{
		name: "Manchester",
		key: "MAN"
	},
	{
		name: "Middlesbrough",
		key: "MDB"
	},
	{
		name: "Medway",
		key: "MDW"
	},
	{
		name: "Mid and East Antrim",
		key: "MEA"
	},
	{
		name: "Milton Keynes",
		key: "MIK"
	},
	{
		name: "Midlothian",
		key: "MLN"
	},
	{
		name: "Monmouthshire",
		key: "MON"
	},
	{
		name: "London Borough of Merton",
		key: "MRT"
	},
	{
		name: "Moray",
		key: "MRY"
	},
	{
		name: "Merthyr Tydfil",
		key: "MTY"
	},
	{
		name: "Mid Ulster",
		key: "MUL"
	},
	{
		name: "North Ayrshire",
		key: "NAY"
	},
	{
		name: "Northumberland",
		key: "NBL"
	},
	{
		name: "North East Lincolnshire",
		key: "NEL"
	},
	{
		name: "Newcastle upon Tyne",
		key: "NET"
	},
	{
		name: "Norfolk",
		key: "NFK"
	},
	{
		name: "Nottingham",
		key: "NGM"
	},
	{
		name: "North Lanarkshire",
		key: "NLK"
	},
	{
		name: "North Lincolnshire",
		key: "NLN"
	},
	{
		name: "County Down",
		key: "NMD"
	},
	{
		name: "North Somerset",
		key: "NSM"
	},
	{
		name: "Northamptonshire",
		key: "NTH"
	},
	{
		name: "Neath Port Talbot",
		key: "NTL"
	},
	{
		name: "Nottinghamshire",
		key: "NTT"
	},
	{
		name: "North Tyneside",
		key: "NTY"
	},
	{
		name: "London Borough of Newham",
		key: "NWM"
	},
	{
		name: "Newport",
		key: "NWP"
	},
	{
		name: "North Yorkshire",
		key: "NYK"
	},
	{
		name: "Oldham",
		key: "OLD"
	},
	{
		name: "Orkney Islands",
		key: "ORK"
	},
	{
		name: "Oxfordshire",
		key: "OXF"
	},
	{
		name: "Pembrokeshire",
		key: "PEM"
	},
	{
		name: "Perth and Kinross",
		key: "PKN"
	},
	{
		name: "Plymouth",
		key: "PLY"
	},
	{
		name: "Poole",
		key: "POL"
	},
	{
		name: "Portsmouth",
		key: "POR"
	},
	{
		name: "Powys",
		key: "POW"
	},
	{
		name: "Peterborough",
		key: "PTE"
	},
	{
		name: "Redcar and Cleveland",
		key: "RCC"
	},
	{
		name: "Rochdale",
		key: "RCH"
	},
	{
		name: "Rhondda Cynon Taf",
		key: "RCT"
	},
	{
		name: "London Borough of Redbridge",
		key: "RDB"
	},
	{
		name: "Reading",
		key: "RDG"
	},
	{
		name: "Renfrewshire",
		key: "RFW"
	},
	{
		name: "London Borough of Richmond upon Thames",
		key: "RIC"
	},
	{
		name: "Rotherham",
		key: "ROT"
	},
	{
		name: "Rutland",
		key: "RUT"
	},
	{
		name: "Sandwell",
		key: "SAW"
	},
	{
		name: "South Ayrshire",
		key: "SAY"
	},
	{
		name: "Scottish Borders",
		key: "SCB"
	},
	{
		name: "Suffolk",
		key: "SFK"
	},
	{
		name: "Sefton",
		key: "SFT"
	},
	{
		name: "South Gloucestershire",
		key: "SGC"
	},
	{
		name: "Sheffield",
		key: "SHF"
	},
	{
		name: "St. Helens",
		key: "SHN"
	},
	{
		name: "Shropshire",
		key: "SHR"
	},
	{
		name: "Stockport",
		key: "SKP"
	},
	{
		name: "Salford",
		key: "SLF"
	},
	{
		name: "Slough",
		key: "SLG"
	},
	{
		name: "South Lanarkshire",
		key: "SLK"
	},
	{
		name: "Sunderland",
		key: "SND"
	},
	{
		name: "Solihull",
		key: "SOL"
	},
	{
		name: "Somerset",
		key: "SOM"
	},
	{
		name: "Southend-on-Sea",
		key: "SOS"
	},
	{
		name: "Surrey",
		key: "SRY"
	},
	{
		name: "Stoke-on-Trent",
		key: "STE"
	},
	{
		name: "Stirling",
		key: "STG"
	},
	{
		name: "Southampton",
		key: "STH"
	},
	{
		name: "London Borough of Sutton",
		key: "STN"
	},
	{
		name: "Staffordshire",
		key: "STS"
	},
	{
		name: "Stockton-on-Tees",
		key: "STT"
	},
	{
		name: "South Tyneside",
		key: "STY"
	},
	{
		name: "Swansea",
		key: "SWA"
	},
	{
		name: "Swindon",
		key: "SWD"
	},
	{
		name: "London Borough of Southwark",
		key: "SWK"
	},
	{
		name: "Tameside",
		key: "TAM"
	},
	{
		name: "Telford and Wrekin",
		key: "TFW"
	},
	{
		name: "Thurrock",
		key: "THR"
	},
	{
		name: "Torbay",
		key: "TOB"
	},
	{
		name: "Torfaen",
		key: "TOF"
	},
	{
		name: "Trafford",
		key: "TRF"
	},
	{
		name: "London Borough of Tower Hamlets",
		key: "TWH"
	},
	{
		name: "Vale of Glamorgan",
		key: "VGL"
	},
	{
		name: "Warwickshire",
		key: "WAR"
	},
	{
		name: "West Berkshire",
		key: "WBK"
	},
	{
		name: "West Dunbartonshire",
		key: "WDU"
	},
	{
		name: "London Borough of Waltham Forest",
		key: "WFT"
	},
	{
		name: "Wigan",
		key: "WGN"
	},
	{
		name: "Wiltshire",
		key: "WIL"
	},
	{
		name: "Wakefield",
		key: "WKF"
	},
	{
		name: "Walsall",
		key: "WLL"
	},
	{
		name: "West Lothian",
		key: "WLN"
	},
	{
		name: "Wolverhampton",
		key: "WLV"
	},
	{
		name: "London Borough of Wandsworth",
		key: "WND"
	},
	{
		name: "Windsor and Maidenhead",
		key: "WNM"
	},
	{
		name: "Wokingham",
		key: "WOK"
	},
	{
		name: "Worcestershire",
		key: "WOR"
	},
	{
		name: "Wirral",
		key: "WRL"
	},
	{
		name: "Warrington",
		key: "WRT"
	},
	{
		name: "Wrexham",
		key: "WRX"
	},
	{
		name: "Westminster",
		key: "WSM"
	},
	{
		name: "West Sussex",
		key: "WSX"
	},
	{
		name: "York",
		key: "YOR"
	},
	{
		name: "Shetland Islands",
		key: "ZET"
	}
];
var IE$2 = [
	{
		name: "County Clare",
		key: "CE"
	},
	{
		name: "County Cavan",
		key: "CN"
	},
	{
		name: "County Cork",
		key: "CO"
	},
	{
		name: "County Carlow",
		key: "CW"
	},
	{
		name: "County Dublin",
		key: "D"
	},
	{
		name: "County Donegal",
		key: "DL"
	},
	{
		name: "County Galway",
		key: "G"
	},
	{
		name: "County Kildare",
		key: "KE"
	},
	{
		name: "County Kilkenny",
		key: "KK"
	},
	{
		name: "County Kerry",
		key: "KY"
	},
	{
		name: "County Longford",
		key: "LD"
	},
	{
		name: "County Louth",
		key: "LH"
	},
	{
		name: "County Limerick",
		key: "LK"
	},
	{
		name: "County Leitrim",
		key: "LM"
	},
	{
		name: "County Laois",
		key: "LS"
	},
	{
		name: "County Meath",
		key: "MH"
	},
	{
		name: "County Monaghan",
		key: "MN"
	},
	{
		name: "County Mayo",
		key: "MO"
	},
	{
		name: "County Offaly",
		key: "OY"
	},
	{
		name: "County Roscommon",
		key: "RN"
	},
	{
		name: "County Sligo",
		key: "SO"
	},
	{
		name: "County Tipperary",
		key: "TA"
	},
	{
		name: "County Waterford",
		key: "WD"
	},
	{
		name: "County Westmeath",
		key: "WH"
	},
	{
		name: "County Wicklow",
		key: "WW"
	},
	{
		name: "County Wexford",
		key: "WX"
	}
];
var IT$2 = [
	{
		name: "Agrigento",
		key: "AG"
	},
	{
		name: "Alessandria",
		key: "AL"
	},
	{
		name: "Ancona",
		key: "AN"
	},
	{
		name: "Aosta",
		key: "AO"
	},
	{
		name: "Ascoli Piceno",
		key: "AP"
	},
	{
		name: "L\\'Aquila",
		key: "AQ"
	},
	{
		name: "Arezzo",
		key: "AR"
	},
	{
		name: "Asti",
		key: "AT"
	},
	{
		name: "Avellino",
		key: "AV"
	},
	{
		name: "Bari",
		key: "BA"
	},
	{
		name: "Bergamo",
		key: "BG"
	},
	{
		name: "Biella",
		key: "BI"
	},
	{
		name: "Belluno",
		key: "BL"
	},
	{
		name: "Benevento",
		key: "BN"
	},
	{
		name: "Bologna",
		key: "BO"
	},
	{
		name: "Brindisi",
		key: "BR"
	},
	{
		name: "Brescia",
		key: "BS"
	},
	{
		name: "Barletta-Andria-Trani",
		key: "BT"
	},
	{
		name: "Bolzano",
		key: "BZ"
	},
	{
		name: "Cagliari",
		key: "CA"
	},
	{
		name: "Campobasso",
		key: "CB"
	},
	{
		name: "Caserta",
		key: "CE"
	},
	{
		name: "Chieti",
		key: "CH"
	},
	{
		name: "Carbonia-Iglesias",
		key: "CI"
	},
	{
		name: "Caltanissetta",
		key: "CL"
	},
	{
		name: "Cuneo",
		key: "CN"
	},
	{
		name: "Como",
		key: "CO"
	},
	{
		name: "Cremona",
		key: "CR"
	},
	{
		name: "Cosenza",
		key: "CS"
	},
	{
		name: "Catania",
		key: "CT"
	},
	{
		name: "Catanzaro",
		key: "CZ"
	},
	{
		name: "Enna",
		key: "EN"
	},
	{
		name: "Forlì-Cesena",
		key: "FC"
	},
	{
		name: "Ferrara",
		key: "FE"
	},
	{
		name: "Foggia",
		key: "FG"
	},
	{
		name: "Firenze",
		key: "FI"
	},
	{
		name: "Fermo",
		key: "FM"
	},
	{
		name: "Frosinone",
		key: "FR"
	},
	{
		name: "Genova",
		key: "GE"
	},
	{
		name: "Gorizia",
		key: "GO"
	},
	{
		name: "Grosseto",
		key: "GR"
	},
	{
		name: "Imperia",
		key: "IM"
	},
	{
		name: "Isernia",
		key: "IS"
	},
	{
		name: "Crotone",
		key: "KR"
	},
	{
		name: "Lecco",
		key: "LC"
	},
	{
		name: "Lecce",
		key: "LE"
	},
	{
		name: "Livorno",
		key: "LI"
	},
	{
		name: "Lodi",
		key: "LO"
	},
	{
		name: "Latina",
		key: "LT"
	},
	{
		name: "Lucca",
		key: "LU"
	},
	{
		name: "Monza e della Brianza",
		key: "MB"
	},
	{
		name: "Macerata",
		key: "MC"
	},
	{
		name: "Messina",
		key: "ME"
	},
	{
		name: "Milano",
		key: "MI"
	},
	{
		name: "Mantova",
		key: "MN"
	},
	{
		name: "Modena",
		key: "MO"
	},
	{
		name: "Massa-Carrara",
		key: "MS"
	},
	{
		name: "Matera",
		key: "MT"
	},
	{
		name: "Napoli",
		key: "NA"
	},
	{
		name: "Novara",
		key: "NO"
	},
	{
		name: "Nuoro",
		key: "NU"
	},
	{
		name: "Ogliastra",
		key: "OG"
	},
	{
		name: "Oristano",
		key: "OR"
	},
	{
		name: "Olbia-Tempio",
		key: "OT"
	},
	{
		name: "Palermo",
		key: "PA"
	},
	{
		name: "Piacenza",
		key: "PC"
	},
	{
		name: "Padova",
		key: "PD"
	},
	{
		name: "Pescara",
		key: "PE"
	},
	{
		name: "Perugia",
		key: "PG"
	},
	{
		name: "Pisa",
		key: "PI"
	},
	{
		name: "Pordenone",
		key: "PN"
	},
	{
		name: "Prato",
		key: "PO"
	},
	{
		name: "Parma",
		key: "PR"
	},
	{
		name: "Pistoia",
		key: "PT"
	},
	{
		name: "Pesaro e Urbino",
		key: "PU"
	},
	{
		name: "Pavia",
		key: "PV"
	},
	{
		name: "Potenza",
		key: "PZ"
	},
	{
		name: "Ravenna",
		key: "RA"
	},
	{
		name: "Reggio Calabria",
		key: "RC"
	},
	{
		name: "Reggio Emilia",
		key: "RE"
	},
	{
		name: "Ragusa",
		key: "RG"
	},
	{
		name: "Rieti",
		key: "RI"
	},
	{
		name: "Roma",
		key: "RM"
	},
	{
		name: "Rimini",
		key: "RN"
	},
	{
		name: "Rovigo",
		key: "RO"
	},
	{
		name: "Salerno",
		key: "SA"
	},
	{
		name: "Siena",
		key: "SI"
	},
	{
		name: "Sondrio",
		key: "SO"
	},
	{
		name: "La Spezia",
		key: "SP"
	},
	{
		name: "Siracusa",
		key: "SR"
	},
	{
		name: "Sassari",
		key: "SS"
	},
	{
		name: "Savona",
		key: "SV"
	},
	{
		name: "Taranto",
		key: "TA"
	},
	{
		name: "Teramo",
		key: "TE"
	},
	{
		name: "Trento",
		key: "TN"
	},
	{
		name: "Torino",
		key: "TO"
	},
	{
		name: "Trapani",
		key: "TP"
	},
	{
		name: "Terni",
		key: "TR"
	},
	{
		name: "Trieste",
		key: "TS"
	},
	{
		name: "Treviso",
		key: "TV"
	},
	{
		name: "Udine",
		key: "UD"
	},
	{
		name: "Varese",
		key: "VA"
	},
	{
		name: "Verbano-Cusio-Ossola",
		key: "VB"
	},
	{
		name: "Vercelli",
		key: "VC"
	},
	{
		name: "Venezia",
		key: "VE"
	},
	{
		name: "Vicenza",
		key: "VI"
	},
	{
		name: "Verona",
		key: "VR"
	},
	{
		name: "Medio Campidano",
		key: "VS"
	},
	{
		name: "Viterbo",
		key: "VT"
	},
	{
		name: "Vibo Valentia",
		key: "VV"
	}
];
var countyCodes = {
	ES: ES$2,
	GB: GB$2,
	IE: IE$2,
	IT: IT$2
};

var countyCodes$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	ES: ES$2,
	GB: GB$2,
	IE: IE$2,
	IT: IT$2,
	'default': countyCodes
});

var AD$1 = [
	"CA"
];
var AE$1 = [
	"AR",
	"EN"
];
var AF$1 = [
	"FA",
	"PS"
];
var AG$1 = [
	"EN"
];
var AI$1 = [
	"EN"
];
var AL$1 = [
	"SQ"
];
var AM$2 = [
	"HY"
];
var AO$2 = [
	"PT"
];
var AQ$1 = [
	"EN"
];
var AR$2 = [
	"ES"
];
var AS$1 = [
	"EN"
];
var AT$1 = [
	"DE"
];
var AU$2 = [
	"EN"
];
var AW$1 = [
	"NL"
];
var AX$1 = [
	"FI",
	"SE"
];
var AZ$2 = [
	"AZ"
];
var BA$2 = [
	"BS",
	"HR",
	"SR"
];
var BB$1 = [
	"EN"
];
var BD$1 = [
	"BN"
];
var BE$2 = [
	"FR",
	"NL",
	"DE"
];
var BF$2 = [
	"FR"
];
var BG$1 = [
	"BG"
];
var BH$1 = [
	"AR",
	"EN"
];
var BI$2 = [
	"EN"
];
var BJ$2 = [
	"FR"
];
var BL$1 = [
	"FR"
];
var BM$1 = [
	"EN"
];
var BN$2 = [
	"EN",
	"MS"
];
var BO$2 = [
	"ES"
];
var BQ$1 = [
	"NL",
	"EN"
];
var BR$2 = [
	"PT"
];
var BS$1 = [
	"EN"
];
var BT$1 = [
	"DZ"
];
var BV$1 = [
	"NO"
];
var BW$2 = [
	"EN"
];
var BY$1 = [
	"BY",
	"RU"
];
var BZ$2 = [
	"EN",
	"ES"
];
var CA$2 = [
	"EN",
	"FR"
];
var CC$1 = [
	"EN"
];
var CD$2 = [
	"FR"
];
var CF$2 = [
	"FR"
];
var CG$1 = [
	"FR"
];
var CH$2 = [
	"DE",
	"FR",
	"IT"
];
var CI$2 = [
	"FR"
];
var CK$1 = [
	"EN"
];
var CL$2 = [
	"ES"
];
var CM$2 = [
	"EN"
];
var CN$1 = [
	"ZH"
];
var CO$2 = [
	"ES"
];
var CR$2 = [
	"ES"
];
var CU$1 = [
	"ES"
];
var CV$2 = [
	"PT"
];
var CW$1 = [
	"EN",
	"NL"
];
var CX$1 = [
	"EN"
];
var CY$1 = [
	"HE"
];
var CZ$1 = [
	"CS"
];
var DE$2 = [
	"DE"
];
var DJ$2 = [
	"AR",
	"FR"
];
var DK$1 = [
	"DK"
];
var DM$1 = [
	"EN"
];
var DO$1 = [
	"ES"
];
var DZ$1 = [
	"AR",
	"FR"
];
var EC$2 = [
	"ES"
];
var EE$1 = [
	"ET"
];
var EG$1 = [
	"AR"
];
var EH$1 = [
	"AR"
];
var ER$1 = [
	"AR",
	"IT",
	"TI"
];
var ES$3 = [
	"CA",
	"ES",
	"EU",
	"GL"
];
var ET$1 = [
	"AM",
	"OM",
	"SO",
	"TI"
];
var FI$1 = [
	"FI",
	"SE"
];
var FJ$1 = [
	"EN"
];
var FK$1 = [
	"EN"
];
var FM$2 = [
	"EN"
];
var FO$1 = [
	"DK"
];
var FR$2 = [
	"FR"
];
var GA$1 = [
	"FR"
];
var GB$3 = [
	"EN"
];
var GD$1 = [
	"EN"
];
var GE$1 = [
	"KA"
];
var GG$1 = [
	"EN"
];
var GF$1 = [
	"FR"
];
var GH$2 = [
	"EN"
];
var GI$1 = [
	"EN"
];
var GL$2 = [
	"DK",
	"KL"
];
var GM$2 = [
	"EN"
];
var GN$2 = [
	"FR"
];
var GP$1 = [
	"FR"
];
var GQ$2 = [
	"ES",
	"FR",
	"PT"
];
var GR$1 = [
	"EL"
];
var GS$1 = [
	"EN"
];
var GT$2 = [
	"ES"
];
var GU$1 = [
	"EN"
];
var GW$2 = [
	"PT"
];
var GY$2 = [
	"EN"
];
var HK$1 = [
	"EN",
	"ZH"
];
var HM$1 = [
	"EN"
];
var HN$2 = [
	"ES"
];
var HR$1 = [
	"HR"
];
var HT$2 = [
	"FR",
	"HT"
];
var HU$2 = [
	"HU"
];
var ID$1 = [
	"ID"
];
var IE$3 = [
	"EN"
];
var IL$1 = [
	"AR",
	"HE"
];
var IM$1 = [
	"EN"
];
var IN$2 = [
	"EN"
];
var IO$1 = [
	"EN"
];
var IQ$1 = [
	"AR"
];
var IR$1 = [
	"FA"
];
var IS$1 = [
	"IS"
];
var IT$3 = [
	"IT"
];
var JE$1 = [
	"EN"
];
var JM$1 = [
	"EN"
];
var JO$1 = [
	"AR"
];
var JP$1 = [
	"JP"
];
var KE$1 = [
	"EN"
];
var KG$1 = [
	"KY",
	"RU"
];
var KH$1 = [
	"KM"
];
var KI$2 = [
	"EN"
];
var KM$2 = [
	"AR",
	"FR"
];
var KN$1 = [
	"EN"
];
var KP$1 = [
	"KO"
];
var KR$1 = [
	"KO"
];
var KW$1 = [
	"AR"
];
var KY$1 = [
	"EN"
];
var KZ$1 = [
	"KK",
	"RU"
];
var LA$1 = [
	"LO"
];
var LB$1 = [
	"AR"
];
var LC$1 = [
	"EN"
];
var LI$1 = [
	"DE"
];
var LK$1 = [
	"EN",
	"SI",
	"TA"
];
var LR$2 = [
	"EN"
];
var LS$2 = [
	"EN",
	"ST"
];
var LT$1 = [
	"LT"
];
var LU$2 = [
	"DE",
	"FR"
];
var LV$1 = [
	"LV"
];
var LY$1 = [
	"AR"
];
var MA$1 = [
	"AR",
	"FR"
];
var MC$1 = [
	"FR"
];
var MD$2 = [
	"RO"
];
var ME$1 = [
	"SR"
];
var MF$1 = [
	"FR"
];
var MG$2 = [
	"FR",
	"MG"
];
var MH$1 = [
	"EN"
];
var MK$1 = [
	"MK"
];
var ML$1 = [
	"FR"
];
var MM$1 = [
	"MY"
];
var MN$1 = [
	"MN"
];
var MO$1 = [
	"PT",
	"ZH"
];
var MP$1 = [
	"EN"
];
var MQ$1 = [
	"FR"
];
var MR$1 = [
	"AR",
	"FR"
];
var MS$1 = [
	"EN"
];
var MT$1 = [
	"EN",
	"MT"
];
var MU$1 = [
	"EN",
	"FR"
];
var MV$1 = [
	"DV"
];
var MW$1 = [
	"EN",
	"NY"
];
var MX$2 = [
	"ES"
];
var MY$1 = [
	"MS"
];
var MZ$2 = [
	"PT"
];
var NA$2 = [
	"EN"
];
var NC$1 = [
	"FR"
];
var NE$1 = [
	"FR"
];
var NF$1 = [
	"EN"
];
var NG$2 = [
	"ES"
];
var NI$2 = [
	"ES"
];
var NL$2 = [
	"NL"
];
var NO$1 = [
	"NO"
];
var NP$1 = [
	"EN"
];
var NR$1 = [
	"EN"
];
var NU$1 = [
	"EN"
];
var NZ$2 = [
	"EN"
];
var OM$1 = [
	"AR",
	"EN"
];
var PA$1 = [
	"ES"
];
var PE$2 = [
	"ES"
];
var PF$1 = [
	"FR"
];
var PG$2 = [
	"EN"
];
var PH$1 = [
	"EN",
	"TL"
];
var PK$2 = [
	"EN"
];
var PL$2 = [
	"PL"
];
var PM$1 = [
	"FR"
];
var PN$1 = [
	"EN"
];
var PR$1 = [
	"EN",
	"ES"
];
var PS$1 = [
	"AR"
];
var PT$1 = [
	"PT"
];
var PW$1 = [
	"EN"
];
var PY$1 = [
	"ES"
];
var QA$1 = [
	"AR",
	"EN"
];
var RE$1 = [
	"FR"
];
var RO$2 = [
	"RO"
];
var RS$1 = [
	"SR"
];
var RU$1 = [
	"RU"
];
var RW$1 = [
	"EN",
	"FR",
	"RW"
];
var SA$1 = [
	"AR"
];
var SB$1 = [
	"EN"
];
var SC$1 = [
	"EN",
	"FR"
];
var SD$1 = [
	"AR",
	"EN"
];
var SE$2 = [
	"SE"
];
var SG$1 = [
	"EN"
];
var SH$2 = [
	"EN"
];
var SI$1 = [
	"SL"
];
var SJ$1 = [
	"NO"
];
var SK$1 = [
	"SK"
];
var SL$2 = [
	"EN"
];
var SM$1 = [
	"IT"
];
var SN$2 = [
	"FR"
];
var SO$2 = [
	"SO"
];
var SR$2 = [
	"NL"
];
var SS$2 = [
	"EN"
];
var ST$1 = [
	"PT"
];
var SV$2 = [
	"ES"
];
var SX$1 = [
	"EN",
	"NL"
];
var SY$1 = [
	"AR"
];
var SZ$1 = [
	"EN",
	"SS"
];
var TC$1 = [
	"EN"
];
var TD$2 = [
	"FR"
];
var TF$1 = [
	"FR"
];
var TG$2 = [
	"FR"
];
var TH$1 = [
	"TH"
];
var TJ$1 = [
	"RU",
	"TG"
];
var TK$1 = [
	"EN"
];
var TL$2 = [
	"EN",
	"ID",
	"PT"
];
var TN$1 = [
	"AR",
	"FR"
];
var TM$1 = [
	"RU",
	"TK"
];
var TO$1 = [
	"EN",
	"TO"
];
var TR$1 = [
	"TR"
];
var TT$2 = [
	"EN"
];
var TV$1 = [
	"EN"
];
var TW$1 = [
	"ZH"
];
var TZ$1 = [
	"EN",
	"SW"
];
var UA$1 = [
	"UK"
];
var UG$1 = [
	"EN",
	"SW"
];
var UM$1 = [
	"EN"
];
var US$2 = [
	"EN"
];
var UY$2 = [
	"ES"
];
var UZ$1 = [
	"UZ"
];
var VA$1 = [
	"IT"
];
var VC$1 = [
	"EN"
];
var VE$2 = [
	"ES"
];
var VG$1 = [
	"EN"
];
var VI$1 = [
	"EN"
];
var VN$1 = [
	"VN"
];
var VU$1 = [
	"EN"
];
var WF$1 = [
	"FR"
];
var WS$1 = [
	"EN"
];
var YE$1 = [
	"AR"
];
var YT$1 = [
	"FR"
];
var ZA$2 = [
	"EN"
];
var ZM$1 = [
	"EN"
];
var ZW$2 = [
	"EN"
];
var countryToLang = {
	AD: AD$1,
	AE: AE$1,
	AF: AF$1,
	AG: AG$1,
	AI: AI$1,
	AL: AL$1,
	AM: AM$2,
	AO: AO$2,
	AQ: AQ$1,
	AR: AR$2,
	AS: AS$1,
	AT: AT$1,
	AU: AU$2,
	AW: AW$1,
	AX: AX$1,
	AZ: AZ$2,
	BA: BA$2,
	BB: BB$1,
	BD: BD$1,
	BE: BE$2,
	BF: BF$2,
	BG: BG$1,
	BH: BH$1,
	BI: BI$2,
	BJ: BJ$2,
	BL: BL$1,
	BM: BM$1,
	BN: BN$2,
	BO: BO$2,
	BQ: BQ$1,
	BR: BR$2,
	BS: BS$1,
	BT: BT$1,
	BV: BV$1,
	BW: BW$2,
	BY: BY$1,
	BZ: BZ$2,
	CA: CA$2,
	CC: CC$1,
	CD: CD$2,
	CF: CF$2,
	CG: CG$1,
	CH: CH$2,
	CI: CI$2,
	CK: CK$1,
	CL: CL$2,
	CM: CM$2,
	CN: CN$1,
	CO: CO$2,
	CR: CR$2,
	CU: CU$1,
	CV: CV$2,
	CW: CW$1,
	CX: CX$1,
	CY: CY$1,
	CZ: CZ$1,
	DE: DE$2,
	DJ: DJ$2,
	DK: DK$1,
	DM: DM$1,
	DO: DO$1,
	DZ: DZ$1,
	EC: EC$2,
	EE: EE$1,
	EG: EG$1,
	EH: EH$1,
	ER: ER$1,
	ES: ES$3,
	ET: ET$1,
	FI: FI$1,
	FJ: FJ$1,
	FK: FK$1,
	FM: FM$2,
	FO: FO$1,
	FR: FR$2,
	GA: GA$1,
	GB: GB$3,
	GD: GD$1,
	GE: GE$1,
	GG: GG$1,
	GF: GF$1,
	GH: GH$2,
	GI: GI$1,
	GL: GL$2,
	GM: GM$2,
	GN: GN$2,
	GP: GP$1,
	GQ: GQ$2,
	GR: GR$1,
	GS: GS$1,
	GT: GT$2,
	GU: GU$1,
	GW: GW$2,
	GY: GY$2,
	HK: HK$1,
	HM: HM$1,
	HN: HN$2,
	HR: HR$1,
	HT: HT$2,
	HU: HU$2,
	ID: ID$1,
	IE: IE$3,
	IL: IL$1,
	IM: IM$1,
	IN: IN$2,
	IO: IO$1,
	IQ: IQ$1,
	IR: IR$1,
	IS: IS$1,
	IT: IT$3,
	JE: JE$1,
	JM: JM$1,
	JO: JO$1,
	JP: JP$1,
	KE: KE$1,
	KG: KG$1,
	KH: KH$1,
	KI: KI$2,
	KM: KM$2,
	KN: KN$1,
	KP: KP$1,
	KR: KR$1,
	KW: KW$1,
	KY: KY$1,
	KZ: KZ$1,
	LA: LA$1,
	LB: LB$1,
	LC: LC$1,
	LI: LI$1,
	LK: LK$1,
	LR: LR$2,
	LS: LS$2,
	LT: LT$1,
	LU: LU$2,
	LV: LV$1,
	LY: LY$1,
	MA: MA$1,
	MC: MC$1,
	MD: MD$2,
	ME: ME$1,
	MF: MF$1,
	MG: MG$2,
	MH: MH$1,
	MK: MK$1,
	ML: ML$1,
	MM: MM$1,
	MN: MN$1,
	MO: MO$1,
	MP: MP$1,
	MQ: MQ$1,
	MR: MR$1,
	MS: MS$1,
	MT: MT$1,
	MU: MU$1,
	MV: MV$1,
	MW: MW$1,
	MX: MX$2,
	MY: MY$1,
	MZ: MZ$2,
	NA: NA$2,
	NC: NC$1,
	NE: NE$1,
	NF: NF$1,
	NG: NG$2,
	NI: NI$2,
	NL: NL$2,
	NO: NO$1,
	NP: NP$1,
	NR: NR$1,
	NU: NU$1,
	NZ: NZ$2,
	OM: OM$1,
	PA: PA$1,
	PE: PE$2,
	PF: PF$1,
	PG: PG$2,
	PH: PH$1,
	PK: PK$2,
	PL: PL$2,
	PM: PM$1,
	PN: PN$1,
	PR: PR$1,
	PS: PS$1,
	PT: PT$1,
	PW: PW$1,
	PY: PY$1,
	QA: QA$1,
	RE: RE$1,
	RO: RO$2,
	RS: RS$1,
	RU: RU$1,
	RW: RW$1,
	SA: SA$1,
	SB: SB$1,
	SC: SC$1,
	SD: SD$1,
	SE: SE$2,
	SG: SG$1,
	SH: SH$2,
	SI: SI$1,
	SJ: SJ$1,
	SK: SK$1,
	SL: SL$2,
	SM: SM$1,
	SN: SN$2,
	SO: SO$2,
	SR: SR$2,
	SS: SS$2,
	ST: ST$1,
	SV: SV$2,
	SX: SX$1,
	SY: SY$1,
	SZ: SZ$1,
	TC: TC$1,
	TD: TD$2,
	TF: TF$1,
	TG: TG$2,
	TH: TH$1,
	TJ: TJ$1,
	TK: TK$1,
	TL: TL$2,
	TN: TN$1,
	TM: TM$1,
	TO: TO$1,
	TR: TR$1,
	TT: TT$2,
	TV: TV$1,
	TW: TW$1,
	TZ: TZ$1,
	UA: UA$1,
	UG: UG$1,
	UM: UM$1,
	US: US$2,
	UY: UY$2,
	UZ: UZ$1,
	VA: VA$1,
	VC: VC$1,
	VE: VE$2,
	VG: VG$1,
	VI: VI$1,
	VN: VN$1,
	VU: VU$1,
	WF: WF$1,
	WS: WS$1,
	YE: YE$1,
	YT: YT$1,
	ZA: ZA$2,
	ZM: ZM$1,
	ZW: ZW$2
};

var countryToLang$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	AD: AD$1,
	AE: AE$1,
	AF: AF$1,
	AG: AG$1,
	AI: AI$1,
	AL: AL$1,
	AM: AM$2,
	AO: AO$2,
	AQ: AQ$1,
	AR: AR$2,
	AS: AS$1,
	AT: AT$1,
	AU: AU$2,
	AW: AW$1,
	AX: AX$1,
	AZ: AZ$2,
	BA: BA$2,
	BB: BB$1,
	BD: BD$1,
	BE: BE$2,
	BF: BF$2,
	BG: BG$1,
	BH: BH$1,
	BI: BI$2,
	BJ: BJ$2,
	BL: BL$1,
	BM: BM$1,
	BN: BN$2,
	BO: BO$2,
	BQ: BQ$1,
	BR: BR$2,
	BS: BS$1,
	BT: BT$1,
	BV: BV$1,
	BW: BW$2,
	BY: BY$1,
	BZ: BZ$2,
	CA: CA$2,
	CC: CC$1,
	CD: CD$2,
	CF: CF$2,
	CG: CG$1,
	CH: CH$2,
	CI: CI$2,
	CK: CK$1,
	CL: CL$2,
	CM: CM$2,
	CN: CN$1,
	CO: CO$2,
	CR: CR$2,
	CU: CU$1,
	CV: CV$2,
	CW: CW$1,
	CX: CX$1,
	CY: CY$1,
	CZ: CZ$1,
	DE: DE$2,
	DJ: DJ$2,
	DK: DK$1,
	DM: DM$1,
	DO: DO$1,
	DZ: DZ$1,
	EC: EC$2,
	EE: EE$1,
	EG: EG$1,
	EH: EH$1,
	ER: ER$1,
	ES: ES$3,
	ET: ET$1,
	FI: FI$1,
	FJ: FJ$1,
	FK: FK$1,
	FM: FM$2,
	FO: FO$1,
	FR: FR$2,
	GA: GA$1,
	GB: GB$3,
	GD: GD$1,
	GE: GE$1,
	GG: GG$1,
	GF: GF$1,
	GH: GH$2,
	GI: GI$1,
	GL: GL$2,
	GM: GM$2,
	GN: GN$2,
	GP: GP$1,
	GQ: GQ$2,
	GR: GR$1,
	GS: GS$1,
	GT: GT$2,
	GU: GU$1,
	GW: GW$2,
	GY: GY$2,
	HK: HK$1,
	HM: HM$1,
	HN: HN$2,
	HR: HR$1,
	HT: HT$2,
	HU: HU$2,
	ID: ID$1,
	IE: IE$3,
	IL: IL$1,
	IM: IM$1,
	IN: IN$2,
	IO: IO$1,
	IQ: IQ$1,
	IR: IR$1,
	IS: IS$1,
	IT: IT$3,
	JE: JE$1,
	JM: JM$1,
	JO: JO$1,
	JP: JP$1,
	KE: KE$1,
	KG: KG$1,
	KH: KH$1,
	KI: KI$2,
	KM: KM$2,
	KN: KN$1,
	KP: KP$1,
	KR: KR$1,
	KW: KW$1,
	KY: KY$1,
	KZ: KZ$1,
	LA: LA$1,
	LB: LB$1,
	LC: LC$1,
	LI: LI$1,
	LK: LK$1,
	LR: LR$2,
	LS: LS$2,
	LT: LT$1,
	LU: LU$2,
	LV: LV$1,
	LY: LY$1,
	MA: MA$1,
	MC: MC$1,
	MD: MD$2,
	ME: ME$1,
	MF: MF$1,
	MG: MG$2,
	MH: MH$1,
	MK: MK$1,
	ML: ML$1,
	MM: MM$1,
	MN: MN$1,
	MO: MO$1,
	MP: MP$1,
	MQ: MQ$1,
	MR: MR$1,
	MS: MS$1,
	MT: MT$1,
	MU: MU$1,
	MV: MV$1,
	MW: MW$1,
	MX: MX$2,
	MY: MY$1,
	MZ: MZ$2,
	NA: NA$2,
	NC: NC$1,
	NE: NE$1,
	NF: NF$1,
	NG: NG$2,
	NI: NI$2,
	NL: NL$2,
	NO: NO$1,
	NP: NP$1,
	NR: NR$1,
	NU: NU$1,
	NZ: NZ$2,
	OM: OM$1,
	PA: PA$1,
	PE: PE$2,
	PF: PF$1,
	PG: PG$2,
	PH: PH$1,
	PK: PK$2,
	PL: PL$2,
	PM: PM$1,
	PN: PN$1,
	PR: PR$1,
	PS: PS$1,
	PT: PT$1,
	PW: PW$1,
	PY: PY$1,
	QA: QA$1,
	RE: RE$1,
	RO: RO$2,
	RS: RS$1,
	RU: RU$1,
	RW: RW$1,
	SA: SA$1,
	SB: SB$1,
	SC: SC$1,
	SD: SD$1,
	SE: SE$2,
	SG: SG$1,
	SH: SH$2,
	SI: SI$1,
	SJ: SJ$1,
	SK: SK$1,
	SL: SL$2,
	SM: SM$1,
	SN: SN$2,
	SO: SO$2,
	SR: SR$2,
	SS: SS$2,
	ST: ST$1,
	SV: SV$2,
	SX: SX$1,
	SY: SY$1,
	SZ: SZ$1,
	TC: TC$1,
	TD: TD$2,
	TF: TF$1,
	TG: TG$2,
	TH: TH$1,
	TJ: TJ$1,
	TK: TK$1,
	TL: TL$2,
	TN: TN$1,
	TM: TM$1,
	TO: TO$1,
	TR: TR$1,
	TT: TT$2,
	TV: TV$1,
	TW: TW$1,
	TZ: TZ$1,
	UA: UA$1,
	UG: UG$1,
	UM: UM$1,
	US: US$2,
	UY: UY$2,
	UZ: UZ$1,
	VA: VA$1,
	VC: VC$1,
	VE: VE$2,
	VG: VG$1,
	VI: VI$1,
	VN: VN$1,
	VU: VU$1,
	WF: WF$1,
	WS: WS$1,
	YE: YE$1,
	YT: YT$1,
	ZA: ZA$2,
	ZM: ZM$1,
	ZW: ZW$2,
	'default': countryToLang
});

var CA$3 = [
	{
		component: "road",
		replacements: [
			{
				src: "Carrer de",
				dest: "C"
			},
			{
				src: "Rambla",
				dest: "Rbla"
			}
		]
	}
];
var CS = [
	{
		component: "road",
		replacements: [
			{
				src: "Ulice",
				dest: "Ul"
			},
			{
				src: "Třída",
				dest: "Tř"
			},
			{
				src: "Náměstí",
				dest: "Nám"
			}
		]
	}
];
var DE$3 = [
	{
		component: "road",
		replacements: [
			{
				src: "Platz",
				dest: "Pl"
			},
			{
				src: "Sankt",
				dest: "St"
			},
			{
				src: "Straße",
				dest: "Str"
			},
			{
				src: "Strasse",
				dest: "Str"
			}
		]
	}
];
var DK$2 = [
	{
		component: "road",
		replacements: [
			{
				src: "Gamle",
				dest: "Gl"
			},
			{
				src: "Gammel",
				dest: "Gl"
			},
			{
				src: "Lille",
				dest: "Ll"
			},
			{
				src: "Nordre",
				dest: "Ndr"
			},
			{
				src: "Nørre",
				dest: "Nr"
			},
			{
				src: "Sankt",
				dest: "Skt"
			},
			{
				src: "Store",
				dest: "St"
			},
			{
				src: "Søndre",
				dest: "Sdr"
			},
			{
				src: "Sønder",
				dest: "Sdr"
			},
			{
				src: "Vester",
				dest: "V"
			},
			{
				src: "Vestre",
				dest: "V"
			},
			{
				src: "Øster",
				dest: "Ø"
			},
			{
				src: "Østre",
				dest: "Ø"
			}
		]
	}
];
var EN = [
	{
		component: "country",
		replacements: [
			{
				src: "United Kingdom",
				dest: "UK"
			},
			{
				src: "United States of America",
				dest: "USA"
			},
			{
				src: "United States Virgin Islands",
				dest: "USVI"
			}
		]
	},
	{
		component: "road",
		replacements: [
			{
				src: "Alley",
				dest: "Aly"
			},
			{
				src: "Arcade",
				dest: "Arc"
			},
			{
				src: "Avenue",
				dest: "Ave"
			},
			{
				src: "Boulevard",
				dest: "Blvd"
			},
			{
				src: "Circle",
				dest: "Cl"
			},
			{
				src: "Court",
				dest: "Ct"
			},
			{
				src: "Crescent",
				dest: "Cres"
			},
			{
				src: "Crossroad",
				dest: "XRD"
			},
			{
				src: "Drive",
				dest: "Dr"
			},
			{
				src: "Esplanade",
				dest: "Esp"
			},
			{
				src: "Expressway",
				dest: "EXPY"
			},
			{
				src: "Extention",
				dest: "Ext"
			},
			{
				src: "Freeway",
				dest: "Fwy"
			},
			{
				src: "Grove",
				dest: "Gr"
			},
			{
				src: "Highway",
				dest: "HWY"
			},
			{
				src: "Mountain",
				dest: "Mtn"
			},
			{
				src: "Northeast",
				dest: "NE"
			},
			{
				src: "Northwest",
				dest: "NW"
			},
			{
				src: "Place",
				dest: "Pl"
			},
			{
				src: "Road",
				dest: "Rd"
			},
			{
				src: "Southeast",
				dest: "SE"
			},
			{
				src: "Southwest",
				dest: "SW"
			},
			{
				src: "Square",
				dest: "Sq"
			},
			{
				src: "Street",
				dest: "St"
			},
			{
				src: "Terrace",
				dest: "Tce"
			},
			{
				src: "Throughway",
				dest: "TRWY"
			}
		]
	}
];
var ES$4 = [
	{
		component: "road",
		replacements: [
			{
				src: "Avenida",
				dest: "Avda"
			},
			{
				src: "Calle de",
				dest: "C"
			},
			{
				src: "Carrera",
				dest: "Cra"
			},
			{
				src: "Carrero",
				dest: "Cro"
			},
			{
				src: "Colonia",
				dest: "Col"
			},
			{
				src: "Estación",
				dest: "Estcn"
			},
			{
				src: "Gran Vía",
				dest: "GV"
			},
			{
				src: "Mercado",
				dest: "Merc"
			},
			{
				src: "Plaza",
				dest: "Pl"
			},
			{
				src: "Parque",
				dest: "Pque"
			},
			{
				src: "Pasaje",
				dest: "Psje"
			},
			{
				src: "Paseo",
				dest: "Po"
			},
			{
				src: "Pueblo",
				dest: "Pblo"
			},
			{
				src: "Puente",
				dest: "Pnte"
			},
			{
				src: "Puerta",
				dest: "Pta"
			},
			{
				src: "Puerto",
				dest: "Pto"
			},
			{
				src: "Rambla",
				dest: "Rbla"
			},
			{
				src: "Ronda",
				dest: "Rda"
			},
			{
				src: "Rotonda",
				dest: "Rtda"
			},
			{
				src: "San",
				dest: "S"
			},
			{
				src: "Sector",
				dest: "Sect"
			},
			{
				src: "Santa",
				dest: "Sta"
			},
			{
				src: "Viaducto",
				dest: "Vcto"
			}
		]
	}
];
var ET$2 = [
	{
		component: "road",
		replacements: [
			{
				src: "Maantee",
				dest: "mnt"
			},
			{
				src: "Puiestee",
				dest: "pst"
			},
			{
				src: "Raudtee",
				dest: "rdt"
			},
			{
				src: "Raudteejaam",
				dest: "rdtj"
			},
			{
				src: "Tänav",
				dest: "tn"
			}
		]
	}
];
var EU = [
	{
		component: "road",
		replacements: [
			{
				src: "Kalea",
				dest: "K"
			},
			{
				src: "Errepidea",
				dest: "Err"
			},
			{
				src: "Etorbidea",
				dest: "Etorb"
			}
		]
	}
];
var FI$2 = [
	{
		component: "road",
		replacements: [
			{
				src: "alue",
				dest: "al"
			},
			{
				src: "asema",
				dest: "as"
			},
			{
				src: "aukio",
				dest: "auk"
			},
			{
				src: "kaari",
				dest: "kri"
			},
			{
				src: "katu",
				dest: "k"
			},
			{
				src: "kuja",
				dest: "kj"
			},
			{
				src: "penger",
				dest: "pgr"
			},
			{
				src: "polku",
				dest: "p"
			},
			{
				src: "raitti",
				dest: "r"
			},
			{
				src: "ranta",
				dest: "rt"
			},
			{
				src: "rinne",
				dest: "rn"
			},
			{
				src: "tie",
				dest: "t"
			},
			{
				src: "tienhaara",
				dest: "th"
			},
			{
				src: "tori",
				dest: "tr"
			},
			{
				src: "väylä",
				dest: "vlä"
			}
		]
	}
];
var FR$3 = [
	{
		component: "road",
		replacements: [
			{
				src: "Avenue",
				dest: "Av"
			},
			{
				src: "Bâtiment",
				dest: "Bât"
			},
			{
				src: "Boulevard",
				dest: "Boul"
			},
			{
				src: "Cours",
				dest: "Crs"
			},
			{
				src: "Place",
				dest: "Pl"
			},
			{
				src: "Rue",
				dest: "r"
			},
			{
				src: "Saint",
				dest: "St"
			},
			{
				src: "Sainte",
				dest: "Ste"
			},
			{
				src: "Zone industrielle",
				dest: "Z.I"
			}
		]
	}
];
var HU$3 = [
	{
		component: "road",
		replacements: [
			{
				src: "utca",
				dest: "u"
			}
		]
	}
];
var IT$4 = [
	{
		component: "road",
		replacements: [
			{
				src: "Calle",
				dest: "C.le"
			},
			{
				src: "Campo",
				dest: "C.po"
			},
			{
				src: "Cascina",
				dest: "C.na"
			},
			{
				src: "Corso",
				dest: "C.so"
			},
			{
				src: "Corte",
				dest: "C.te"
			},
			{
				src: "Fondamenta",
				dest: "F.te"
			},
			{
				src: "Largo",
				dest: "L.go"
			},
			{
				src: "Località",
				dest: "Loc."
			},
			{
				src: "Lungomare",
				dest: "L.mare"
			},
			{
				src: "Piazza",
				dest: "P.za"
			},
			{
				src: "Piazzale",
				dest: "P.le"
			},
			{
				src: "Piazzetta",
				dest: "P.ta"
			},
			{
				src: "Ponte",
				dest: "P.te"
			},
			{
				src: "Porta",
				dest: "P.ta"
			},
			{
				src: "Salizada",
				dest: "S.da"
			},
			{
				src: "San",
				dest: "S."
			},
			{
				src: "Santa",
				dest: "S."
			},
			{
				src: "Santo",
				dest: "S."
			},
			{
				src: "Santissima",
				dest: "SS.ma"
			},
			{
				src: "Santissime",
				dest: "SS.me"
			},
			{
				src: "Santissimi",
				dest: "SS.mi"
			},
			{
				src: "Santissimo",
				dest: "SS.mo"
			},
			{
				src: "Stazione",
				dest: "Staz"
			},
			{
				src: "Strada Comunale",
				dest: "SC"
			},
			{
				src: "Strada Provinciale",
				dest: "SP"
			},
			{
				src: "Strada Regionale",
				dest: "SR"
			},
			{
				src: "Strada Statale",
				dest: "SS"
			},
			{
				src: "Via",
				dest: "V"
			},
			{
				src: "Viale",
				dest: "V.le"
			},
			{
				src: "Vico",
				dest: "V.co"
			},
			{
				src: "Vicolo",
				dest: "V.lo"
			}
		]
	}
];
var NL$3 = [
	{
		component: "road",
		replacements: [
			{
				src: "Gracht",
				dest: "Gr"
			},
			{
				src: "Kort",
				dest: "K"
			},
			{
				src: "Korte",
				dest: "Kte"
			},
			{
				src: "Laan",
				dest: "ln"
			},
			{
				src: "Lange",
				dest: "L"
			},
			{
				src: "Markt",
				dest: "mkt"
			},
			{
				src: "Professor",
				dest: "Prof"
			},
			{
				src: "Sint",
				dest: "St"
			},
			{
				src: "Straat",
				dest: "str"
			},
			{
				src: "Van",
				dest: "v"
			},
			{
				src: "Weg",
				dest: "wg"
			}
		]
	}
];
var PT$2 = [
	{
		component: "road",
		replacements: [
			{
				src: "Alameda",
				dest: "Al"
			},
			{
				src: "Avenida",
				dest: "Av"
			},
			{
				src: "Azinhaga",
				dest: "Az"
			},
			{
				src: "Bairro",
				dest: "Br"
			},
			{
				src: "Beco",
				dest: "Bc"
			},
			{
				src: "Calçada",
				dest: "Cc"
			},
			{
				src: "Calçadinha",
				dest: "Ccnh"
			},
			{
				src: "Caminho",
				dest: "Cam"
			},
			{
				src: "Casal",
				dest: "Csl"
			},
			{
				src: "Escadas",
				dest: "Esc"
			},
			{
				src: "Escadinhas",
				dest: "Escnh"
			},
			{
				src: "Estrada",
				dest: "Estr"
			},
			{
				src: "Gaveto",
				dest: "Gav"
			},
			{
				src: "Jardim",
				dest: "Jrd"
			},
			{
				src: "Largo",
				dest: "Lg"
			},
			{
				src: "Loteamento",
				dest: "Loteam"
			},
			{
				src: "Parque",
				dest: "Pq"
			},
			{
				src: "Pátio",
				dest: "Pto"
			},
			{
				src: "Praça",
				dest: "Pc"
			},
			{
				src: "Praceta",
				dest: "Pct"
			},
			{
				src: "Prolongamento",
				dest: "Prolng"
			},
			{
				src: "Quinta",
				dest: "Qta"
			},
			{
				src: "Rotunda",
				dest: "Rot"
			},
			{
				src: "Rua",
				dest: "R"
			},
			{
				src: "Transversal",
				dest: "Transv"
			},
			{
				src: "Travessa",
				dest: "Tv"
			},
			{
				src: "Urbanização",
				dest: "Urb"
			},
			{
				src: "Vila",
				dest: "Vl"
			},
			{
				src: "Zona",
				dest: "Zn"
			}
		]
	}
];
var RO$3 = [
	{
		component: "road",
		replacements: [
			{
				src: "Strada",
				dest: "Str"
			},
			{
				src: "Intrarea",
				dest: "Intr"
			},
			{
				src: "Bulevardul",
				dest: "Blvd"
			},
			{
				src: "Soseaua",
				dest: "Sos"
			}
		]
	}
];
var SE$3 = [
	{
		component: "road",
		replacements: [
			{
				src: "gata",
				dest: "g"
			},
			{
				src: "gatan",
				dest: "g"
			},
			{
				src: "gränd",
				dest: "gr"
			},
			{
				src: "gränden",
				dest: "gr"
			},
			{
				src: "lilla",
				dest: "l"
			},
			{
				src: "norra",
				dest: "n"
			},
			{
				src: "östra",
				dest: "ö"
			},
			{
				src: "södra",
				dest: "s"
			},
			{
				src: "stig",
				dest: "st"
			},
			{
				src: "stora",
				dest: "st"
			},
			{
				src: "västra",
				dest: "v"
			}
		]
	}
];
var SK$2 = [
	{
		component: "road",
		replacements: [
			{
				src: "Armádneho generála",
				dest: "Arm. gen"
			},
			{
				src: "Československej",
				dest: "Čsl"
			},
			{
				src: "Doktora",
				dest: "Dr"
			},
			{
				src: "Doktorky",
				dest: "Dr"
			},
			{
				src: "Generála",
				dest: "Gen"
			},
			{
				src: "Inžiniera",
				dest: "Ing"
			},
			{
				src: "Inžinierky",
				dest: "Ing"
			},
			{
				src: "Kapitána",
				dest: "Kpt"
			},
			{
				src: "Majora",
				dest: "Mjr"
			},
			{
				src: "Nábrežie",
				dest: "Nábr"
			},
			{
				src: "Námestie",
				dest: "Nám"
			},
			{
				src: "Plukovníka",
				dest: "Plk"
			},
			{
				src: "Podplukovníka",
				dest: "Pplk"
			},
			{
				src: "Podporučíka",
				dest: "Ppor"
			},
			{
				src: "Poručíka",
				dest: "Por"
			},
			{
				src: "Profesora",
				dest: "Prof"
			},
			{
				src: "Profesorky",
				dest: "Prof"
			},
			{
				src: "Sídlisko",
				dest: "Sídl"
			},
			{
				src: "Svätého",
				dest: "Sv"
			},
			{
				src: "Svätej",
				dest: "Sv"
			},
			{
				src: "Ulica",
				dest: "Ul"
			}
		]
	}
];
var TR$2 = [
	{
		component: "road",
		replacements: [
			{
				src: "Bulvar",
				dest: "Bl"
			},
			{
				src: "Bulvarı",
				dest: "Bl"
			},
			{
				src: "Cadde",
				dest: "Cd"
			},
			{
				src: "Caddesi",
				dest: "Cd"
			},
			{
				src: "Mahalle",
				dest: "Mh"
			},
			{
				src: "Sokak",
				dest: "Sk"
			},
			{
				src: "Sokağı",
				dest: "Sk"
			}
		]
	}
];
var UK = [
	{
		component: "road",
		replacements: [
			{
				src: "бульвар",
				dest: "бул"
			},
			{
				src: "дорога",
				dest: "дор"
			},
			{
				src: "провулок",
				dest: "пров"
			},
			{
				src: "площа",
				dest: "пл"
			},
			{
				src: "проспект",
				dest: "просп"
			},
			{
				src: "шосе",
				dest: "ш"
			},
			{
				src: "вулиця",
				dest: "вул"
			}
		]
	}
];
var abbreviations = {
	CA: CA$3,
	CS: CS,
	DE: DE$3,
	DK: DK$2,
	EN: EN,
	ES: ES$4,
	ET: ET$2,
	EU: EU,
	FI: FI$2,
	FR: FR$3,
	HU: HU$3,
	IT: IT$4,
	NL: NL$3,
	PT: PT$2,
	RO: RO$3,
	SE: SE$3,
	SK: SK$2,
	TR: TR$2,
	UK: UK
};

var abbreviations$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	CA: CA$3,
	CS: CS,
	DE: DE$3,
	DK: DK$2,
	EN: EN,
	ES: ES$4,
	ET: ET$2,
	EU: EU,
	FI: FI$2,
	FR: FR$3,
	HU: HU$3,
	IT: IT$4,
	NL: NL$3,
	PT: PT$2,
	RO: RO$3,
	SE: SE$3,
	SK: SK$2,
	TR: TR$2,
	UK: UK,
	'default': abbreviations
});

var AD$2 = "Andorra";
var AE$2 = "United Arab Emirates";
var AF$2 = "Afghanistan";
var AG$2 = "Antigua and Barbuda";
var AI$2 = "Anguilla";
var AL$2 = "Albania";
var AM$3 = "Armenia";
var AO$3 = "Angola";
var AQ$2 = "Antarctica";
var AR$3 = "Argentina";
var AS$2 = "American Samoa";
var AT$2 = "Austria";
var AU$3 = "Australia";
var AW$2 = "Aruba";
var AX$2 = "Åland Islands";
var AZ$3 = "Azerbaijan";
var BA$3 = "Bosnia and Herzegovina";
var BB$2 = "Barbados";
var BD$2 = "Bangladesh";
var BE$3 = "Belgium";
var BF$3 = "Burkina Faso";
var BG$2 = "Bulgaria";
var BH$2 = "Bahrain";
var BI$3 = "Burundi";
var BJ$3 = "Benin";
var BL$2 = "Saint Barthélemy";
var BM$2 = "Bermuda";
var BN$3 = "Brunei";
var BO$3 = "Bolivia";
var BQ$2 = "Caribbean Netherlands";
var BR$3 = "Brazil";
var BS$2 = "The Bahamas";
var BT$2 = "Bhutan";
var BV$2 = "Bouvet Island";
var BW$3 = "Botswana";
var BY$2 = "Belarus";
var BZ$3 = "Belize";
var CA$4 = "Canada";
var CC$2 = "Cocos (Keeling) Islands";
var CD$3 = "Democratic Republic of the Congo";
var CF$3 = "Central African Republic";
var CG$2 = "Republic of the Congo";
var CH$3 = "Switzerland";
var CI$3 = "Côte d'Ivoire";
var CK$2 = "Cook Islands";
var CL$3 = "Chile";
var CM$3 = "Cameroon";
var CN$2 = "China";
var CO$3 = "Colombia";
var CR$3 = "Costa Rica";
var CU$2 = "Cuba";
var CV$3 = "Cabo Verde";
var CW$2 = "Curaçao";
var CX$2 = "Christmas Island";
var CY$2 = "Cyprus";
var CZ$2 = "Czech Republic";
var DE$4 = "Germany";
var DJ$3 = "Djibouti";
var DK$3 = "Denmark";
var DM$2 = "Dominica";
var DO$2 = "Dominican Republic";
var DZ$2 = "Algeria";
var EC$3 = "Ecuador";
var EE$2 = "Estonia";
var EG$2 = "Egypt";
var EH$2 = "Western Sahara";
var ER$2 = "Eritrea";
var ES$5 = "Spain";
var ET$3 = "Ethiopia";
var FI$3 = "Finland";
var FJ$2 = "Fiji";
var FK$2 = "Falkland Islands";
var FM$3 = "Federated States of Micronesia";
var FO$2 = "Faroe Islands";
var FR$4 = "France";
var GA$2 = "Gabon";
var GB$4 = "United Kingdom";
var GD$2 = "Grenada";
var GE$2 = "Georgia (country)";
var GF$2 = "French Guiana";
var GG$2 = "Guernsey";
var GH$3 = "Ghana";
var GI$2 = "Gibraltar";
var GL$3 = "Greenland";
var GM$3 = "The Gambia";
var GN$3 = "Guinea";
var GP$2 = "Guadeloupe";
var GQ$3 = "Equatorial Guinea";
var GR$2 = "Greece";
var GS$2 = "South Georgia and the South Sandwich Islands";
var GT$3 = "Guatemala";
var GU$2 = "Guam";
var GW$3 = "Guinea-Bissau";
var GY$3 = "Guyana";
var HK$2 = "Hong Kong";
var HM$2 = "Heard Island and McDonald Islands";
var HN$3 = "Honduras";
var HR$2 = "Croatia";
var HT$3 = "Haiti";
var HU$4 = "Hungary";
var ID$2 = "Indonesia";
var IE$4 = "Republic of Ireland";
var IL$2 = "Israel";
var IM$2 = "Isle of Man";
var IN$3 = "India";
var IO$2 = "British Indian Ocean Territory";
var IQ$2 = "Iraq";
var IR$2 = "Iran";
var IS$2 = "Iceland";
var IT$5 = "Italy";
var JE$2 = "Jersey";
var JM$2 = "Jamaica";
var JO$2 = "Jordan";
var JP$2 = "Japan";
var KE$2 = "Kenya";
var KG$2 = "Kyrgyzstan";
var KH$2 = "Cambodia";
var KI$3 = "Kiribati";
var KM$3 = "Comoros";
var KN$2 = "Saint Kitts and Nevis";
var KP$2 = "North Korea";
var KR$2 = "South Korea";
var KW$2 = "Kuwait";
var KY$2 = "Cayman Islands";
var KZ$2 = "Kazakhstan";
var LA$2 = "Laos";
var LB$2 = "Lebanon";
var LC$2 = "Saint Lucia";
var LI$2 = "Liechtenstein";
var LK$2 = "Sri Lanka";
var LR$3 = "Liberia";
var LS$3 = "Lesotho";
var LT$2 = "Lithuania";
var LU$3 = "Luxembourg";
var LV$2 = "Latvia";
var LY$2 = "Libya";
var MA$2 = "Morocco";
var MC$2 = "Monaco";
var MD$3 = "Moldova";
var ME$2 = "Montenegro";
var MF$2 = "Collectivity of Saint Martin";
var MG$3 = "Madagascar";
var MH$2 = "Marshall Islands";
var MK$2 = "Republic of North Macedonia";
var ML$2 = "Mali";
var MM$2 = "Myanmar";
var MN$2 = "Mongolia";
var MO$2 = "Macau";
var MP$2 = "Northern Mariana Islands";
var MQ$2 = "Martinique";
var MR$2 = "Mauritania";
var MS$2 = "Montserrat";
var MT$2 = "Malta";
var MU$2 = "Mauritius";
var MV$2 = "Maldives";
var MW$2 = "Malawi";
var MX$3 = "Mexico";
var MY$2 = "Malaysia";
var MZ$3 = "Mozambique";
var NA$3 = "Namibia";
var NC$2 = "New Caledonia";
var NE$2 = "Niger";
var NF$2 = "Norfolk Island";
var NG$3 = "Nigeria";
var NI$3 = "Nicaragua";
var NL$4 = "Netherlands";
var NO$2 = "Norway";
var NP$2 = "Nepal";
var NR$2 = "Nauru";
var NU$2 = "Niue";
var NZ$3 = "New Zealand";
var OM$2 = "Oman";
var PA$2 = "Panama";
var PE$3 = "Peru";
var PF$2 = "French Polynesia";
var PG$3 = "Papua New Guinea";
var PH$2 = "Philippines";
var PK$3 = "Pakistan";
var PL$3 = "Poland";
var PM$2 = "Saint Pierre and Miquelon";
var PN$2 = "Pitcairn Islands";
var PR$2 = "Puerto Rico";
var PS$2 = "State of Palestine";
var PT$3 = "Portugal";
var PW$2 = "Palau";
var PY$2 = "Paraguay";
var QA$2 = "Qatar";
var RE$2 = "Réunion";
var RO$4 = "Romania";
var RS$2 = "Serbia";
var RU$2 = "Russia";
var RW$2 = "Rwanda";
var SA$2 = "Saudi Arabia";
var SB$2 = "Solomon Islands";
var SC$2 = "Seychelles";
var SD$2 = "Sudan";
var SE$4 = "Sweden";
var SG$2 = "Singapore";
var SH$3 = "Saint Helena, Ascension and Tristan da Cunha";
var SI$2 = "Slovenia";
var SJ$2 = "Svalbard and Jan Mayen";
var SK$3 = "Slovakia";
var SL$3 = "Sierra Leone";
var SM$2 = "San Marino";
var SN$3 = "Senegal";
var SO$3 = "Somalia";
var SR$3 = "Suriname";
var SS$3 = "South Sudan";
var ST$2 = "São Tomé and Príncipe";
var SV$3 = "El Salvador";
var SX$2 = "Sint Maarten";
var SY$2 = "Syria";
var SZ$2 = "Swaziland";
var TC$2 = "Turks and Caicos Islands";
var TD$3 = "Chad";
var TF$2 = "French Southern and Antarctic Lands";
var TG$3 = "Togo";
var TH$2 = "Thailand";
var TJ$2 = "Tajikistan";
var TK$2 = "Tokelau";
var TL$3 = "East Timor";
var TM$2 = "Turkmenistan";
var TN$2 = "Tunisia";
var TO$2 = "Tonga";
var TR$3 = "Turkey";
var TT$3 = "Trinidad and Tobago";
var TV$2 = "Tuvalu";
var TW$2 = "Taiwan";
var TZ$2 = "Tanzania";
var UA$2 = "Ukraine";
var UG$2 = "Uganda";
var UM$2 = "United States Minor Outlying Islands";
var US$3 = "United States";
var UY$3 = "Uruguay";
var UZ$2 = "Uzbekistan";
var VA$2 = "Vatican City";
var VC$2 = "Saint Vincent and the Grenadines";
var VE$3 = "Venezuela";
var VG$2 = "British Virgin Islands";
var VI$2 = "United States Virgin Islands";
var VN$2 = "Vietnam";
var VU$2 = "Vanuatu";
var WF$2 = "Wallis and Futuna";
var WS$2 = "Samoa";
var YE$2 = "Yemen";
var YT$2 = "Mayotte";
var ZA$3 = "South Africa";
var ZM$2 = "Zambia";
var ZW$3 = "Zimbabwe";
var countryNames = {
	AD: AD$2,
	AE: AE$2,
	AF: AF$2,
	AG: AG$2,
	AI: AI$2,
	AL: AL$2,
	AM: AM$3,
	AO: AO$3,
	AQ: AQ$2,
	AR: AR$3,
	AS: AS$2,
	AT: AT$2,
	AU: AU$3,
	AW: AW$2,
	AX: AX$2,
	AZ: AZ$3,
	BA: BA$3,
	BB: BB$2,
	BD: BD$2,
	BE: BE$3,
	BF: BF$3,
	BG: BG$2,
	BH: BH$2,
	BI: BI$3,
	BJ: BJ$3,
	BL: BL$2,
	BM: BM$2,
	BN: BN$3,
	BO: BO$3,
	BQ: BQ$2,
	BR: BR$3,
	BS: BS$2,
	BT: BT$2,
	BV: BV$2,
	BW: BW$3,
	BY: BY$2,
	BZ: BZ$3,
	CA: CA$4,
	CC: CC$2,
	CD: CD$3,
	CF: CF$3,
	CG: CG$2,
	CH: CH$3,
	CI: CI$3,
	CK: CK$2,
	CL: CL$3,
	CM: CM$3,
	CN: CN$2,
	CO: CO$3,
	CR: CR$3,
	CU: CU$2,
	CV: CV$3,
	CW: CW$2,
	CX: CX$2,
	CY: CY$2,
	CZ: CZ$2,
	DE: DE$4,
	DJ: DJ$3,
	DK: DK$3,
	DM: DM$2,
	DO: DO$2,
	DZ: DZ$2,
	EC: EC$3,
	EE: EE$2,
	EG: EG$2,
	EH: EH$2,
	ER: ER$2,
	ES: ES$5,
	ET: ET$3,
	FI: FI$3,
	FJ: FJ$2,
	FK: FK$2,
	FM: FM$3,
	FO: FO$2,
	FR: FR$4,
	GA: GA$2,
	GB: GB$4,
	GD: GD$2,
	GE: GE$2,
	GF: GF$2,
	GG: GG$2,
	GH: GH$3,
	GI: GI$2,
	GL: GL$3,
	GM: GM$3,
	GN: GN$3,
	GP: GP$2,
	GQ: GQ$3,
	GR: GR$2,
	GS: GS$2,
	GT: GT$3,
	GU: GU$2,
	GW: GW$3,
	GY: GY$3,
	HK: HK$2,
	HM: HM$2,
	HN: HN$3,
	HR: HR$2,
	HT: HT$3,
	HU: HU$4,
	ID: ID$2,
	IE: IE$4,
	IL: IL$2,
	IM: IM$2,
	IN: IN$3,
	IO: IO$2,
	IQ: IQ$2,
	IR: IR$2,
	IS: IS$2,
	IT: IT$5,
	JE: JE$2,
	JM: JM$2,
	JO: JO$2,
	JP: JP$2,
	KE: KE$2,
	KG: KG$2,
	KH: KH$2,
	KI: KI$3,
	KM: KM$3,
	KN: KN$2,
	KP: KP$2,
	KR: KR$2,
	KW: KW$2,
	KY: KY$2,
	KZ: KZ$2,
	LA: LA$2,
	LB: LB$2,
	LC: LC$2,
	LI: LI$2,
	LK: LK$2,
	LR: LR$3,
	LS: LS$3,
	LT: LT$2,
	LU: LU$3,
	LV: LV$2,
	LY: LY$2,
	MA: MA$2,
	MC: MC$2,
	MD: MD$3,
	ME: ME$2,
	MF: MF$2,
	MG: MG$3,
	MH: MH$2,
	MK: MK$2,
	ML: ML$2,
	MM: MM$2,
	MN: MN$2,
	MO: MO$2,
	MP: MP$2,
	MQ: MQ$2,
	MR: MR$2,
	MS: MS$2,
	MT: MT$2,
	MU: MU$2,
	MV: MV$2,
	MW: MW$2,
	MX: MX$3,
	MY: MY$2,
	MZ: MZ$3,
	NA: NA$3,
	NC: NC$2,
	NE: NE$2,
	NF: NF$2,
	NG: NG$3,
	NI: NI$3,
	NL: NL$4,
	NO: NO$2,
	NP: NP$2,
	NR: NR$2,
	NU: NU$2,
	NZ: NZ$3,
	OM: OM$2,
	PA: PA$2,
	PE: PE$3,
	PF: PF$2,
	PG: PG$3,
	PH: PH$2,
	PK: PK$3,
	PL: PL$3,
	PM: PM$2,
	PN: PN$2,
	PR: PR$2,
	PS: PS$2,
	PT: PT$3,
	PW: PW$2,
	PY: PY$2,
	QA: QA$2,
	RE: RE$2,
	RO: RO$4,
	RS: RS$2,
	RU: RU$2,
	RW: RW$2,
	SA: SA$2,
	SB: SB$2,
	SC: SC$2,
	SD: SD$2,
	SE: SE$4,
	SG: SG$2,
	SH: SH$3,
	SI: SI$2,
	SJ: SJ$2,
	SK: SK$3,
	SL: SL$3,
	SM: SM$2,
	SN: SN$3,
	SO: SO$3,
	SR: SR$3,
	SS: SS$3,
	ST: ST$2,
	SV: SV$3,
	SX: SX$2,
	SY: SY$2,
	SZ: SZ$2,
	TC: TC$2,
	TD: TD$3,
	TF: TF$2,
	TG: TG$3,
	TH: TH$2,
	TJ: TJ$2,
	TK: TK$2,
	TL: TL$3,
	TM: TM$2,
	TN: TN$2,
	TO: TO$2,
	TR: TR$3,
	TT: TT$3,
	TV: TV$2,
	TW: TW$2,
	TZ: TZ$2,
	UA: UA$2,
	UG: UG$2,
	UM: UM$2,
	US: US$3,
	UY: UY$3,
	UZ: UZ$2,
	VA: VA$2,
	VC: VC$2,
	VE: VE$3,
	VG: VG$2,
	VI: VI$2,
	VN: VN$2,
	VU: VU$2,
	WF: WF$2,
	WS: WS$2,
	YE: YE$2,
	YT: YT$2,
	ZA: ZA$3,
	ZM: ZM$2,
	ZW: ZW$3
};

var countryNames$1 = /*#__PURE__*/Object.freeze({
	__proto__: null,
	AD: AD$2,
	AE: AE$2,
	AF: AF$2,
	AG: AG$2,
	AI: AI$2,
	AL: AL$2,
	AM: AM$3,
	AO: AO$3,
	AQ: AQ$2,
	AR: AR$3,
	AS: AS$2,
	AT: AT$2,
	AU: AU$3,
	AW: AW$2,
	AX: AX$2,
	AZ: AZ$3,
	BA: BA$3,
	BB: BB$2,
	BD: BD$2,
	BE: BE$3,
	BF: BF$3,
	BG: BG$2,
	BH: BH$2,
	BI: BI$3,
	BJ: BJ$3,
	BL: BL$2,
	BM: BM$2,
	BN: BN$3,
	BO: BO$3,
	BQ: BQ$2,
	BR: BR$3,
	BS: BS$2,
	BT: BT$2,
	BV: BV$2,
	BW: BW$3,
	BY: BY$2,
	BZ: BZ$3,
	CA: CA$4,
	CC: CC$2,
	CD: CD$3,
	CF: CF$3,
	CG: CG$2,
	CH: CH$3,
	CI: CI$3,
	CK: CK$2,
	CL: CL$3,
	CM: CM$3,
	CN: CN$2,
	CO: CO$3,
	CR: CR$3,
	CU: CU$2,
	CV: CV$3,
	CW: CW$2,
	CX: CX$2,
	CY: CY$2,
	CZ: CZ$2,
	DE: DE$4,
	DJ: DJ$3,
	DK: DK$3,
	DM: DM$2,
	DO: DO$2,
	DZ: DZ$2,
	EC: EC$3,
	EE: EE$2,
	EG: EG$2,
	EH: EH$2,
	ER: ER$2,
	ES: ES$5,
	ET: ET$3,
	FI: FI$3,
	FJ: FJ$2,
	FK: FK$2,
	FM: FM$3,
	FO: FO$2,
	FR: FR$4,
	GA: GA$2,
	GB: GB$4,
	GD: GD$2,
	GE: GE$2,
	GF: GF$2,
	GG: GG$2,
	GH: GH$3,
	GI: GI$2,
	GL: GL$3,
	GM: GM$3,
	GN: GN$3,
	GP: GP$2,
	GQ: GQ$3,
	GR: GR$2,
	GS: GS$2,
	GT: GT$3,
	GU: GU$2,
	GW: GW$3,
	GY: GY$3,
	HK: HK$2,
	HM: HM$2,
	HN: HN$3,
	HR: HR$2,
	HT: HT$3,
	HU: HU$4,
	ID: ID$2,
	IE: IE$4,
	IL: IL$2,
	IM: IM$2,
	IN: IN$3,
	IO: IO$2,
	IQ: IQ$2,
	IR: IR$2,
	IS: IS$2,
	IT: IT$5,
	JE: JE$2,
	JM: JM$2,
	JO: JO$2,
	JP: JP$2,
	KE: KE$2,
	KG: KG$2,
	KH: KH$2,
	KI: KI$3,
	KM: KM$3,
	KN: KN$2,
	KP: KP$2,
	KR: KR$2,
	KW: KW$2,
	KY: KY$2,
	KZ: KZ$2,
	LA: LA$2,
	LB: LB$2,
	LC: LC$2,
	LI: LI$2,
	LK: LK$2,
	LR: LR$3,
	LS: LS$3,
	LT: LT$2,
	LU: LU$3,
	LV: LV$2,
	LY: LY$2,
	MA: MA$2,
	MC: MC$2,
	MD: MD$3,
	ME: ME$2,
	MF: MF$2,
	MG: MG$3,
	MH: MH$2,
	MK: MK$2,
	ML: ML$2,
	MM: MM$2,
	MN: MN$2,
	MO: MO$2,
	MP: MP$2,
	MQ: MQ$2,
	MR: MR$2,
	MS: MS$2,
	MT: MT$2,
	MU: MU$2,
	MV: MV$2,
	MW: MW$2,
	MX: MX$3,
	MY: MY$2,
	MZ: MZ$3,
	NA: NA$3,
	NC: NC$2,
	NE: NE$2,
	NF: NF$2,
	NG: NG$3,
	NI: NI$3,
	NL: NL$4,
	NO: NO$2,
	NP: NP$2,
	NR: NR$2,
	NU: NU$2,
	NZ: NZ$3,
	OM: OM$2,
	PA: PA$2,
	PE: PE$3,
	PF: PF$2,
	PG: PG$3,
	PH: PH$2,
	PK: PK$3,
	PL: PL$3,
	PM: PM$2,
	PN: PN$2,
	PR: PR$2,
	PS: PS$2,
	PT: PT$3,
	PW: PW$2,
	PY: PY$2,
	QA: QA$2,
	RE: RE$2,
	RO: RO$4,
	RS: RS$2,
	RU: RU$2,
	RW: RW$2,
	SA: SA$2,
	SB: SB$2,
	SC: SC$2,
	SD: SD$2,
	SE: SE$4,
	SG: SG$2,
	SH: SH$3,
	SI: SI$2,
	SJ: SJ$2,
	SK: SK$3,
	SL: SL$3,
	SM: SM$2,
	SN: SN$3,
	SO: SO$3,
	SR: SR$3,
	SS: SS$3,
	ST: ST$2,
	SV: SV$3,
	SX: SX$2,
	SY: SY$2,
	SZ: SZ$2,
	TC: TC$2,
	TD: TD$3,
	TF: TF$2,
	TG: TG$3,
	TH: TH$2,
	TJ: TJ$2,
	TK: TK$2,
	TL: TL$3,
	TM: TM$2,
	TN: TN$2,
	TO: TO$2,
	TR: TR$3,
	TT: TT$3,
	TV: TV$2,
	TW: TW$2,
	TZ: TZ$2,
	UA: UA$2,
	UG: UG$2,
	UM: UM$2,
	US: US$3,
	UY: UY$3,
	UZ: UZ$2,
	VA: VA$2,
	VC: VC$2,
	VE: VE$3,
	VG: VG$2,
	VI: VI$2,
	VN: VN$2,
	VU: VU$2,
	WF: WF$2,
	WS: WS$2,
	YE: YE$2,
	YT: YT$2,
	ZA: ZA$3,
	ZM: ZM$2,
	ZW: ZW$3,
	'default': countryNames
});

var templates$2 = getCjsExportFromNamespace(templates$1);

var aliases$2 = getCjsExportFromNamespace(aliases$1);

var stateCodes$2 = getCjsExportFromNamespace(stateCodes$1);

var countyCodes$2 = getCjsExportFromNamespace(countyCodes$1);

var country2lang = getCjsExportFromNamespace(countryToLang$1);

var abbreviations$2 = getCjsExportFromNamespace(abbreviations$1);

var countryNames$2 = getCjsExportFromNamespace(countryNames$1);

var knownComponents = aliases$2.map(function (a) {
  return a.alias;
});
var VALID_REPLACEMENT_COMPONENTS = ['state'];

var determineCountryCode = function determineCountryCode(input) {
  var fallbackCountryCode = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var countryCode = input.country_code && input.country_code.toUpperCase();

  if (!templates$2[countryCode] && fallbackCountryCode) {
    countryCode = fallbackCountryCode.toUpperCase();
  }

  if (!countryCode || countryCode.length !== 2) {
    // TODO change this to exceptions
    return input;
  }

  if (countryCode === 'UK') {
    countryCode = 'GB';
  }

  if (templates$2[countryCode] && templates$2[countryCode].use_country) {
    var oldCountryCode = countryCode;
    countryCode = templates$2[countryCode].use_country.toUpperCase();

    if (templates$2[oldCountryCode].change_country) {
      var newCountry = templates$2[oldCountryCode].change_country;
      var componentRegex = /\$(\w*)/;
      var componentMatch = componentRegex.exec(newCountry);

      if (componentMatch) {
        if (input[componentMatch[1]]) {
          newCountry = newCountry.replace(new RegExp("\\$".concat(componentMatch[1])), input[componentMatch[1]]);
        } else {
          newCountry = newCountry.replace(new RegExp("\\$".concat(componentMatch[1])), '');
        }
      }

      input.country = newCountry;
    }

    if (templates$2[oldCountryCode].add_component && templates$2[oldCountryCode].add_component.indexOf('=') > -1) {
      var splitted = templates$2[oldCountryCode].add_component.split('=');

      if (VALID_REPLACEMENT_COMPONENTS.indexOf(splitted[0]) > -1) {
        input[splitted[0]] = splitted[1];
      }
    }
  }

  if (countryCode === 'NL' && input.state) {
    if (input.state === 'Curaçao') {
      countryCode = 'CW';
      input.country = 'Curaçao';
    } else if (input.state.match(/sint maarten/i)) {
      countryCode = 'SX';
      input.country = 'Sint Maarten';
    } else if (input.state.match(/aruba/i)) {
      countryCode = 'AW';
      input.country = 'Aruba';
    }
  } // eslint-disable-next-line camelcase


  input.country_code = countryCode;
  return input;
};

var normalizeComponentKeys = function normalizeComponentKeys(input) {
  var inputKeys = Object.keys(input);

  for (var i = 0; i < inputKeys.length; i++) {
    var snaked = inputKeys[i].replace(/([A-Z])/g, '_$1').toLowerCase();

    if (knownComponents.indexOf(snaked) > -1 && !input[snaked]) {
      input[snaked] = input[inputKeys[i]];
      delete input[inputKeys[i]];
    }
  }

  return input;
};

var applyAliases = function applyAliases(input) {
  var inputKeys = Object.keys(input);

  var _loop = function _loop(i) {
    var alias = aliases$2.find(function (a) {
      return a.alias === inputKeys[i];
    });

    if (alias && !input[alias.name]) {
      input[alias.name] = input[alias.alias];
    }
  };

  for (var i = 0; i < inputKeys.length; i++) {
    _loop(i);
  }

  return input;
};

var getStateCode = function getStateCode(state, countryCode) {
  if (!stateCodes$2[countryCode]) {
    return;
  } // TODO what if state is actually the stateCode?
  // https://github.com/OpenCageData/perl-Geo-Address-Formatter/blob/master/lib/Geo/Address/Formatter.pm#L526


  var found = stateCodes$2[countryCode].find(function (e) {
    return e.name.toUpperCase() === state.toUpperCase();
  });
  return found && found.key;
};

var getCountyCode = function getCountyCode(county, countryCode) {
  if (!countyCodes$2[countryCode]) {
    return;
  } // TODO what if county is actually the countyCode?


  var found = countyCodes$2[countryCode].find(function (e) {
    return e.name.toUpperCase() === county.toUpperCase();
  });
  return found && found.key;
};

var cleanupInput = function cleanupInput(input) {
  var replacements = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
  // If the country is a number, use the state as country
  var inputKeys = Object.keys(input);

  if (input.country && input.state && Number.isInteger(input.country)) {
    input.country = input.state;
    delete input.state;
  }

  if (replacements && replacements.length) {
    for (var i = 0; i < inputKeys.length; i++) {
      for (var j = 0; j < replacements.length; j++) {
        var componentRegex = new RegExp("^".concat(inputKeys[i], "="));

        if (replacements[j][0].match(componentRegex)) {
          var val = replacements[j][0].replace(componentRegex, '');

          if (input[inputKeys[i]] === val) {
            input[inputKeys[i]] = replacements[j][1];
          }
        } else {
          input[inputKeys[i]] = "".concat(input[inputKeys[i]]).replace(new RegExp(replacements[j][0]), replacements[j][1]);
        }
      }
    }
  }

  if (!input.state_code && input.state) {
    // eslint-disable-next-line camelcase
    input.state_code = getStateCode(input.state, input.country_code);

    if (input.state.match(/^washington,? d\.?c\.?/i)) {
      // eslint-disable-next-line camelcase
      input.state_code = 'DC';
      input.state = 'District of Columbia';
      input.city = 'Washington';
    }
  }

  if (!input.county_code && input.county) {
    // eslint-disable-next-line camelcase
    input.county_code = getCountyCode(input.county, input.country_code);
  }

  var unknownComponents = [];

  for (var _i = 0; _i < inputKeys.length; _i++) {
    if (knownComponents.indexOf(inputKeys[_i]) === -1) {
      unknownComponents.push(inputKeys[_i]);
    }
  }

  if (unknownComponents.length) {
    input.attention = unknownComponents.map(function (c) {
      return input[c];
    }).join(', ');
  }

  if (input.postcode) {
    // convert to string
    input.postcode = "".concat(input.postcode);
    var multiCodeRegex = /^(\d{5}),\d{5}/;
    var multiCodeMatch = multiCodeRegex.exec(input.postcode);

    if (input.postcode.length > 20) {
      delete input.postcode; // OSM may use postcode ranges
    } else if (input.postcode.match(/\d+;\d+/)) {
      delete input.postcode;
    } else if (multiCodeMatch) {
      input.postcode = multiCodeMatch[1];
    }
  }

  if (options.abbreviate && input.country_code && country2lang[input.country_code]) {
    for (var _i2 = 0; _i2 < country2lang[input.country_code].length; _i2++) {
      var lang = country2lang[input.country_code][_i2];

      if (abbreviations$2[lang]) {
        for (var _j = 0; _j < abbreviations$2[lang].length; _j++) {
          if (input[abbreviations$2[lang][_j].component]) {
            for (var k = 0; k < abbreviations$2[lang][_j].replacements.length; k++) {
              input[abbreviations$2[lang][_j].component] = input[abbreviations$2[lang][_j].component].replace(new RegExp("\\b".concat(abbreviations$2[lang][_j].replacements[k].src, "\\b")), abbreviations$2[lang][_j].replacements[k].dest);
            }
          }
        }
      }
    }
  } // naive url cleanup, keys might have changed along the cleanup


  inputKeys = Object.keys(input);

  for (var _i3 = 0; _i3 < inputKeys.length; _i3++) {
    if ("".concat(input[inputKeys[_i3]]).match(/^https?:\/\//i)) {
      delete input[inputKeys[_i3]];
    }
  }

  return input;
};

var findTemplate = function findTemplate(input) {
  return templates$2[input.country_code] ? templates$2[input.country_code] : templates$2.default;
};

var chooseTemplateText = function chooseTemplateText(template, input) {
  var selected = template.address_template || templates$2.default.address_template;
  var threshold = 2; // Choose fallback only when none of these is present

  var required = ['road', 'postcode'];
  var missingValuesCnt = required.map(function (r) {
    return !!input[r];
  }).filter(function (s) {
    return !s;
  }).length;

  if (missingValuesCnt === threshold) {
    selected = template.fallback_template || templates$2.default.fallback_template;
  }

  return selected;
};

var cleanupRender = function cleanupRender(text) {
  var replacements = [// eslint-disable-next-line no-useless-escape
  {
    s: /[\t-\r ,\}\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+$/,
    d: ''
  }, {
    s: /^[\t-\r ,\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]+/,
    d: ''
  }, {
    s: /^\x2D /,
    d: ''
  }, // line starting with dash due to a parameter missing
  {
    s: /,[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*,/,
    d: ', '
  }, // multiple commas to one
  {
    s: /[\t ]+,[\t ]+/,
    d: ', '
  }, // one horiz whitespace behind comma
  {
    s: /[\t ][\t ]+/,
    d: ' '
  }, // multiple horiz whitespace to one
  {
    s: /[\t ]\n/,
    d: '\n'
  }, // horiz whitespace, newline to newline
  {
    s: /\n,/,
    d: '\n'
  }, // newline comma to just newline
  {
    s: /,,+/,
    d: ','
  }, // multiple commas to one
  {
    s: /,\n/,
    d: '\n'
  }, // comma newline to just newline
  {
    s: /\n[\t ]+/,
    d: '\n'
  }, // newline plus space to newline
  {
    s: /\n\n+/,
    d: '\n'
  } // multiple newline to one
  ];

  var dedupe = function dedupe(inputChunks, glue) {
    var modifier = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (s) {
      return s;
    };
    var seen = {};
    var result = [];

    for (var i = 0; i < inputChunks.length; i++) {
      var chunk = inputChunks[i].trim();

      if (!seen[chunk]) {
        seen[chunk] = 1;
        result.push(modifier(chunk));
      }
    }

    return result.join(glue);
  };

  for (var i = 0; i < replacements.length; i++) {
    text = text.replace(replacements[i].s, replacements[i].d);
    text = dedupe(text.split('\n'), '\n', function (s) {
      return dedupe(s.split(', '), ', ');
    });
  }

  return text.trim();
};

var renderTemplate = function renderTemplate(template, input) {
  var templateText = chooseTemplateText(template, input);
  var templateInput = Object.assign({}, input, {
    first: function first() {
      return function (text, render) {
        var possibilities = render(text, input).split(/\s*\|\|\s*/).filter(function (b) {
          return b.length > 0;
        });
        return possibilities.length ? possibilities[0] : '';
      };
    }
  });
  var render = cleanupRender(mustache.render(templateText, templateInput));

  if (template.postformat_replace) {
    for (var i = 0; i < template.postformat_replace.length; i++) {
      var replacement = template.postformat_replace[i];
      render = render.replace(new RegExp(replacement[0]), replacement[1]);
    }
  }

  render = cleanupRender(render);

  if (!render.trim().length) {
    render = cleanupRender(Object.keys(input).map(function (i) {
      return input[i];
    }).filter(function (s) {
      return !!s;
    }).join(', '));
  }

  return render + '\n';
};

var src = {
  format: function format(input) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      countryCode: undefined,
      abbreviate: false,
      output: 'string',
      appendCountry: false
    };
    var realInput = Object.assign({}, input);
    realInput = normalizeComponentKeys(realInput);

    if (options.countryCode) {
      // eslint-disable-next-line camelcase
      realInput.country_code = options.countryCode;
    }

    realInput = determineCountryCode(realInput, options.fallbackCountryCode);

    if (options.appendCountry && countryNames$2[realInput.country_code] && !realInput.country) {
      realInput.country = countryNames$2[realInput.country_code];
    }

    realInput = applyAliases(realInput);
    var template = findTemplate(realInput);
    realInput = cleanupInput(realInput, template.replace, options);
    var result = renderTemplate(template, realInput);

    if (options.output === 'array') {
      return result.split('\n').filter(function (f) {
        return !!f;
      });
    }

    return result;
  },
  _determineCountryCode: determineCountryCode,
  _normalizeComponentKeys: normalizeComponentKeys,
  _applyAliases: applyAliases,
  _getStateCode: getStateCode,
  _getCountyCode: getCountyCode,
  _cleanupInput: cleanupInput,
  _findTemplate: findTemplate,
  _chooseTemplateText: chooseTemplateText,
  _cleanupRender: cleanupRender,
  _renderTemplate: renderTemplate
};
var src_1 = src.format;
var src_2 = src._determineCountryCode;
var src_3 = src._normalizeComponentKeys;
var src_4 = src._applyAliases;
var src_5 = src._getStateCode;
var src_6 = src._getCountyCode;
var src_7 = src._cleanupInput;
var src_8 = src._findTemplate;
var src_9 = src._chooseTemplateText;
var src_10 = src._cleanupRender;
var src_11 = src._renderTemplate;

export default src;
export { src_4 as _applyAliases, src_9 as _chooseTemplateText, src_7 as _cleanupInput, src_10 as _cleanupRender, src_2 as _determineCountryCode, src_8 as _findTemplate, src_6 as _getCountyCode, src_5 as _getStateCode, src_3 as _normalizeComponentKeys, src_11 as _renderTemplate, src_1 as format };
